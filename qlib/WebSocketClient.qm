# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file WebSocketClient.qm WebSocket client implementation

/*  WebSocketClient.qm Copyright 2013 - 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.8.12

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

%requires WebSocketUtil >= 1.0
%requires Util >= 1.0

%new-style

module WebSocketClient {
    version = "1.5";
    desc = "user module for providing client support for the WebSocket protocol";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage WebSocketClient Module

    @tableofcontents

    @section websocketclientintro Introduction to the WebSocketClient Module

    The %WebSocketClient module provides client support for <a href="http://tools.ietf.org/html/rfc6455">RFC-6455 based WebSocket protocol</a> implementations in %Qore.

    To use this module, use \c "%requires WebSocketClient" in your code.

    This module automatically uses the <a href="../../WebSocketUtil/html/index.html">WebSocketUtil</a> module for encoding and decoding web socket messages.

    All the public symbols in the module are defined in the WebSocketClient namespace.

    Currently the module provides the following class:
    - @ref WebSocketClient::WebSocketClient "WebSocketClient": the web socket client class

    <b>Example</b>
    @code{.py}
#!/usr/bin/env qore

%require-our
%enable-all-warnings

%requires WebSocketClient

*string url = shift ARGV;
if (!url) {
    stderr.printf("usage: %s <URL>\n", get_script_name());
    exit(1);
}

WebSocketClient ws();
ws.connect(("url": url, "callback": sub (*data d) { if (d.typeCode() == NT_BINARY) printf("binary msg received: %y\n", d); else if (d) printf("%s\n", d);}));
# wait forever (or until ctrl-c)
Counter c(1);
c.waitForZero();
    @endcode

    @section websocketclient_relnotes WebSocketClient Module Release History

    @subsection wsc_v15 v1.5
    - added timeout values to @ref Qore::Socket "Socket" and @ref Qore::HTTPClient "HTTPClient" calls (<a href="https://github.com/qorelanguage/qore/issues/1725">issue 1725</a>)

    @subsection wsc_v14 v1.4
    - fixed a bug parsing and generating the websocket close status code (<a href="https://github.com/qorelanguage/qore/issues/1216">issue 1216</a>)

    @subsection wsc_v13 v1.3
    - ignore \c SOCKET-NOT-OPEN errors when closing (server already closed the connection)

    @subsection wsc_v12 v1.2
    - prepend \c "WebSocketClient: " to log messages

    @subsection wsc_v11 v1.1
    - added socket instrumention support from Qore 0.8.9

    @subsection wsc_v10 v1.0
    - the initial version of the WebSocketClient module
*/

#! the WebSocketClient namespace contains all the definitions in the WebSocketClient module
public namespace WebSocketClient {
    #! known websocket schemes
    public const WsSchemes = (
        "ws": (
            "ssl": False,
        ),
        "wss": (
            "ssl": True,
        ),
        );

    #! default port for connections
    public const WsDefaultPort = 80;

    #! the main websocket client class
    /** To use this class, create a @ref WebSocketClient::WebSocketClient "WebSocketClient" object and the call @ref WebSocketClient::WebSocketClient::connect() "WebSocketClient::connect()".

        The @ref WebSocketClient::WebSocketClient::connect() "WebSocketClient::connect()" method starts a background thread to receive messages, which are then posted to the callback provided in the @ref WebSocketClient::WebSocketClient::connect() "WebSocketClient::connect()" method call.

        To stop listening for web socket events, call @ref WebSocketClient::WebSocketClient::disconnect() "WebSocketClient::disconnect()".
     */
    public class WebSocketClient {
        private {
            Mutex m();
            HTTPClient hc;
            int stop = 0;
            Counter c();
            code callback;
            *code log;
            *code errlog;
            *code debuglog;
            timeout timeout_ms = DefaultTimeout;
        }

        public {
            #! default socket I/O operation timeout: 15 seconds
            const DefaultTimeout = 15s;

            #! module version
            const Version = "1.5";

            #! default user agent string for HTTP requests
            const DefaultUserAgent = sprintf("Qore-WebSocketClient/%s", WebSocketClient::Version);
        }

        #! creates the object and optionally sets logging targets
        /** @par Example:
            @code{.py}
sub event(*data msg) {
    if (!msg)
        printf("connection closed\n");
    else
        printf("%s msg: %y\n", now_us().format("YYYY-MM-DD HH:mm:SS.xx"), msg);
}
WebSocketClient ws(\event(), ("url": "ws://example.com:8080/path"));
            @endcode

            @param cb the callback @ref closure "closure" or @ref call_reference "call reference" for received messages
            @param opts an option hash for the @ref Qore::HTTPClient::constructor(hash) "HTTPClient constructor" plus the following keys:
            - \c log: an optional @ref closure "closure" or @ref call_reference "call reference" for informational logging
            - \c errlog: an optional @ref closure "closure" or @ref call_reference "call reference" for error logging
            - \c debuglog: an optional @ref closure "closure" or @ref call_reference "call reference" for logging debugging/technical messages about the web socket connection

            @throw WEBSOCKET-ERROR unknown scheme, missing 'url' key in option hash
        */
        constructor(code cb, hash opts) {
            if (opts.url.typeCode() != NT_STRING)
                throw "WEBSOCKET-ERROR", sprintf("option hash to WebSocketClient::constructor() missing 'url' key giving the connection target");

            hash uh = parse_url(opts.url);
            bool ssl;
            if (uh.protocol) {
                *hash ph = WsSchemes.(uh.protocol);
                if (!ph)
                    throw "WEBSOCKET-ERROR", sprintf("schema %y is unknown in %y; known schemes: %y", uh.protocol, opts.url, WsSchemes.keys());
                ssl = ph.ssl;
            }

            if (ssl)
                opts.url =~ s/^wss:/https:/i;
            else
                opts.url =~ s/^ws:/http:/i;

            # ensure that the timeout value is set correctly and consistently
            if (opts.timeout)
                timeout_ms = opts.timeout;
            else
                opts.timeout = timeout_ms;

            hc = new HTTPClient(opts);
            log = opts.log;
            errlog = opts.errlog;
            debuglog = opts.debuglog;

            callback = cb;
        }

        #! connects to the websocket server
        /** @par Example:
            @code{.py}
sub event(*data msg) {
    if (!msg)
        printf("connection closed\n");
    else
        printf("%s msg: %y\n", now_us().format("YYYY-MM-DD HH:mm:SS.xx"), msg);
}
WebSocketClient ws(("url": "ws://example.com:8080/path", "callback": \event()));
ws.connect();
            @endcode

            This method starts a background thread to receive messages, which are then posted to the callback @ref closure "closure" or @ref call_reference "call reference" given as an argument.  If the server disconnects the web socket connection, the callback will be called with no argument (ie @ref nothing).  In this case the event thread also terminates and the WebSocketClient object will be in a disconnected state.

            To stop listening for web socket events, call @ref WebSocketClient::WebSocketClient::disconnect() "WebSocketClient::disconnect()".

            If this method is called while a connection is already in progress, then the existing connection is first implicitly disconnected with close code @ref WebSocketUtil::WSCC_GoingAway "WSCC_GoingAway".

            @param opts a hash with the following keys:
            - \c hdr: (optional) a @ref hash_type "hash" giving header values for the connection request to the web socket server
            @param info a @ref reference_type "reference" to a hash which will be set to information about the call setup

            @return a hash with information about the HTTP response from the webn socket server corresponding to the return value of @ref Qore::Socket::readHTTPHeader()

            @throw WEBSOCKET-ERROR the option hash is missing either the 'url' or 'callback' keys or type error in the option hash
         */
         hash connect(*hash opts, *reference info) {
            if (opts.hdr && opts.hdr.typeCode() != NT_HASH)
                throw "WEBSOCKET-ERROR", sprintf("option hash to WebSocketClient::connect() 'hdr' key not assigned to a hash; type received: %y", opts.hdr.type());

            m.lock();
            on_exit m.unlock();

            if (hc.isOpen())
                disconnectUnlocked();

            hash h = connectUnlocked(opts.hdr, \info);
            c.inc();
            on_error c.dec();
            background eventLoop(callback);
            return h;
        }

        #! returns @ref Qore::True "True" if the connection is currently open and active, @ref Qore::False "False" if not
        bool isOpen() {
            m.lock();
            on_exit m.unlock();

            return hc.isOpen();
        }

        #! disconnect with the given @ref closecodes "close code"
        disconnect(int cmd = WSCC_GoingAway) {
            m.lock();
            on_exit m.unlock();

            if (hc.isOpen())
                disconnectUnlocked(cmd);
        }

        #! Removes any warning @ref Qore::Thread::Queue "Queue" object from the Socket
        /** @par Example:
            @code{.py}
ws.clearWarningQueue();
            @endcode

            @see WebSocketClient::setWarningQueue()

            @since %WebSocketClient 1.1
        */
        nothing clearWarningQueue() {
            hc.clearWarningQueue();
        }

        #! Sets a @ref Qore::Thread::Queue "Queue" object to receive socket warnings
        /** @par Example:
            @code{.py}
ws.setWarningQueue(5000, 5000, queue, "socket-1");
            @endcode

            @param warning_ms the threshold in milliseconds for individual socket actions (send, receive, connect), if exceeded, a socket warning is placed on the warning queue with the following keys:
            - \c "type": a string with the constant value \c "SOCKET-OPERATION-WARNING"
            - \c "operation": a string giving the operation that caused the warning (ex: \c "connect")
            - \c "us": an integer giving the number of microseconds for the operation
            - \c "timeout": an integer giving the warning threshold in microseconds
            - \c "arg": if any \c "arg" argument is passed to the @ref Qore::WebSocketClient::setWarningQueue() "WebSocketClient::setWarningQueue()" method, it will be included in the warning hash here
            @param warning_bs value in bytes per second; if any call has performance below this threshold, a socket warning is placed on the warning queue with the following keys:
            - \c "type": a string with the constant value \c "SOCKET-THROUGHPUT-WARNING"
            - \c "dir": either \c "send" or \c "recv" depending on the direction of the data flow
            - \c "bytes": the amount of bytes sent
            - \c "us": an integer giving the number of microseconds for the operation
            - \c "bytes_sec": a float giving the transfer speed in bytes per second
            - \c "threshold": an integer giving the warning threshold in bytes per second
            - \c "arg": if any \c "arg" argument is passed to the @ref Qore::WebSocketClient::setWarningQueue() "WebSocketClient::setWarningQueue()" method, it will be included in the warning hash here
            @param queue the @ref Qore::Thread::Queue "Queue" object to receive warning events
            @param arg an optional argument to be placed in the \c "arg" key in each warning hash (could be used to identify the socket for example)
            @param min_ms the minimum transfer time with a resolution of milliseconds for a transfer to be eligible for triggering a warning; transfers that take less than this period of time are not eligible for raising a warning

            @throw QUEUE-ERROR the Queue passed has a maximum size set
            @throw SOCKET-SETWARNINGQUEUE-ERROR at least one of \a warning_ms and \a warning_bs must be > 0

            @see WebSocketClient::clearWarningQueue()

            @since %WebSocketClient 1.1
        */
        nothing setWarningQueue(int warning_ms, int warning_bs, Queue queue, any arg, timeout min_ms = 1s) {
            hc.setWarningQueue(warning_ms, warning_bs, queue, arg, min_ms);
        }

        #! Returns performance statistics for the socket
        /** @par Example:
            @code{.py}
hash h = ws.getUsageInfo();
            @endcode

            @return a hash with the following keys:
            - \c "bytes_sent": an integer giving the total amount of bytes sent
            - \c "bytes_recv": an integer giving the total amount of bytes received
            - \c "us_sent": an integer giving the total number of microseconds spent sending data
            - \c "us_recv": an integer giving the total number of microseconds spent receiving data
            - \c "arg": (only if warning values have been set with @ref Qore::WebSocketClient::setWarningQueue() "WebSocketClient::setWarningQueue()") the optional argument for warning hashes
            - \c "timeout": (only if warning values have been set with @ref Qore::WebSocketClient::setWarningQueue() "WebSocketClient::setWarningQueue()") the warning timeout in microseconds
            - \c "min_throughput": (only if warning values have been set with @ref Qore::WebSocketClient::setWarningQueue() "WebSocketClient::setWarningQueue()") the minimum warning throughput in bytes/sec

            @since %WebSocketClient 1.1

            @see WebSocketClient::clearStats()
        */
        hash getUsageInfo() {
            return hc.getUsageInfo();
        }

        #! Clears performance statistics
        /** @par Example:
            @code{.py}
ws.clearStats();
            @endcode

            @since %WebSocketClient 1.1

            @see WebSocketClient::getUsageInfo()
        */
        clearStats() {
            hc.clearStats();
        }

        private disconnectUnlocked(int cmd = WSCC_GoingAway) {
            stop = cmd;
            c.waitForZero();
        }

        private eventLoop(code callback) {
            on_exit c.dec();
            while (True) {
                if (stop) {
                    sendClose(stop);
                    break;
                }

                try {
                    if (!hc.isDataAvailable(50ms))
                        continue;

                    hash h = ws_read_message(hc, timeout_ms);

                    if (h.op == WSOP_Close) {
                        if (!h.close) {
                            logDebug("server sent OpClose without code; closing immediately");
                            break;
                        }
                        logDebug("client sent WSOP_Close code %d (%s): %s", h.close, WSCCMap.(h.close), h.msg);
                        sendClose(h.close, h.msg);
                        break;
                    }

                    logDebug("received msg (%s: %d bytes): %s", WSOPMap.(h.op), h.msg.size(), h.msg ? sprintf("type: %s: %y", h.msg.type(), h.msg) : "n/a");

                    if (h.masked) {
                        logError("unmasked client frame received");
                        sendClose(WSCC_ProtocolError);
                        break;
                    }

                    if (h.op == WSOP_Ping) {
                        hc.send2(ws_encode_message(h.msg, WSOP_Pong, True), timeout_ms);
                        continue;
                    }

                    if (h.op == WSOP_Text || h.op == WSOP_Binary) {
                        callback(h.msg);
                        continue;
                    }
                    # unrecognized opcode - close the connection
                    sendClose(WSCC_UnsupportedData);
                    break;
                }
                catch (hash ex) {
                    string err = sprintf("%s: %s: %s", get_ex_pos(ex), ex.err, ex.desc);
                    logError(err);
                    sendClose(WSCC_InternalServerError, err);
                    break;
                }
            }

            # call the callback with NOTHING to signal that the connection has been closed
            callback();
            if (hc.isOpen()) {
                hc.shutdown();
                hc.close();
            }
        }

        private logInfo(string fmt) {
            if (log)
                call_function(log, vsprintf("WebSocketClient: " + fmt, argv));
        }

        private logError(string fmt) {
            if (errlog)
                call_function(errlog, vsprintf("WebSocketClient: " + fmt, argv));
        }

        private logDebug(string fmt) {
            if (debuglog)
                call_function(debuglog, vsprintf("WebSocketClient: " + fmt, argv));
        }

        private sendClose(int code, *string txtmsg) {
            if (!WSCCMap{code}) {
                logError("WebSocketClient::sendClose(): invalid close code %d received; expecting one of: %y", code, (map $1.toInt(), WSCCMap.keyIterator()));
                code = WSCC_InternalServerError;
            }

            binary msg = code.encodeMsb(2);

            if (txtmsg) {
                if (txtmsg.encoding() != "UTF-8")
                    txtmsg = convert_encoding(txtmsg, "UTF-8");
            }
            else
                txtmsg = WSCCMap{code};
            msg += txtmsg;
            try {
                hc.send2(ws_encode_message(msg, WSOP_Close, True), timeout_ms);
            }
            catch (hash ex) {
                # ignore SOCKET-NOT-OPEN errors when closing (server already closed the connection)
                if (ex.err == "SOCKET-NOT-OPEN")
                    return;
                rethrow;
            }
        }

        private hash connectUnlocked(*hash hdr, *reference info) {
            if (!hdr."User-Agent")
                hdr."User-Agent" = DefaultUserAgent;

            hdr += (
                "Upgrade": "websocket",
                "Connection": "Upgrade",
                "Sec-WebSocket-Key": get_random_string().toBase64(),
                );

            hash rh = hc.send(NOTHING, "GET", NOTHING, hdr, NOTHING, \info);

            if (rh.status_code != 101)
                throw "WEBSOCKET-ERROR", sprintf("HTTP server at URL %y returned status code %d: %s to our request", hc.getURL(), rh.status_code, rh.status_message);

            return rh;
        }

        send(string str) {
            hc.send2(ws_encode_message(str, WSOP_Text, True), timeout_ms);
        }

        send(binary bin) {
            hc.send2(ws_encode_message(bin, WSOP_Binary, True), timeout_ms);
        }
    }
}
