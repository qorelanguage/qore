# -*- mode: qore; indent-tabs-mode: nil -*-
#! Qore GoogleDataProvider module definition

/*  GoogleDataProvider.qm Copyright 2023 - 2024 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 2.0
# assume local scope for variables, do not use "$" signs
%new-style
# require type definitions everywhere
%require-types
# strict argument handling
%strict-args
# enable all warnings
%enable-all-warnings

%requires(reexport) DataProvider
%requires(reexport) GoogleRestClient

module GoogleDataProvider {
    version = "2.0";
    desc = "user module providing a base data provider API for Google REST cloud services";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage GoogleDataProvider Module

    @tableofcontents

    @section googledataproviderintro Introduction to the GoogleDataProvider Module

    The %GoogleDataProvider module provides a base @ref dataproviderintro "data provider" API for Google cloud REST
    API services.

    This module provides common services for Google REST API communications, including support for the Discovery API;
    see the following modules for data provider providing specific API support:
    - <a href="../../modules/GoogleCalendarDataProvider/html/index.html">GoogleCalendarDataProvider</a>: Google Calendars

    @section googledataprovider_relnotes Release Notes

    @subsection googledataprovider_v2_0 GoogleDataProvider v2.0
    - split off calendar API to a separate module
    - implemented support for the Discovery API

    @subsection googledataprovider_v1_0 GoogleDataProvider v1.0
    - initial release of the module
*/

#! Contains all public definitions in the GoogleDataProvider module
public namespace GoogleDataProvider {
#! Boolean string type for query parameters
public const SoftBoolStringType = new SoftBoolStringType();

#! Boolean data provider string type for query parameters
public const SoftBoolDataProviderStringType = AbstractDataProviderType::get(SoftBoolStringType);

#! Boolean string type for query parameters
public const SoftBoolOrNothingStringType = new SoftBoolOrNothingStringType();

#! Boolean data provider string type for query parameters
public const SoftBoolOrNothingDataProviderStringType = AbstractDataProviderType::get(SoftBoolOrNothingStringType);

#! Boolean string type for boolean input and string output
public class SoftBoolStringType inherits Qore::Reflection::Type {
    #! Creates the object
    constructor() : Type("softstring") {
    }

    #! Returns the type name
    string getName() {
        return "softboolstring";
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        return parse_boolean(value) ? "true" : "false";
    }

    #! Returns the default value for the type or NOTHING if the type has no default value
    auto getDefaultValue() {
        return "false";
    }
}

#! Boolean string type for boolean input and string output
public class SoftBoolOrNothingStringType inherits Qore::Reflection::Type {
    #! Creates the object
    constructor() : Type("*softstring") {
    }

    #! Returns the type name
    string getName() {
        return "*softboolstring";
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        if (!exists value || value === NULL) {
            return;
        }
        return parse_boolean(value) ? "true" : "false";
    }

    #! Returns the default value for the type or NOTHING if the type has no default value
    auto getDefaultValue() {
    }
}

#! Boolean string type for string input and boolean output
public const SoftBoolInputType = new SoftBoolInputType();

#! Boolean data provider string type for query parameters
public const SoftBoolDataProviderInputType = AbstractDataProviderType::get(SoftBoolInputType);

#! Boolean string type for string input and boolean output
public const SoftBoolOrNothingInputType = new SoftBoolOrNothingInputType();

#! Boolean data provider string type for query parameters
public const SoftBoolOrNothingDataProviderInputType = AbstractDataProviderType::get(SoftBoolOrNothingInputType);

#! Boolean string type
public class SoftBoolInputType inherits Qore::Reflection::Type {
    #! Creates the object
    constructor() : Type("softbool") {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        return parse_boolean(value);
    }

    #! Returns the default value for the type or NOTHING if the type has no default value
    auto getDefaultValue() {
        return False;
    }
}

#! Boolean string type
public class SoftBoolOrNothingInputType inherits Qore::Reflection::Type {
    #! Creates the object
    constructor() : Type("*softbool") {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        if (!exists value || value === NULL) {
            return;
        }
        return parse_boolean(value);
    }

    #! Returns the default value for the type or NOTHING if the type has no default value
    auto getDefaultValue() {
    }
}

#! Data provider type for timestamps in API arguments
public const SoftTimestampDataProviderStringType = new SoftTimestampDataProviderStringType();

#! Timestamp string type
public class SoftTimestampDataProviderStringType inherits DataProvider::QoreSoftStringOrNothingDataType {
    #! Creates the object
    constructor() {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        return exists value ? date(value).format("YYYY-MM-DDTHH:mm:SSZ") : NOTHING;
    }
}

#! Data provider type for timestamps in API arguments
public const SoftDateDataProviderStringType = new SoftDateDataProviderStringType();

#! Date string type
public class SoftDateDataProviderStringType inherits DataProvider::QoreSoftStringOrNothingDataType {
    #! Creates the object
    constructor() {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        return exists value ? date(value).format("YYYY-MM-DD") : NOTHING;
    }
}

#! Data provider type for output types using base64 URL encoding
public class Base64UrlBinaryOutputType inherits DataProvider::QoreDataType {
    #! Creates the object
    constructor() : QoreDataType(DataType) {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        value = QoreDataType::acceptsValue(value);
        return make_base64_url_string(value);
    }
}

#! Constant for output types using base64 URL encoding
public const Base64UrlBinaryOutputType = new Base64UrlBinaryOutputType();

#! Data provider type for output types using base64 URL encoding
public class Base64UrlBinaryOutputOrNothingType inherits DataProvider::QoreDataType {
    #! Creates the object
    constructor() : QoreDataType(DataOrNothingType) {
    }

    #! Returns the value after any conversions by the type
    auto acceptsValue(auto value) {
        value = QoreDataType::acceptsValue(value);
        return value ? make_base64_url_string(value) : NOTHING;
    }
}

#! Constant for output types using base64 URL encoding
public const Base64UrlBinaryOutputOrNothingType = new Base64UrlBinaryOutputOrNothingType();
}
