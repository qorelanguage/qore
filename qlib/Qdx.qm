# -*- mode: qore; indent-tabs-mode: nil -*-
# @file Qdx.qm Qore user module for documentation generation with doxygen

/*  Qdx.qm Copyright 2016 - 2017 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 0.8.13

%require-types
%enable-all-warnings
%new-style

%requires Util

module Qdx {
    version = "1.0";
    desc    = "module providing support for documentation generation with doxygen";
    author  = "David Nichols <david@qore.org>";
    url     = "http://qore.org";
    license = "MIT";
}

/** @mainpage Qdx Module

    @tableofcontents

    @section qdxintro Qdx Module Introduction

    The %Qdx module provides support for documentation generation with doxygen from %Qore sources.

    To use this module, use \c "%requires Qdx" in your code.

    All the public symbols in the module are defined in the Qdx namespace

    Classes:
    - @ref Qdx::DocumentTableHelper "DocumentTableHelper"
    - @ref Qdx::DocumentTableInputStreamLineIterator "DocumentTableInputStreamLineIterator"
    - @ref Qdx::QorePostProcessingInputStreamLineIterator "QorePostProcessingInputStreamLineIterator"
    - @ref Qdx::QorePostProcessingTexInputStreamLineIterator "QorePostProcessingTexInputStreamLineIterator"

    @section qdxrelnotes Release Notes

    @subsection qdx_1_0 Qdx v1.0
    - the initial version of the Qdx module
*/

#! the Qdx namespace contains all the objects in the Qdx module
public namespace Qdx {
    #! converts specially-formatted text in the input to HTML tables
    public class DocumentTableHelper {
        private:internal {
            bool css = False;
            bool inTable = False;
        }

        # no public members
        public {}

        #! accepts an input line and returns the formatted output line
        /** @param line the input line

            @return the formatted output line
         */
        string process(string line) {
            if (line =~ /@page/) {
                #printf("PAGE: css: %n %s", css, line);#exit(1);
                css = False;
            }
            #printf("XXX %s", line);

            if (line !~ /^(\s)*\|/) {
                if (inTable) {
                    inTable = False;
                    return "    </table>\n" + line;
                }
                return line;
            }

            string str;

            if (!inTable) {
                if (!css) {
                    str = "    @htmlonly <style><!-- td.qore { background-color: #5b9409; color: white; } --></style> @endhtmlonly\n";
                    css = True;
                }
                str += "    <table>\n";
            }

            inTable = True;

            str += "      <tr>\n";

            trim line;
            splice line, 0, 1;
            foreach *string cell in (split("|", line)) {
                trim cell;
                if (cell =~ /^!/)
                    str += sprintf("        <td class=\"qore\"><b>%s</b></td>\n", substr(cell, 1));
                else
                    str += sprintf("        <td>%s</td>\n", cell);
            }
            str += "      </tr>\n";
            return str;
        }
    }

    #! a line-based input stream iterator that converts specially-formatted input line text to HTML table output
    public class DocumentTableInputStreamLineIterator inherits Qore::InputStreamLineIterator, private:internal DocumentTableHelper {
        /** Creates the DocumentTableInputStreamLineIterator for iterating over the given @ref Qore::InputStream "InputStream"

            @param is the @ref Qore::InputStream "InputStream" to iterate over
            @param encoding character encoding of the data from input stream; if not ASCII-compatible, all data will be converted to UTF-8; if not present, the @ref default_encoding "default character encoding" is assumed
            @param eol the optional end of line character(s) to use to detect lines in the data; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n"
            @param do_trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the \a eol bytes

            @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the \a eol argument has a different @ref character_encoding "character encoding" from the data's and an error occurs during encoding conversion
         */
        constructor(Qore::InputStream is, *string encoding, *string eol, bool do_trim = True) : InputStreamLineIterator(is, encoding, eol, do_trim) {
        }

        #! Returns the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getLine()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getValue()
         */
        string getLine() {
            return getValue();
        }

        #! Returns the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getValue()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getLine()
         */
        string getValue() {
            return process(InputStreamLineIterator::getValue());
        }
    }

    #! a line-based input stream iterator for post-processing HTML and JS files created for Qore documentation
    public class QorePostProcessingInputStreamLineIterator inherits Qore::InputStreamLineIterator {
        /** Creates the object for iterating over the given @ref Qore::InputStream "InputStream"

            @param is the @ref Qore::InputStream "InputStream" to iterate over
            @param encoding character encoding of the data from input stream; if not ASCII-compatible, all data will be converted to UTF-8; if not present, the @ref default_encoding "default character encoding" is assumed
            @param eol the optional end of line character(s) to use to detect lines in the data; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n"
            @param do_trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the \a eol bytes

            @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the \a eol argument has a different @ref character_encoding "character encoding" from the data's and an error occurs during encoding conversion
         */
        constructor(Qore::InputStream is, *string encoding, *string eol, bool do_trim = False) : InputStreamLineIterator(is, encoding, eol, do_trim) {
        }

        /** Creates the object for iterating over the given @ref Qore::StreamReader "StreamReader"

            @param is the @ref Qore::StreamReader "StreamReader" to iterate over
            @param eol the optional end of line character(s) to use to detect lines in the data; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n"
            @param do_trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the \a eol bytes

            @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the \a eol argument has a different @ref character_encoding "character encoding" from the data's and an error occurs during encoding conversion
         */
        constructor(Qore::StreamReader sr, *string eol, bool do_trim = False) : InputStreamLineIterator(sr, eol, do_trim) {
        }

        #! Returns the processed version of the current line in the input data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getLine()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getValue()
         */
        string getLine() {
            return getValue();
        }

        #! Returns the processed version of the current line in the input data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getValue()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getLine()
         */
        string getValue() {
            string line = InputStreamLineIterator::getValue();

            line =~ s/__1_/[/g;
            line =~ s/__2_/]/g;
            line =~ s/__3_/*/g; #//;
            line =~ s/__4_/./g;
            line =~ s/__5_/-/g;
            line =~ s/__6_//g;
            line =~ s/__7_ /*/g; #//;
            line =~ s/__8_/$/g;

            # remove "inline" tags
            line =~ s/\[inline\]//g;
            line =~ s/, inline\]/]/g;
            line =~ s/\[inline, /[/g;

            line =~ s/"Qore::zzz8([a-z]+)zzz9"/"<$1>"/g;
            line =~ s/>([^<>]*)Qore::zzz8([a-z]+)zzz9([^<>]*)<\//>$1&lt;$2&gt;$3<\//g;
            line =~ s/>([^<>]*)zzz8([a-z]+)zzz9([^<>]*)<\//>$1&lt;$2&gt;$3<\//g;
            line =~ s/for Qore::zzz8([a-z]+)zzz9:/for Qore::&lt;$1&gt;:/g;
            line =~ s/'Qore::zzz8([a-z]+)zzz9'/'&lt;$1&gt;'/g;
            line =~ s/"zzz8([a-z]+)zzz9"/"<$1>"/g;
            line =~ s/'Qore::zzz8([a-z]+)zzz9::([^']+)\(([^\)]*)\)'/'Qore::&lt;$1&gt;::$2($3)'/g;
            line =~ s/'zzz8([a-z]+)zzz9'/'$1'/g;
            line =~ s/[Ss]truct /hashdecl /g;

            return line;
        }
    }

    #! a line-based input stream iterator for post-processing HTML and JS files created for Qore documentation
    public class QorePostProcessingTexInputStreamLineIterator inherits QorePostProcessingInputStreamLineIterator {
        /** Creates the object for iterating over the given @ref Qore::InputStream "InputStream"

            @param is the @ref Qore::InputStream "InputStream" to iterate over
            @param encoding character encoding of the data from input stream; if not ASCII-compatible, all data will be converted to UTF-8; if not present, the @ref default_encoding "default character encoding" is assumed
            @param eol the optional end of line character(s) to use to detect lines in the data; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n"
            @param do_trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the \a eol bytes

            @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the \a eol argument has a different @ref character_encoding "character encoding" from the data's and an error occurs during encoding conversion
         */
        constructor(Qore::InputStream is, *string encoding, *string eol, bool do_trim = False) : QorePostProcessingInputStreamLineIterator(is, encoding, eol, do_trim) {
        }

        /** Creates the object for iterating over the given @ref Qore::StreamReader "StreamReader"

            @param is the @ref Qore::StreamReader "StreamReader" to iterate over
            @param eol the optional end of line character(s) to use to detect lines in the data; if this string is not passed, then the end of line character(s) are detected automatically, and can be either \c "\n", \c "\r", or \c "\r\n"
            @param do_trim if @ref Qore::True "True" the string return values for the lines iterated will be trimmed of the \a eol bytes

            @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the \a eol argument has a different @ref character_encoding "character encoding" from the data's and an error occurs during encoding conversion
         */
        constructor(Qore::StreamReader sr, *string eol, bool do_trim = False) : QorePostProcessingInputStreamLineIterator(sr, eol, do_trim) {
        }

        #! Returns the processed version of the current line in the input data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getLine()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getValue()
         */
        string getLine() {
            return getValue();
        }

        #! Returns the processed version of the current line in the input data or throws an \c ITERATOR-ERROR exception if the iterator is invalid
        /** @par Example:
            @code
            map printf("+ %y\n", i.getValue()), i;
            @endcode

            @return the current line in the data or throws an \c ITERATOR-ERROR exception if the iterator is invalid

            @throw ITERATOR-ERROR the iterator is not pointing at a valid element
            @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object

            @see getLine()
         */
        string getValue() {
            string line = QorePostProcessingInputStreamLineIterator::getValue();

            line =~ s/\\_\\-\\_\\-1\\_\\-/[/g;
            line =~ s/\\_\\-\\_\\-2\\_\\-/]/g;
            line =~ s/\\_\\-\\_\\-4\\_\\-/./g;
            line =~ s/\\_\\-\\_\\-5\\_\\-/-/g;
            line =~ s/\\_\\-\\_\\-6\\_\\-/\$/g;
            line =~ s/\\_\\-\\_\\-7\\_\\-/*/g; #//;

            return line;
        }
    }
}
