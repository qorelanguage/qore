# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file HueRestClient.qm Qore user module for calling Philips Hue REST services

/*  HueRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module HueRestClient {
    version = "1.0";
    desc = "user module for calling Philips Hue REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("hue", HueRestConnection::ConnectionScheme);
    };
}

/** @mainpage HueRestClient Module

    @tableofcontents

    @section huerestclientintro HueRestClient Introduction

    The %HueRestClient module provides an API for calling Philips Hue REST API services.

    To use this module, use \c "%requires HueRestClient" in your code.

    All the public symbols in the module are defined in the HueRestClient namespace.

    The main classes are:
    - @ref HueRestClient::HueRestClient "HueRestClient":
      this class provides the REST client API for communuication with the Hue REST
      API; it also automates authentication and authorization to the target
    - @ref HueRestClient::HueRestConnection "HueRestConnection":
      provides a REST connection object to Philips Hue cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires HueRestClient
%requires ConnectionProvider

HueRestClient rest = get_connection("my-hue-connection");
hash<auto> ans = rest.get("/calendar/users/me/calendarList");
printf("%N\n", ans.body);
    @endcode

    @section Huerestclientrelnotes Release Notes

    @subsection Huerestclientv1_0 HueRestClient v1.0
    - the initial version of the %HueRestClient module
*/

#! the HueRestClient namespace contains all the objects in the HueRestClient module
public namespace HueRestClient {
#! this class provides the REST client API for communication with Hue servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.
*/
public class HueRestClient inherits RestClient::RestClient {
    public {
        #! Default Hue REST API URL
        const DefaultUrl = "rests://api.meethue.com/route/api";

        #! Default authorization request URL
        const DefaultAuthUrl = "https://api.meethue.com/v2/oauth2/authorize";

        #! Default OAuth2 grant type
        const DefaultGrantType = "authorization_code";

        #! Default token request URL
        const DefaultTokenUrl = "https://api.meethue.com/v2/oauth2/token";

        #! Default constructor options
        const DefaultOptions = {
            "url": DefaultUrl,
            "oauth2_auth_url": DefaultAuthUrl,
            "oauth2_grant_type": DefaultGrantType,
            "oauth2_token_url": DefaultTokenUrl,
        };

        #! Default Hue ping method
        const DefaultHuePingMethod= "GET";

        #! Default Hue ping headers
        const DefaultHuePingHeaders = {
            "Accept": MimeTypeJson,
        };
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
HueRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class; note
        that the URL is set by default if not provided (see @ref DefaultUrl)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect)
            : RestClient(HueRestClient::getOptions(opts), True) {
    }

    #! returns options for @ref HueRestClient::HueRestClient::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        return DefaultOptions + opts;
    }
}

#! Class for Hue REST connections; returns @ref HueRestClient objects
/** This class implements all options of @ref RestClient::RestClientConnection "RestClientConnection";  in addition,
    this class provides the following default values for the following options:
    - \c oauth2_auth_args: <tt>access_type: offline</tt>
    - \c oauth2_auth_url: \c https://accounts.hue.com/o/oauth2/v2/auth
    - \c oauth2_grant_type: \c authorization_code
    - \c oauth2_token_url: \c https://oauth2.hueapis.com/token

    @see @ref HueRestClient::HueRestClient::constructor() for more information on the above options
*/
public class HueRestConnection inherits RestClient::RestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "Philips Hue REST Connection",
            "short_desc": "A connection to the Philips Hue REST API",
            "desc": "A connection to the Philips Hue REST API",
            "cls": Class::forName("HueRestConnection"),
            "auto_url": True,
            "schemes": {
                "hue": True,
            },
            "base_scheme_map": {
                "https": "hue",
            },
            "options": RestConnection::ConnectionScheme.options + {
                "oauth2_auth_url": RestConnection::ConnectionScheme.options.oauth2_auth_url
                + <ConnectionOptionInfo>{
                    "default_value": HueRestClient::DefaultAuthUrl,
                },
                "oauth2_grant_type": RestConnection::ConnectionScheme.options.oauth2_grant_type
                + <ConnectionOptionInfo>{
                    "default_value": HueRestClient::DefaultGrantType,
                },
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url
                + <ConnectionOptionInfo>{
                    "default_value": HueRestClient::DefaultTokenUrl,
                },
            },
            "required_options": "token|oauth2_auth_url,oauth2_grant_type,oauth2_token_url,"
                "oauth2_client_id,oauth2_client_secret",
        };
    }

    #! creates the HueRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL (potentially with password info)
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url = HueRestClient::DefaultUrl,
            hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, options) {
        real_opts = {
            "url": real_url,
        } + urlh{"username", "password"} + opts;
    }

    #! returns \c "hue"
    string getType() {
        return "hue";
    }

%ifdef HaveHueDataProvider
    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the HueDataProvider and creates the data provider
        # object dynamically
        load_module("HueDataProvider");
        return create_object("HueDataProvider", get());
    }
%endif

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        children_can_support_apis = True;
    }

    #! returns a @ref HueRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref HueRestClient object
    */
    private HueRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new HueRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
