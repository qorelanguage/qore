# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file WebSocketUtil.qm WebSocket common client/server code

/*  WebSocketUtil.qm Copyright 2013 - 2020 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9.7

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# assume local var scope, do not use "$" for vars, members, and method calls
%new-style

module WebSocketUtil {
    version = "1.4.1";
    desc = "user module providing common client and server support for the WebSocket protocol";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage WebSocketUtil Module

    @tableofcontents

    @section websocketutilintro Introduction to the WebSocketUtil Module

    The %WebSocketUtil module provides common client and server support for <a href="http://tools.ietf.org/html/rfc6455">RFC-6455 based WebSocket protocol</a> implementations in %Qore.

    This module is used by the following modules:
    - <a href="../../WebSocketClient/html/index.html">WebSocketClient</a>: provides an event-driven client API for connecting to WebSocket servers
    - <a href="../../WebSocketHandler/html/index.html">WebSocketHandler</a>: provides an interface to the %Qore <a href="../../HttpServer/html/index.html">HttpServer</a> module for implementing server-side WebSocket services

    To use this module directly, use \c "%requires WebSocketClient" in your code, otherwise it's recommended to use one of the
    higher-level module listed above.

    The main functionality provided by this module:
    - @ref WebSocketUtil::ws_encode_message(): encodes messages for sending over a websocket connection
    - @ref WebSocketUtil::ws_read_message(): reads and decodes messages from a websocket connection
    - @ref closecodes
    - @ref opcodes

    @section websocketutil_relnotes WebSocketUtil Module Release History

    @subsection wsu_v141 v1.4.1
    - added support for continuation frames
      (<a href="https://github.com/qorelanguage/qore/issues/4073">issue 4073</a>)

    @subsection wsu_v14 v1.4
    - added the @ref WebSocketUtil::ws_get_response_key() function

    @subsection wsu_v13 v1.3
    - added timeout values to @ref Qore::Socket "Socket" calls (<a href="https://github.com/qorelanguage/qore/issues/1725">issue 1725</a>)

    @subsection wsu_v12 v1.2
    - fixed a bug parsing and generating the websocket close status code (<a href="https://github.com/qorelanguage/qore/issues/1216">issue 1216</a>)

    @subsection wsu_v11 v1.1
    - converted to @ref new-style "%new-style"

    @subsection wsu_v10 v1.0
    - the initial version of the WebSocketUtil module
*/

#! the WebSocketUtil namespace contains all the definitions in the WebSocketUtil module
public namespace WebSocketUtil {
    #! WebSocket message info
    public hashdecl WsMsgInfo {
        int op;
        bool masked;
        int close;
        bool fin;
        *data msg;
    }

    #! WebSocket GUID
    public const WS_GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";

    #! the final fragment in a message
    public const WS_FIN = (1 << 7);

    /** @defgroup opcodes WebSocket OpCodes
     */
    #@{
    #! continuation frame opcode
    public const WSOP_Continuation = 0x0;

    #! text frame opcode
    public const WSOP_Text = 0x1;

    #! binary frame opcode
    public const WSOP_Binary = 0x2;

    #! connection code opcode
    public const WSOP_Close = 0x8;

    #! ping opcode
    public const WSOP_Ping = 0x9;

    #! pong opcode
    public const WSOP_Pong = 0xa;

    #! maps from opcodes to text descriptions
    public const WSOPMap = {
        WSOP_Continuation: "CONTINUATION",
        WSOP_Text: "TEXT",
        WSOP_Binary: "BINARY",
        WSOP_Close: "CLOSE",
        WSOP_Ping: "PING",
        WSOP_Pong: "PONG",
    };
    #@}

    /** @defgroup closecodes WebSocket Close Codes
     */
    #@{
    #! "Normal Closure" code
    public const WSCC_NormalClosure = 1000;

    #! "Going Away" code
    public const WSCC_GoingAway = 1001;

    #! "Protocol Error" code
    public const WSCC_ProtocolError = 1002;

    #! "Unsupported Data" code
    public const WSCC_UnsupportedData = 1003;

    #! "No Status Rcvd" code
    public const WSCC_NoStatusRcvd = 1005;

    #! "Abnormal Closure" code
    public const WSCC_AbnormalClosure = 1006;

    #! "Invalid Frame Payload Data" code
    public const WSCC_InvalidData = 1007;

    #! "Policy Violation" code
    public const WSCC_PolicyViolation = 1008;

    #! "Message Too Big" code
    public const WSCC_MessageTooBig = 1009;

    #! "Mandatory Ext." code
    public const WSCC_MandatoryExt = 1010;

    #! "Internal Server Error" code
    public const WSCC_InternalServerError = 1011;

    #! "TLS Handshake" code
    public const WSCC_TlsHandshake = 1015;

    #! maps from close codes to text descriptions
    public const WSCCMap = {
        WSCC_NormalClosure: "Normal Closure",
        WSCC_GoingAway: "Going Away",
        WSCC_ProtocolError: "Protocol Error",
        WSCC_UnsupportedData: "Unsupported Data",
        WSCC_NoStatusRcvd: "No Status Rcvd",
        WSCC_AbnormalClosure: "Abnormal Closure",
        WSCC_InvalidData: "Invalid Frame Payload Data",
        WSCC_PolicyViolation: "Policy Violation",
        WSCC_MessageTooBig: "Message Too Big",
        WSCC_MandatoryExt: "Mandatory Ext.",
        WSCC_InternalServerError: "Internal Server Error",
        WSCC_TlsHandshake: "TLS Handshake",
    };
    #@}

    #! encodes a message for sending over a websocket socket
    public binary sub ws_encode_message(data msg, int op = -1, *bool masked, bool fin = True) {
        if (op == -1)
            op = msg.typeCode() == NT_STRING ? WSOP_Text : WSOP_Binary;

        *binary mask;
        if (masked) {
            do {
                mask = (rand() % 2147483647).encodeMsb();
            } while (mask == <00000000>);
        }

        #printf("ws_encode_message() d: %y op: %d/%y masked: %y fin: %y\n", msg, op, WSOPMap{op}, masked, fin);

        binary frame;
        if (fin) {
            frame += chr(WS_FIN | op);
        } else {
            frame += chr(op);
        }

        # encode frames with a message size < 126 directly in the second byte
        switch (msg.size()) {
            case < 126: {
                frame += chr(msg.size() | (masked ? 0x80 : 0));
                break;
            }
            case < 65536: {
                frame += chr(126 | (masked ? 0x80 : 0));
                frame += msg.size().encodeMsb(2);
                break;
            }
            default: {
                frame += chr(127 | (masked ? 0x80 : 0));
                frame += msg.size().encodeMsb(8);
            }
        }

        if (masked) {
            frame += mask;
            # issue #2566: must be able to handle zero-length messages (ex: PONG)
            if (msg.val()) {
                if (msg.typeCode() == NT_STRING)
                    msg = binary(msg);
                binary udata;
                for (int i = 0; i < msg.size(); ++i)
                    udata += chr((msg[i] ^ mask[i % 4]));
                msg = udata;
            }
        }

        if (msg.val())
            frame += msg;

        return frame;
    }

    #! read and decode a message from a socket
    /** @par Example:
        @code{.py}
hash<WsMsgInfo> h = ws_read_message(sock);
        @endcode

        @param sock the @ref Qore::Socket "Socket" object to receive the message
        @param to an optional read timeout

        @return a hash with the following keys:
        - \c op: the operation code (one of @ref opcodes)
        - \c masked a boolean flag indicating if the message was masked or not
        - \c msg: the message received; if a CLOSE opcode is received (see @ref WSOP_Close) then any close message is decoded and included here in text form
        - \c close: the close code (one of @ref closecodes); only included if \a op is @ref WSOP_Close
    */
    public hash<WsMsgInfo> sub ws_read_message(Socket sock, *timeout to) {
        int b0 = sock.recvu1(to);

        # get opcode
        int op = b0 & 0xf;
        softbool fin = b0 & WS_FIN;

        # get next byte
        int b1 = sock.recvu1(to);
        softbool masked = b1 & 0x80;
        b1 &= 0x7f;

        int data_len;
        if (b1 < 126)
            data_len = b1;
        else if (b1 == 126)
            data_len = sock.recvu2(to);
        else
            data_len = sock.recvi8(to);

        *binary mask;
        if (masked)
            mask = sock.recvBinary(4, to);

        *data data;
        if (data_len)
            data = sock.recvBinary(data_len, to);

        # unmask data if necessary
        if (mask) {
            # unmasked data
            binary udata;
            for (int i = 0; i < data.size(); ++i)
                udata += chr((data[i] ^ mask[i % 4]));
            data = udata;
        }

        #printf("DEBUG: op: %d (%s) data_len: %d mask: %y data: %y\n", op, WSOPMap{op}, data_len, mask ? mask.toHex() : NOTHING, data);

        hash<WsMsgInfo> h({
            "op": op,
            "masked": masked,
            "fin": fin,
        });
        if (h.op == WSOP_Close) {
            if (data) {
                # get an unsigned 2-byte integer in network byte order (MSB) for the close code
                h.close = get_word_16(data, 0);
                # remove the first 2 bytes extracted above
                splice data, 0, 2;
                *string txtmsg = data ? data.toString("utf8") : NOTHING;
                data = txtmsg;
            } else {
                # https://tools.ietf.org/html/rfc6455#section-7.1.5
                # If this Close control frame contains no status code, _The WebSocket Connection Close Code_ is considered to be 1005
                h.close = WSCC_NoStatusRcvd;
            }
        } else if (op == WSOP_Text)
            data = data.toString(sock.getEncoding());

        #printf("DEBUG: h: %y data: %y\n", h, data);
        h.msg = data;
        return h;
    }

    #! returns a string response key from the binary key and the WebSocket GUID value
    /** @param key the base64-encoded key received in the \c Sec-WebSocket-Key header

        @return the base64-encoded string value for the \c Sec-WebSocket-Accept header

        @since %WebSocketUtil 1.4
    */
    public string sub ws_get_response_key(string key) {
        return make_base64_string(SHA1_bin(key + WS_GUID));
    }
}
