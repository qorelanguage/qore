# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DiscordWebSocketClient.qm Qore user module for calling Discord WebSocket services

/*  DiscordWebSocketClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without websocketriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) WebSocketClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

%try-module json >= 1.8.2
%define NoJson
%endtry

module DiscordWebSocketClient {
    version = "1.0";
    desc = "User module for communicating with the Discord WebSocket API gateway";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("discordwss", DiscordWebSocketConnection::ConnectionScheme);
    };
}

/** @mainpage DiscordWebSocketClient Module

    @tableofcontents

    @section discordwebsocketclientintro DiscordWebSocketClient Introduction

    The %DiscordWebSocketClient module provides an API for communicating with the Discord WebSocket API gateway.

    To use this module, use \c "%requires DiscordWebSocketClient" in your code.

    All the public symbols in the module are defined in the DiscordWebSocketClient namespace.

    The main classes are:
    - @ref DiscordWebSocketClient::DiscordWebSocketClient "DiscordWebSocketClient":
      this class provides the WEBSOCKET client API for communuication with the Discord WEBSOCKET
      API; it also automates authentication and authorization to the target
    - @ref DiscordWebSocketClient::DiscordWebSocketConnection "DiscordWebSocketConnection":
      provides a WEBSOCKET connection object to Discord cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @section discordwebsocketclientrelnotes Release Notes

    @subsection discordwebsocketclientv1_0 DiscordWebSocketClient v1.0
    - the initial version of the %DiscordWebSocketClient module
*/

#! the DiscordWebSocketClient namespace contains all the objects in the DiscordWebSocketClient module
public namespace DiscordWebSocketClient {
/** @defgroup discord_intents Discord Intent Codes
*/
#/@{
#! Discord intent: guilds
public const DI_GUILDS  = 1 << 0;

#! Discord intent: members
public const DI_MEMBERS = 1 << 1;

#! Discord intent: moderation
public const DI_MODERATION = 1 << 2;

#! Discord intent: emojis and stickers
public const DI_EMOJIS_AND_STICKERS = 1 << 3;

#! Discord intent: integrations
public const DI_INTEGRATIONS = 1 << 4;

#! Discord intent: webhooks
public const DI_WEBHOOKS = 1 << 5;

#! Discord intent: invites
public const DI_INVITES = 1 << 6;

#! Discord intent: voice states
public const DI_VOICE_STATES = 1 << 7;

#! Discord intent: presences
public const DI_PRESENCES = 1 << 8;

#! Discord intent: guild (server) messages
public const DI_GUILD_MESSAGES = 1 << 9;

#! Discord intent: message reactions
public const DI_MESSAGE_REACTIONS = 1 << 10;

#! Discord intent: message typing
public const DI_MESSAGE_TYPING = 1 << 11;

#! Discord intent: DMs
public const DI_DIRECT_MESSAGES = 1 << 12;

#! Discord intent: direct message reactions
public const DI_DIRECT_MESSAGE_REACTIONS = 1 << 13;

#! Discord intent: direct message typing
public const DI_DIRECT_MESSAGE_TYPING = 1 << 14;

#! Discord intent: message content
public const DI_MESSAGE_CONTENT = 1 << 15;

#! Discord intent: message content
public const DI_GUILD_SCHEDULED_EVENTS = 1 << 16;

#! Discord intent: message content
public const DI_AUTO_MODERATION_CONFIGURATION = 1 << 20;

#! Discord intent:
public const DI_AUTO_MODERATION_EXECUTION = 1 << 21;
#/@}

/** @defgroup discord_close_codes Discord Close Event Codes
*/
#/@{
#! We're not sure what went wrong. Try reconnecting?
public const DCC_UNKNOWN_ERROR = 4000;

#! You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!
public const DCC_UNKNOWN_OPCODE = 4001;

#! You sent an invalid payload to Discord. Don't do that!
public const DCC_DECODE_ERROR = 4002;

#! You sent us a payload prior to identifying
public const DCC_NOT_AUTHENTICATED = 4003;

#! The account token sent with your identify payload is incorrect
public const DCC_AUTHENTICATION_FAILED = 4004;

#! You sent more than one identify payload. Don't do that!
public const DCC_ALREADY_AUTHENTICATED = 4005;

#! The sequence sent when resuming the session was invalid. Reconnect and start a new session
public const DCC_INVALID_SEQ = 4007;

#! Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this
public const DCC_RATE_LIMITED = 4008;

#! Your session timed out. Reconnect and start a new one
public const DCC_SESSION_TIMED_OUT = 4009;

#! You sent us an invalid shard when identifying
public const DCC_INVALID_SHARD = 4010;

#! The session would have handled too many guilds - you are required to shard your connection in order to connect
public const DCC_SHARDING_REQUIRED = 4011;

#! You sent an invalid version for the gateway.
public const DCC_INVALID_API = 4012;

#! You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value
public const DCC_INVALID_INTENT = 4013;

#! You sent a disallowed intent for a Gateway Intent
/** You may have tried to specify an intent that you have not enabled or are not approved for
*/
public const DCC_DISALLOWED_INTENT = 4014;
#/@}

#! Maps Discord close codes to a reconnect hint
public const CloseReconnectMap = {
    DCC_UNKNOWN_ERROR: True,
    DCC_UNKNOWN_OPCODE: True,
    DCC_DECODE_ERROR: True,
    DCC_NOT_AUTHENTICATED: True,
    DCC_AUTHENTICATION_FAILED: False,
    DCC_ALREADY_AUTHENTICATED: True,
    DCC_INVALID_SEQ: True,
    DCC_RATE_LIMITED: True,
    DCC_SESSION_TIMED_OUT: True,
    DCC_INVALID_SHARD: False,
    DCC_SHARDING_REQUIRED: False,
    DCC_INVALID_API: False,
    DCC_INVALID_INTENT: False,
    DCC_DISALLOWED_INTENT: False,
};

#! Maps Discord close codes to a short description string
public const CloseDescMap = {
    DCC_UNKNOWN_ERROR: "Unknown error",
    DCC_UNKNOWN_OPCODE: "Unknown opcode",
    DCC_DECODE_ERROR: "Decode error",
    DCC_NOT_AUTHENTICATED: "Not authenticated",
    DCC_AUTHENTICATION_FAILED: "Authentication failed",
    DCC_ALREADY_AUTHENTICATED: "Already authenticated",
    DCC_INVALID_SEQ: "Invalid seq",
    DCC_RATE_LIMITED: "Rate limited",
    DCC_SESSION_TIMED_OUT: "Session timed out",
    DCC_INVALID_SHARD: "Invalid shard",
    DCC_SHARDING_REQUIRED: "Sharing required",
    DCC_INVALID_API: "Invalid API version",
    DCC_INVALID_INTENT: "Invalid intent(s)",
    DCC_DISALLOWED_INTENT: "Disallowed intent(s)",
};

#! The Discord WebSocket client class
public class DiscordWebSocketClient inherits WebSocketClientWithSerialization {
    public {
        #! Default headers to use in the initial HTTP request after connecting
        const DefaultHeaders = {
            "Sec-WebSocket-Version": "13",
        };

        #! Default API version
        const DefaultApi = 10;

        #! Default option values
        const DefaultOptions = {
            "headers": DefaultHeaders,
            "data": "json",
            "api": DefaultApi,
        };

        #! Receive: An event was dispatched
        const DOP_DISPATCH = 0;

        #! Send/Receive: Fired periodically by the client to keep the connection alive
        const DOP_HEARTBEAT = 1;

        #! Send: Starts a new session during the initial handshake
        const DOP_IDENTIFY = 2;

        #! Send: Update the client's presence
        const DOP_PRESENCE_UPDATE = 3;

        #! Send: Used to join/leave or move between voice channels
        const DOP_VOICE_STATE_UPDATE = 4;

        #! Send: Resume a previous session that was disconnected
        const DOP_RESUME = 6;

        #! Receive: You should attempt to reconnect and resume immediately
        const DOP_RECONNECT = 7;

        #! Send: Request information about offline guild members in a large guild
        const DOP_REQUEST_GUILD_MEMBERS = 8;

        #! Receive: The session has been invalidated. You should reconnect and identify/resume accordingly
        const DOP_INVALID_SESSION = 9;

        #! Receive: Sent immediately after connecting, contains the heartbeat_interval to use
        const DOP_HELLO = 10;

        #! Receive: Sent in response to receiving a heartbeat to acknowledge that it has been received
        const DOP_HEARTBEAT_ACK = 11;

        #! Opcode to string map
        const OpMap = {
            DOP_DISPATCH: "Dispatch",
            DOP_HEARTBEAT: "Heartbeat",
            DOP_IDENTIFY: "Identify",
            DOP_PRESENCE_UPDATE: "Presence Update",
            DOP_VOICE_STATE_UPDATE: "Voice State Update",
            DOP_RESUME: "Resume",
            DOP_RECONNECT: "Reconnect",
            DOP_REQUEST_GUILD_MEMBERS: "Request Guild Members",
            DOP_INVALID_SESSION: "Invalid Session",
            DOP_HELLO: "Hello",
            DOP_HEARTBEAT_ACK: "Heartbeat ACK",
        };
    }

    private {
        #! Bot token
        string token;

        #! Intents for the identify message
        int intents;

        #! The heartbeat interval in ms
        int heartbeat_interval;

        #! The last received sequence number
        int last_sequence;

        #! Current session ID
        string session_id;

        #! Resume gateway URL
        string resume_gateway_url;

        #! Heartbeat thread counter
        Counter heartbeat_cnt();

        #! Heartbeat thread ID
        int hb_tid;

        #! Heartbeat mutex
        Mutex heartbeat_lock();

        #! Heartbeat condition
        Condition heartbeat_cond();

        #! Heartbeat thread stop flag
        bool hb_stop;

        #! API version
        int api = DefaultApi;
    }

    #! creates the object and optionally sets logging targets
    /** @par Example:
        @code{.py}
DiscordWebSocketClient ws();
        @endcode

        @param opts All options accepted by
        @ref WebSocketClient::WebSocketClient::constructor() "WebSocketClient::constructor()" with the following
        differences:
        - \c token: must be a bot token and is a required option
        - \c intents: optional integer intent for the identify message

        @throw WEBSOCKET-ERROR unknown scheme, missing 'url' key in option hash; invalid option value
    */
    constructor(*hash<auto> opts) : WebSocketClientWithSerialization(DiscordWebSocketClient::getOptions(opts)) {
    }

    #! Deletes the object
    destructor() {
        stopHeartbeatThread();
    }

    #! Returns performance statistics for the socket
    /** @par Example:
        @code{.py}
hash<auto> h = ws.getInfo();
        @endcode

        @return a hash with the following keys:
        - \c api: the API in use
        - \c cid: the current CID
        - \c heartbeat_tid: the heartbeat TID
        - \c session_id: the current session ID
        - \c last_sequence: the last sequence number received
        - \c resume_gateway_url: the gate URL for resumes
    */
    hash<auto> getInfo() {
        return {
            "api": api,
            "cid": cid,
            "heartbeat_tid": hb_tid,
            "session_id": session_id,
            "last_sequence": last_sequence,
            "resume_gateway_url": resume_gateway_url,
        };
    }

    #! Processes options for the DiscordWebSocketClient constructor
    static hash<auto> getOptions(*hash<auto> opts) {
        if (!opts.url) {
            opts.url = DiscordWebSocketConnection::discoverUrl();
        }
        return opts + DefaultOptions;
    }

    #! Handles WebSocket protocol messages
    private int handleMessage(hash<WsMsgInfo> h, reference<data> buf) {
        if (h.op == WSOP_Close) {
            if (!h.close) {
                logDebug("Server sent OpClose without code; closing immediately");
                return WSEDC_BREAK;
            }
            # check for Discord close codes
            bool reconnect = CloseReconnectMap{h.close} ?? True;
            logDebug("Server sent WSOP_Close code %d (%s): %y; reconnect: %y", h.close,
                WSCCMap{h.close} ?? CloseDescMap{h.close}, h.msg, reconnect);
            sendClose(h.close, h.msg);
            if (!reconnect) {
                reconnect = False;
            }
            return WSEDC_BREAK;
        }

        return WebSocketClientWithSerialization::handleMessage(h, \buf);
    }

    #! Handles deserialized event data
    private int handleEventData(auto msgdata) {
        if (msgdata.typeCode() != NT_HASH) {
            logError("Unexpected payload data type %y (value %y); expecting \"hash\"", msgdata.fullType(), msgdata);
            return WSEDC_CONTINUE;
        }
        *int op = msgdata.op;
        if (!exists op) {
            throw "DISCORD-ERROR", sprintf("missing opcode in payload: %y", msgdata);
        }
        if (msgdata.s) {
            last_sequence = msgdata.s;
        }
        logDebug("Received %y: (%s) %y", OpMap{op}, msgdata.t ?? "n/a", msgdata.d);
        int rc = WSEDC_CONTINUE;
        switch (op) {
            case DOP_HELLO:
                handleHello(msgdata.d);
                break;

            case DOP_DISPATCH:
                if (msgdata.t == "READY") {
                    handleReadyMessage(msgdata.d);
                } else {
                    rc = handleMessage(msgdata);
                }
                break;

            case DOP_HEARTBEAT_ACK:
                handleHeartbeatAck();
                break;

            case DOP_RECONNECT:
                rc = WSEDC_BREAK;
                break;

            case DOP_INVALID_SESSION:
                logError("Session has been invalidated (%y); starting reconnect", OpMap{op});
                rc = WSEDC_BREAK;
                break;

            default:
                throw "DISCORD-ERROR", sprintf("do not know how to handle opcode %d (%s)", op,
                    OpMap{op} ?? "unknown");
        }
        return rc;
    }

    #! Handle a READY message
    private handleReadyMessage(hash<auto> d) {
        session_id = d.session_id;
        resume_gateway_url = d.resume_gateway_url;
    }

    #! Handle a Heartbeat ACK
    private handleHeartbeatAck() {
    }

    #! Executes before a reconnect
    private reconnectPreamble() {
        stopHeartbeatThread();
        disconnectIntern();

        if (!resume_gateway_url) {
            throw "DISCORD-ERROR", "Reconnect message received, but no resume_gateway_url is present";
        }

        logInfo("Reconnect to %y", resume_gateway_url);
        url = setupUrl(resume_gateway_url);
        string http_url = url;
        http_url =~ s/^ws/http/;
        hc.setURL(http_url);
    }

    #! Connects to the server when reconnecting
    private doReconnect(reference<hash<auto>> info) {
        connectIntern(NOTHING, \info, True);
        if (session_id && last_sequence) {
            sendResume();
        } else {
            sendIdentify();
        }
    }

    #! Executes after a reconnect
    private reconnectPostamble() {
        # restart the heartbeat thread
        startHeartbeatThread();
    }

    #! Handle a message by raising a data event
    private int handleMessage(hash<auto> msg) {
        if (msg.d) {
            msg.d = convertData(msg.d);
        }
        return WebSocketClientWithSerialization::handleEventData(msg);
    }

    #! Handle a HELLO message
    private handleHello(hash<auto> d) {
        *int hbi = d.heartbeat_interval;
        if (!hbi) {
            throw "DISCORD-ERROR", sprintf("missing heartbeat interval in Hello msg: %y", d);
        }
        heartbeat_interval = hbi;
        startHeartbeatThread();

        sendIdentify();
    }

    #! Send an Identify message
    private sendIdentify() {
        # send Indentify message
        sendData({
            "op": DOP_IDENTIFY,
            "d": {
                "token": token,
                "properties": {
                    "os": PlatformOS == "Darwin" ? "macOS" : PlatformOS,
                    "browser": "Qore",
                    "device": "Qore",
                },
                "intents": intents,
            },
        });
    }

    #! Send a resume message
    private sendResume() {
        sendData({
            "op": DOP_RESUME,
            "d": {
                "token": token,
                "session_id": session_id,
                "seq": last_sequence,
            },
        });
    }

    private startHeartbeatThread() {
        heartbeat_cnt.inc();
        on_error {
            remove hb_tid;
            heartbeat_cnt.dec();
        }
%ifdef PO_NO_THREAD_CONTROL
        hb_tid = start_thread(\heartbeatThread());
%else
        hb_tid = start_thread ? start_thread(\heartbeatThread()) : background heartbeatThread();
%endif
    }

    private stopHeartbeatThread() {
        if (hb_tid == gettid()) {
            throw "DISCORD-ERROR", sprintf("cannot call this method from the heartbeat thread (TID %d)", hb_tid);
        }

        {
            AutoLock al(heartbeat_lock);
            if (!hb_tid) {
                return;
            }
            hb_stop = True;
            heartbeat_cond.signal();
        }

        heartbeat_cnt.waitForZero();
        remove hb_tid;
    }

    private heartbeatThread() {
        # in case we went out of scope while running
        on_exit if (self) {
            heartbeat_cnt.dec();
        }

        bool running;
        while (!hb_stop) {
            int sleep = heartbeat_interval;
            # calculate the first sleep with the heartbeat interval * jitter
            if (!running) {
                sleep = (float("0." + rand()) * heartbeat_interval).toInt();
                running = True;
            }

            {
                AutoLock al(heartbeat_lock);
                heartbeat_cond.wait(heartbeat_lock, sleep);
            }
            if (hb_stop) {
                break;
            }
            # send a heartbeat message
            sendData({
                "op": DOP_HEARTBEAT,
                "d": last_sequence,
            });
        }
    }

    #! Common constructor code
    private constructorInit(hash<auto> opts) {
        token = getString(opts, "token", True);
        remove opts.token;

        intents = getInt(opts, "intents", True, 0);
        remove opts.intents;

        api = getInt(opts, "api", True, DefaultApi);
        remove opts.api;

        opts.url = setupUrl(opts.url);

        WebSocketClientWithSerialization::constructorInit(opts);
    }

    #! setup URL
    *string setupUrl(*string url) {
        # add version and encoding to URL if there are no query arguments already
        if (url && url !~ /\?/) {
            if (url !~ /\/$/) {
                url += "/";
            }
            url += sprintf("?v=%d&encoding=json", api);
        }
        return url;
    }

    static auto convertData(auto v) {
        return v;
    }

    static auto convertData(string v) {
        return v =~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+/
            ? date(v)
            : v;
    }

    static list<auto> convertData(list<auto> l) {
        return map DiscordWebSocketClient::convertData($1), l;
    }

    static hash<auto> convertData(hash<auto> h) {
        return map {$1.key: DiscordWebSocketClient::convertData($1.value)}, h.pairIterator();
    }
}

#! class for Discord websocket connections; returns an object of class @ref DiscordWebSocketClient
/** Supports all the options of the @ref WebSocketClient::WebSocketConnection "WebSocketConnection" class; note that
    the \c token option is required by this class and is used as the gateway token after connecting and not as an HTTP
    authentication token
*/
public class DiscordWebSocketConnection inherits WebSocketClient::WebSocketConnectionObject {
    public {
        #! A string containing the real URL using a wss scheme
        string real_url;

        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "Discord WebSocket Connection",
            "short_desc": "A connection to Discord WebSocket server services",
            "desc": "A connection to Discord WebSocket server services",
            "cls": Class::forName("DiscordWebSocketConnection"),
            "auto_url": True,
            "schemes": {
                "discordwss": True,
            },
            "base_scheme_map": {
                "wss": "discordwss",
            },
            "options": WebSocketConnectionObject::ConnectionScheme.options,
        };

        #! Default Discord gateway URL
        const DefaultGatewayUrl = "wss://gateway.discord.gg/";

        #! Discord gateway discovery URL
        const GatewayDiscoveryUrl = "https://discord.com/api/gateway";
    }

    #! creates the DiscordWebSocketConnection connection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL; if not provided, then the URL will be discovered automatically
        @param attributes various attributes. See below
        @param options connection options

        See @ref AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, *string url, hash<auto> attributes = {}, hash<auto> options = {})
            : WebSocketConnectionObject(name, description, url, attributes, options) {
        setRealUrl(url);
    }

    #! creates the DiscordWebSocketConnection connection object
    /** @param config with the following keys:
        - name (required string): the connection name
        - display_name (optional string): the display name
        - short_desc (optional string): a short description in plain text
        - desc (optional string): a long description with markdown formatting
        - url (required string): the connection URL
        - opts (optional hash): connection options
        - logger (optional LoggerInterface object): logger for the connection
        @param attr optional connection attributes
        - monitor (optional bool): should the connection be monitored? Default: True
        - enabled (optional bool): is the connection enabled? Default: True
        - locked (optional bool): is the connection locked? Default: False
        - debug_data (optional bool): debug data? Default: False
        - tags (optional hash): tags for the connection; no default value

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option or attribute
    */
    constructor(hash<auto> config, *hash<auto> attr) : WebSocketConnectionObject(config, attr) {
    }

    #! returns \c "discordwss"
    string getType() {
        return "discordwss";
    }

    #! returns a @ref DiscordWebSocketClient object
    /** @param connect if @ref True "True", then @ref WebSocketClient::connect() is called
        @param rtopts runtime options

        @return a @ref DiscordWebSocketClient object
    */
    private DiscordWebSocketClient getImpl(bool connect = True, *hash<auto> rtopts) {
        # to avoid type issues with rtopts
        if (rtopts) {
            rtopts = {} + rtopts;
        }
        # rename "dbglog" to "debuglog" for WebSocketClient object
        if (rtopts.dbglog) {
            rtopts.debuglog = remove rtopts.dbglog;
        }
        DiscordWebSocketClient ws({"url": real_url} + rtopts{"log", "errlog", "debuglog"} + opts);
        if (connect) {
            ws.connect();
        }
        return ws;
    }

    #! Called by the constructor to set the real URL
    /** @path the new URL

        sets the real WS URL for WebSocket-based connections
    */
    private setRealUrl(*string url) {
        if (!url) {
            url = discoverUrl();
        } else {
            string scheme = (url =~ x/^([^:]+)/)[0];
            real_url = regex_subst(url, "^" + scheme, "wss");
        }
    }

    #! Discover the Discord gateway URL
    static string discoverUrl() {
%ifndef NoJson
        # lookup gateway address
        return parse_json((new HTTPClient({
            "url": GatewayDiscoveryUrl,
            "headers": {
                "Accept": MimeTypeJson,
            },
        })).get("")).url;
%else
        return DefaultGatewayUrl;
%endif
    }
}
}

