# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file CsvUtil.qm Qore user module for working with CSV files

/*  CsvUtil.qm Copyright 2012 - 2020 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9.11

%requires Util

%requires(reexport) DataProvider

# assume local var scope, do not use "$" for vars, members, and method calls
%new-style
%strict-args
%require-types
%enable-all-warnings

module CsvUtil {
    version = "1.7.2";
    desc = "user module for working with CSV files";
    author = "Petr Vanek <petr@yarpen.cz>, David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
    init = sub () {
        # register the data provider factories
        DataProvider::registerFactory(new CsvReadDataProviderFactory());
        DataProvider::registerFactory(new CsvWriteDataProviderFactory());
    };
}

/* see release notes below for version history
*/

/** @mainpage CsvUtil Module

    @tableofcontents

    @section csvutilintro Introduction to the CsvUtil Module

    The %CsvUtil module provides functionality for parsing CSV-like files.

    To use this module, use \c "%requires CsvUtil" in your code.

    All the public symbols in the module are defined in the CsvUtil namespace

    Currently the module provides the following classes:
    - @ref CsvUtil::AbstractCsvIterator "AbstractCsvIterator": base abstract iterator class for iterating line-based CSV data
    - @ref CsvUtil::AbstractCsvWriter "AbstractCsvWriter": a base class for new CSV writer implementations
    - @ref CsvUtil::CsvIterator "CsvIterator": iterator class allowing for generic CSV input data to be processed line by line on a record basis
    - @ref CsvUtil::CsvReadDataProvider "CsvReadDataProvider": a data provider for reading and searching CSV files
    - @ref CsvUtil::CsvReadDataProviderFactory "CsvReadDataProviderFactory": a data provider factory for reading and searching CSV files
    - @ref CsvUtil::CsvWriter "CsvWriter": generic stream-based CSV writer

    Furthermore, the following specialized classes are implemented based on the above and are provided for convenience and backwards-compatibility:
    - @ref CsvUtil::CsvDataIterator "CsvDataIterator": iterator class allowing for CSV string data to be processed line by line on a record basis
    - @ref CsvUtil::CsvFileIterator "CsvFileIterator": iterator class allowing for CSV files to be processed line by line on a record basis
    - @ref CsvUtil::CsvFileWriter "CsvFileWriter": CSV file writer
    - @ref CsvUtil::CsvStringWriter "CsvStringWriter": CSV in-memory writer

    Note that the @ref CsvUtil::CsvIterator "CsvIterator" class can be used to parse arbitrary text data; the field separator character can be specified in the @ref CsvUtil::CsvIterator::constructor() "constructor", as well as the quote character and end of line sequence.  See the @ref CsvUtil::CsvIterator::constructor() "constructor documentation" for more information.

    <b>Examples:</b>
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires CsvUtil

FileInputStream input("example-file.csv");
CsvIterator i(input);
FileOutputStream output("example-file-copy.csv");
CsvWriter writer(output, ("headers": ("cc", "serno", "desc", "received")));

while (i.next()) {
    printf("%d: %y\n", i.index(), i.getValue());
    writer.writeLine(i.getValue());
}
    @endcode

    If \c "example-file.csv" is:
    @verbatim
UK,1234567890,"Sony, Xperia S",31052012
UK,1234567891,"Sony, Xperia S",31052012
UK,1234567892,"Sony, Xperia S",31052012
UK,1234567893,"Sony, Xperia S",31052012
    @endverbatim

    The data is read verbatim, each value is returned as a string, header names are generated numerically; the output is:
    @verbatim
1: {0: "UK", 1: "1234567890", 2: "Sony, Xperia S", 3: "31052012"}
2: {0: "UK", 1: "1234567891", 2: "Sony, Xperia S", 3: "31052012"}
3: {0: "UK", 1: "1234567892", 2: "Sony, Xperia S", 3: "31052012"}
4: {0: "UK", 1: "1234567893", 2: "Sony, Xperia S", 3: "31052012"}
    @endverbatim

    Also the \c "example-file-copy.csv" will contain data from the original file formatted as CSV.

    @anchor complex_example
    If header names are provided and field types are specified, the output looks different:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires CsvUtil

FileInputStream input("example-file.csv");
CsvIterator i(input, NOTHING, ("headers": ("cc", "serno", "desc", "received"), "fields": ("serno": "int", "received": ("type": "date", "format": "DDMMYYYY"))));
while (i.next())
    printf("%d: %y\n", i.index(), i.getValue());
    @endcode

    Now the hash keys in each record returned are those given in the @ref CsvUtil::CsvFileIterator::constructor() "constructor", and the fields \c "serno" and \c "received" are given other data types; this produces:
    @verbatim
1: {cc: "UK", serno: 1234567890, desc: "Sony, Xperia S", received: 2012-05-31 00:00:00 Thu +02:00 (CEST)}
2: {cc: "UK", serno: 1234567891, desc: "Sony, Xperia S", received: 2012-05-31 00:00:00 Thu +02:00 (CEST)}
3: {cc: "UK", serno: 1234567892, desc: "Sony, Xperia S", received: 2012-05-31 00:00:00 Thu +02:00 (CEST)}
4: {cc: "UK", serno: 1234567893, desc: "Sony, Xperia S", received: 2012-05-31 00:00:00 Thu +02:00 (CEST)}
    @endverbatim

    Use the \c "header_lines" and \c "header_names" @ref abstractcsviterator_options "options" to automatically read the header names from the file if present.  Use the \c "fields" @ref abstractcsviterator_options "option" to describe the fields and perform transformations on the data read.  For more information, see the @ref CsvUtil::CsvFileIterator "CsvFileIterator" class.

    @section csvutil_multitype Multi-type support

    The %CsvUtil module supports multi-type records, meaning that different input lines may have different structures, and input record type
    resolution is performed at run-time using predefined rules.
    %CsvUtil classes have two constructors, a backwards-compatible constructor variant, which accepts field definition in options and supports only a single record type, and a new constructor avariant, which ccepts field specifications and options passed as separate parameters.

    When used with multi-type definitions, the @ref CsvUtil::AbstractCsvIterator::getValue() method returns
    records in an extended form.  In this case, the return value of @ref CsvUtil::AbstractCsvIterator::getValue()
    is a hash with the following keys:
    - \c "type": the resolved record type name
    - \c "record": a hash of record values

    As this is not backwards compatible, this mode is enabled using the \c "extended_record" option.

    If no record type resolution rules or logic is defined, then record types are resolved automatically based on their
    unique number of fields.  If the number of fields is not unique (i.e. two or more records have the same number of
    fields), then a rule must exist to resolve the record type.

    Typically the value of a particular field determines the record type, however even multiple fields could be used.  Record type detection configuration is supplied by the \c "value" (field value equality test) or \c "regex" (regular expression test) keys in the
    @ref abstractcsviterator_option_field_hash "field specification hash" for the record in question.  If multiple fields in a record
    definintion have \c "value" or \c "regex" keys, then all fields must match the input data in order for the input
    line to match the record.

    The above record type resolution logic is executed in
    @ref CsvUtil::AbstractCsvIterator::identifyTypeImpl() "AbstractCsvIterator::identifyTypeImpl()",
    which executes any \c "regex" or \c "value" tests on the input line in the order of the field definitions in the
    @ref abstractcsviterator_option_field_hash "record description hash".

    Record type resolution is performed as follow:
    - \c "value": Matches the full value of the field; if an integer \c "value" value is used, then integer comparisons are done, otherwise string comparisons are performed.
    - \c "regex": Matches the full value of the field with regular expression.

    When there are no record-matching keys in the field hashes for any record and the input record field number are
    not unique, then
    @ref CsvUtil::AbstractCsvIterator::identifyTypeImpl() "AbstractCsvIterator::identifyTypeImpl()"
    must be overridden in a subclass to provide custom record matching logic.

    @note
    - It is an error to have both \c "regex" and \c "value" keys in a @ref abstractcsviterator_option_field_hash "field specification hash"
    - If multiple fields have configuration for input line matching (i.e. \c "regex" and \c "value" keys), then all
      fields with this configuration must match for the record to be matched
    - since version 1.5.

    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires CsvUtil

const Spec = {
    "header": {
        "type": {"type": "int", "value": 1},
        "invoice_no": "string",
        "date": {"type": "date", "format": "YYYYMMDD"},
    },
    "item": {
        "type": {"type": "int", "value": 2},
        "item_no": "string",
        "item": "string",
        "pcs": "int",
        "price": "number",
    },
    "footer": {
        "type": {"type": "int", "value": 3},
        "total": "number",
    },
};

const Opts = {};

FileInputStream input("example-multi-file.csv");
CsvIterator i(input, NOTHING, Spec, {"extended_record": True} + Opts);

FileOutputStream output("example-multi-file-copy.csv");
CsvWriter writer(output, Spec, {"write-headers": False, "optimal-quotes": True, "quote_escape": "\"") + Opts);
while (i.next()) {
    printf("%d: %y\n", i.index(), i.getValue());
    writer.writeLine(i.getValue());
}
    @endcode

    If \c "example-multi-file.csv" is:
    @verbatim
1,2016-01,20160401
2,123,"Sony, Xperia S",1,100
2,124,"Nokia, Lumia",2,150
3,250
    @endverbatim

    The data is read verbatim, each value is returned as a string, header names are generated numerically; the output is:
    @verbatim
1: {type: "header", record: {type: 1, invoice_no: "2016-01", date: 2016-04-01 00:00:00.000000 Fri +02:00 (CEST)}}
2: {type: "item", record: {type: 2, item_no: "123", item: "Sony, Xperia S", pcs: 1, price: 100}}
3: {type: "item", record: {type: 2, item_no: "124", item: "Nokia, Lumia", pcs: 2, price: 150}}
4: {type: "footer", record: {type: 3, total: 250}}
    @endverbatim

    Also the \c "example-multi-file-copy.csv" will contain data from the original file formatted as CSV.

    @section csvutil_relnotes Release Notes

    @subsection csvutil_v1_7_2 Version 1.7.2
    - implemented support for the missing \c bool and <tt>*bool</tt> types
      (<a href="https://github.com/qorelanguage/qore/issues/4118">issue 4118</a>)

    @subsection csvutil_v1_7_1 Version 1.7.1
    - fixed a bug where CSV iteration would fail if a quoted field had a line break in it
      (<a href="https://github.com/qorelanguage/qore/issues/4079">issue 4079</a>)

    @subsection csvutil_v1_7 Version 1.7
    - added data provider API support
      (<a href="https://github.com/qorelanguage/qore/issues/3545">issue 3545</a>)

    @subsection csvutil_v1_6_2 Version 1.6.2
    - implemented the \c number_format option to allow numbers with alternative decimal separators to be parsed
      and generated (<a href="https://github.com/qorelanguage/qore/issues/2806">issue 2806</a>)

    @subsection csvutil_v1_6_1 Version 1.6.1
    - implemented the @ref CsvUtil::csvutil_set_global_compat_force_empty_string() function and the
    \c compat_force_empty_string CSV parsing option to force "*string" fields with no
    value to return an empty string when parsing rather than @ref nothing for backwards compatibility
    with very early versions of CsvUtil (<a href="https://github.com/qorelanguage/qore/issues/2476">issue 2476</a>)

    @subsection csvutil_v1_6 Version 1.6
    - added support for streams; the following stream-based classes have been added:
      - @ref CsvUtil::CsvIterator "CsvIterator": provides a more generic interface than @ref CsvUtil::CsvDataIterator "CsvDataIterator" and @ref CsvUtil::CsvFileIterator "CsvFileIterator"
      - @ref CsvUtil::CsvWriter "CsvWriter": provides a more generic interface than @ref CsvUtil::CsvStringWriter "CsvStringWriter" and @ref CsvUtil::CsvFileWriter "CsvFileWriter"
    - fixed a bug in an error message validating input data (<a href="https://github.com/qorelanguage/qore/issues/1062">issue 1062</a>)
    - improved \a fields option documentation and added an exception when detected headers do not match the \a fields option (<a href="https://github.com/qorelanguage/qore/issues/2179">issue 2179</a>)

    @subsection csvutil_v1_5_1 Version 1.5.1
    - fixed a bug in @ref CsvUtil::AbstractCsvIterator::identifyTypeImpl() "AbstractCsvIterator::identifyTypeImpl()" generating an error message (<a href="https://github.com/qorelanguage/qore/issues/1355">issue 1355</a>)

    @subsection csvutil_v1_5 Version 1.5
    - fixed a bug handling the global option \c "eol"
    - converted to new-style
    - if "headers" are not given in the @ref CsvUtil::AbstractCsvWriter::constructor() but "fields" are, then set the headers from the field descriptions automatically
    - added write() methods returning the generated strings to the @ref CsvUtil::CsvStringWriter class for API compatibility with the corresponding FixedLengthDataWriter methods
    - implemented support for @ref Qore::SQL::SQLStatement "SQLStatement" as an iterator source for @ref CsvUtil::AbstractCsvWriter::write()
    - implemented the \c "datamap" and \c "info_log" options for CSV generation
    - implemented options with underscores to replace options with dashes:
      - @ref CsvUtil::AbstractCsvWriter
        - \c "date-format" is now \c "date_format"
        - \c "optimal-quotes" is now \c "optimal_quotes"
        - \c "verify-columns" is now \c "verify_columns"
        - \c "write-headers" is now \c "write_headers"
      - @ref CsvUtil::AbstractCsvIterator
        - \c "ignore-empty" is now \c "ignore_empty"
        - \c "ignore-whitespace" is now \c "ignore_whitespace"
        - \c "header-names" is now \c "header_names"
        - \c "header-lines" is now \c "header_lines"
        - \c "verify-columns" is now \c "verify_columns"
    - implemented multi-type line support
    - two constructors for backward CsvUtil compatability and similarity with FixedLengthUtil API
    - implemented new options \c "header_reorder"; @ref CsvUtil::AbstractCsvIterator \c "date_format",\c "extended_record"
    - implemented options for field specification: \c "index", \c "default", \c "header", \c "value", \c "regex"
    - fixed a UTC bug for default date 1970-01-01Z

    @subsection csvutil_v1_4 Version 1.4
    - fixed the \c "format" field option when used with \c "*date" field types
    - implemented the \c "tolwr" parser option
    - changed the default field type when parsing and generating CSV files from \c "string" to \c "*string"

    @subsection csvutil_v1_3 Version 1.3
    - added the \c "write-headers" option to @ref CsvUtil::AbstractCsvWriter and subclasses to enable headers to be suppressed
    - added the \c "optimal-quotes" option to @ref CsvUtil::AbstractCsvWriter and subclasses to enable more efficient csv output (now the default output option); to revert back to the previous behavior (where all fields are quoted regardless of data type or content), set to @ref False "False" in the constructor

    @subsection csvutil_v1_2 Version 1.2
    - fixed @ref CsvUtil::CsvDataIterator::next() when header_lines > 0 and working with empty input data
    - implemented support for the \c "*int", \c "*float", \c "*number", and \c "*date" types
    - implemented support for allowing subclasses of @ref CsvUtil::CsvFileIterator to implement support for other custom types
    - fixed \c "date" type handling with empty input; now returns 1970-01-01Z (use "*date" to map empty input to NOTHING)
    - added the @ref CsvUtil::CsvStringWriter, @ref CsvUtil::AbstractCsvWriter, and @ref CsvUtil::CsvFileWriter classes
    - if "headers" are not given in the @ref CsvUtil::CsvFileIterator::constructor() but "fields" are, then set the headers from the field descriptions automatically

    @subsection csvutil_v1_1 Version 1.1
    - bug fixes to header and fields option processing
    - fixed @ref CsvUtil::CsvFileIterator::index() to return the line index
    - added @ref CsvUtil::CsvFileIterator::lineNumber() to return the current line number in the file

    @subsection csvutil_v1_0 Version 1.0
    - initial version of module
*/

#! the CsvUtil namespace contains all the objects in the CsvUtil module
public namespace CsvUtil {
    #! Unix end of line character sequence (for new OS X too)
    public const EOL_UNIX = "\n";
    #! MS DOS/Windows end of line character sequence
    public const EOL_WIN = "\r\n";
    #! Old (pre-OSX) Macintosh end of line character sequence
    public const EOL_MACINTOSH = "\r";

    # helper list of end of line values
    const EOLS = (EOL_UNIX, EOL_WIN, EOL_MACINTOSH, );

    #! Record type when non matching any type
    public const CSV_TYPE_UNKNOWN = "<unknown>";
    #! Record type when multi-type is disabled
    public const CSV_TYPE_SINGLE = "<single>";

    #! global option to force "*string" fields with no value to return an empty string when parsing rather than @ref nothing for backwards compatibility with very early versions of CsvUtil
    our bool global_compat_force_empty_string;

    #! sets the \c global_compat_force_empty_string variable to force "*string" fields with no value to return an empty string when parsing rather than @ref nothing for backwards compatibility with very early versions of CsvUtil
    public sub csvutil_set_global_compat_force_empty_string(softbool val) {
        global_compat_force_empty_string = val;
    }
} # CsvUtil namespace
