# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file FixedLengthUtil.qm Qore user module for working with files with fixed lines length

/*  FixedLengthUtil.qm Copyright 2015 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 2.0

%requires Util
%requires(reexport) DataProvider
%requires(reexport) FileLocationHandler

%require-types
%enable-all-warnings
%new-style
%strict-args

module FixedLengthUtil {
    version = "1.6";
    desc    = "user module for working with files with fixed length lines";
    author  = "Jiri Vaclavik <jiri.vaclavik@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
    init = sub () {
        # register the data provider factories
        DataProvider::registerFactory(new FixedLengthReadDataProviderFactory());
        DataProvider::registerFactory(new FixedLengthWriteDataProviderFactory());

        # register the data provider application
        DataProviderActionCatalog::registerApp(<DataProviderAppInfo>{
            "name": FixedLengthUtil::AppName,
            "display_name": "Fixed-Length Files",
            "short_desc": "Read and write fixed-length file data",
            "desc": "Read and write fixed-length file data",
            "logo": FixedLengthWhiteLogo,
            "logo_file_name": "generic-fixedlength-logo.svg",
            "logo_mime_type": MimeTypeSvg,
        });

        # register all supported actions
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": FixedLengthUtil::AppName,
            "path": "/",
            "action": "read",
            "subtype": "fixedlengthread",
            "display_name": "Read Fixed-Length Data",
            "short_desc": "Read fixed-length file data from the local filesystem",
            "desc": "Read fixed-length file data from the local filesystem",
            "action_code": DPAT_FIND,
            "cls": "FixedLengthUtil::FixedLengthReadDataProvider",
            "convenience_options": DataProviderActionCatalog::getActionOptionFromFields(
                FixedLengthReadDataProvider::ConstructorOptions{"path", "spec"}, {
                    "preselected": True,
                    "required": True,
                    "loc": "constructor",
                }
            ),
            "advanced_options": DataProviderActionCatalog::getActionOptionFromFields(
                FixedLengthReadDataProvider::ConstructorOptions - ("path", "spec"), {
                    "loc": "constructor",
                }
            ),
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": FixedLengthUtil::AppName,
            "path": "/",
            "action": "write",
            "subtype": "fixedlengthwrite",
            "display_name": "Write Fixed-Length Data",
            "short_desc": "Write fixed-length file data to the local filesystem",
            "desc": "Write fixed-length file data to the local filesystem",
            "action_code": DPAT_CREATE,
            "cls": "FixedLengthUtil::FixedLengthWriteDataProvider",
            "convenience_options": DataProviderActionCatalog::getActionOptionFromFields(
                FixedLengthWriteDataProvider::ConstructorOptions{"path", "spec"}, {
                    "preselected": True,
                    "required": True,
                    "loc": "constructor",
                }
            ),
            "advanced_options": DataProviderActionCatalog::getActionOptionFromFields(
                FixedLengthWriteDataProvider::ConstructorOptions - ("path", "spec"), {
                    "loc": "constructor",
                }
            ),
        });
    };
}

/* see release notes below for version history
*/

/** @mainpage FixedLengthUtil Module

    @tableofcontents

    @section fixedlengthutilintro Introduction to the FixedLengthUtil Module

    The %FixedLengthUtil module provides functionality for parsing files with fixed length lines. This means that we have at least one line type and each line type is described as several data items with fixed length.

    To use this module, use \c "%requires FixedLengthUtil" in your code.

    All the public symbols in the module are defined in the FixedLengthUtil namespace.

    Currently the module provides the following classes:
    - @ref FixedLengthUtil::FixedLengthAbstractIterator "FixedLengthAbstractIterator": Iterator class allowing for fixed-length line data to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthAbstractWriter "FixedLengthAbstractWriter": Fixed length line writer
    - @ref FixedLengthUtil::FixedLengthIterator "FixedLengthIterator": Iterator class allowing for generic fixed-length line input data to be processed line by line on a record basis

    Furthermore, the following specialized classes are implemented based on the above and are provided for convenience and backwards-compatibility:
    - @ref FixedLengthUtil::FixedLengthDataIterator "FixedLengthDataIterator": Iterator class allowing for fixed-length line strings to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthDataWriter "FixedLengthDataWriter": Fixed length line writer into a variable
    - @ref FixedLengthUtil::FixedLengthFileIterator "FixedLengthFileIterator": Iterator class allowing for fixed-length line file to be processed line by line on a record basis
    - @ref FixedLengthUtil::FixedLengthFileWriter "FixedLengthFileWriter": Fixed length line writer into a file

    @section fixedlengthglobals Global Options

    Valid options are:
    - \c "date_format": the default date format for \c "date" fields (see @ref date_formatting "date formatting" for the value in this case)
    - \c "encoding": the output encoding for strings parsed or returned
    - \c "eol": the end of line characters for parsing or generation
    - \c "file_flags": additional writer @ref file_open_constants; @ref Qore::O_WRONLY | @ref Qore::O_CREAT are used by default. Use eg. @ref Qore::O_EXCL to ensure not to overwrite the target or @ref Qore::O_TRUNC to replace any existing file
    - \c "ignore_empty": if @ref True "True" then ignore empty lines
    - \c "number_format": the default number format for \c "float" or \c "number" fields (see @ref Qore::parse_number() and @ref Qore::parse_float() for the value in these cases)
    - \c "timezone": a string giving a time zone region name or an integer offset in seconds east of UTC
    - \c "truncate": The flag controls whether to truncate an output field value if its bigger than its specified \a length. Default is \c "False".
    - \c "tab2space": Controls whether to replace tabs with spaces and its value determines how many spaces to output in place of one tab character.

    @section fixedlengthspec Specification Hash

    Fixed length specification hash is in the form of a hash, where each hash key is the name of a record, and each value
    is a @ref fixedlengthspecrecordhash "record description hash" describing the record; see the following example:
    @code{.py}
# the following spec is suitable for input and output
const Specs = (
    "header": (
        "flow_type": ("length": 3, "type": "string", "value": "001"),
        "record_type": ("length": 3, "type": "int", "padding_char": "0"),
        "number_of_records": ("length": 8, "type": "int", "padding_char": "0"),
    ),
    "line": (
        "flow_type": ("length": 3, "type": "string"),
        "record_type": ("length": 3, "type": "int", "padding_char": "0"),
        "processing_id": ("length": 10, "type": "int", "padding_char": "0"),
        "processing_name": ("length": 10, "type": "string"),
        "po_number": ("length": 10, "type": "int", "padding_char": "0"),
    ),
    "trailer": (
        "flow_type": ("length": 3, "type": "string", "value": "003"),
        "record_type": ("length": 3, "type": "int", "padding_char": "0"),
        "number_of_records": ("length": 8, "type": "int", "padding_char": "0"),
    ),
);
    @endcode

    In the example above, \c "header", \c "line", and \c "trailer" are record names, and the values of each key
    are @ref fixedlengthspecrecordhash "record description hashes".

    @subsection fixedlengthspecrecordhash Record Description Hash

    Each record will have a number of fields described in the record description hash.  The record description hash keys
    represent the names of the fields, and the values are @ref fixedlengthspecrow "field specification hashes".

    In the \c "header" record in the example above, the fields are \c "flow_type", \c "record_type",
    and \c "number_of_records", and the values of each of those keys are
    @ref fixedlengthspecrow "field specification hashes" for the given fields. As the \c "header" and \c "trailer" have
    equal line length, extra configuration is required to @ref fixedlengthrecordtyperesolution "resolve the record type";
    in the example above this is configured using the \c "value" key of the
    @ref fixedlengthspecrow "field specification hashes" for the \c "flow_type" records.

    @subsection fixedlengthspecrow Field Specification Hash

    The field specification hash has the following format:

    |!Key|!Type|!Description
    | \c length|integer|the size of the field in bytes
    | \c type|string|the type of data bound to the field @ref fixedlengthspectypes
    | \c format|string|a date mask if the \a type of the field is \c "date"; see @ref date_formatting "date formatting" for more information
    | \c timezone|string|override global timezone for current "date" field
    | \c padding|string|set padding of the field "left" (default) or "right"; used only in writers; if not given then the default padding depends on the field's \a type: \c "int" fields get left padding (right justification) and all others get right padding (left justification)
    | \c padding_char|string|a string with size 1 to use for \c padding. Default \c " " (space). Used only in writers
    | \c value|string|the value to use to compare to input data when determining the record type; if \c "value" is defined for a field, then \c "regex" cannot be defined
    | \c regex|string|the regular expression to use to apply to input data lines when determining the record type
    | \c default|string|In writer the value is default output value when value is not specified in record data.
    | \c truncate|boolean|The flag controls whether to truncate output field value if its bigger than specified \a length. Default is \c "False".
    | \c tab2space|integer|Controls whether to replace tabs with spaces and its value determines how many spaces to output in place of one tab character.

    @subsection fixedlengthspectypes Field Data Types

    The following values can be used as a @ref fixedlengthspecrow "field" type:
    - \c "date"
    - \c "float"
    - \c "int"
    - \c "number"
    - \c "string"

    @section fixedlengthrecordtyperesolution Record Type Resolution

    If no record type resolution rules or logic is defined, then record types are resolved automatically based on their
    unique line lengths.  If the record line lengths are not unique (i.e. two or more records have the same number of
    characters), then a rule must exist to resolve the record type.

    Typically the value of the first field determines the record type, however any field in the record can be used to
    determine the record type or even multiple fields could be used.  Record type detection configuration is supplied
    by the \c "value" (field value equality test) or \c "regex" (regular expression test) keys in the
    @ref fixedlengthspecrow "field specification hash" for the record in question.  If multiple fields in a record
    definintion have \c "value" or \c "regex" keys, then all fields must match the input data in order for the input
    line to match the record.

    The above record type resolution logic is executed in
    @ref FixedLengthUtil::FixedLengthAbstractIterator::identifyTypeImpl() "FixedLengthAbstractIterator::identifyTypeImpl()",
    which executes any \c "regex" or \c "value" tests on the input line in the order of the field definitions in the
    @ref fixedlengthspecrecordhash "record description hash".

    Record type resolution is performed as follow:
    - \c "value": Matches the full value of the field; if an integer \c "value" value is used, then integer comparisons are done, otherwise string comparisons are performed.
    - \c "regex": Matches the input line string starting at the first character in the field to the rest of the line (i.e. not truncated for the current record);
    this enables regular expression matching against multiple columns if needed.

    When there are no record-matching keys in the field hashes for any record and the input record character lengths are
    not unique, then
    @ref FixedLengthUtil::FixedLengthAbstractIterator::identifyTypeImpl() "FixedLengthAbstractIterator::identifyTypeImpl()"
    must be overridden in a subclass to provide custom record matching logic.

    @note
    - It is an error to have both \c "regex" and \c "value" keys in a @ref fixedlengthspecrow "field specification hash"
    - If multiple fields have configuration for input line matching (i.e. \c "regex" and \c "value" keys), then all
      fields with this configuration must match for the record to be matched

    @section fixedlengthformat Fixed Length Data Format

    Input and output data are formatted in a hash with two mandatory keys:
    - \c "type": a string with name of the type
    - \c "record": a hash with line data in field - value map

    @code{.py}
    ("type": "type1", "record": {"col1": 11111, "col2": "bb"}),
    @endcode

    <b>Example of reading:</b>
    @code{.py}
#!/usr/bin/env qore

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires FixedLengthUtil

hash<auto> specs = {
    "type1": {
        "col1": {"length": 5, "type": "int"},
        "col2": {"length": 2, "type": "string"},
    },
    "type2": {
        "col3": {"length": 1, "type": "string"},
        "col4": {"length": 3, "type": "string"},
        "col5": {
            "length": 8,
            "type": "date",
            "format": "DDMMYYYY",
            # "timezone": "Europe/Prague", # use global if omitted
        },
    },
};

hash<auto> global_options = {
    "encoding"    : "UTF-8",
    "eol"         : "\n",
    "ignore_empty": True,
    "timezone"    : "Europe/Prague", # used if not overridden in a date field specification
};

FixedLengthFileIterator i(file, specs, global_options);
while (i.next()) {
    operation_with_hash(i.getValue())
}
    @endcode

    <b>Example of writing:</b>
    @code{.py}
#!/usr/bin/env qore

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires FixedLengthUtil

list<hash<auto>> data = (
    {"type": "type1", "record": {"col1": 11111, "col2": "bb"}},
    {"type": "type2", "record": {"col3": "c", "col4": "ddd", "col5": "31122014"}},
    {"type": "type1", "record": {"col1": 22222, "col2": "gg"}},
);

hash<auto> specs = {
    "type1": {
        "col1": {"length": 5, "type": "int"},
        "col2": {"length": 2, "type": "string"},
    },
    "type2": {
        "col3": {"length": 1, "type": "string"},
        "col4": {"length": 3, "type": "string"},
        "col5": {"length": 8, "type": "date", "format": "DDMMYYYY", "timezone": "Europe/Prague"},
    },
};

hash<auto> global_options = {
    "eol": "\n",
};

FixedLengthFileWriter w(file, specs, global_options);
w.write(data);
    @endcode

    @section fixedlengthutil_relnotes Release Notes

    @subsection fixedlengthutil_v1_6 Version 1.6
    - added support for data provider application actions
      (<a href="https://github.com/qorelanguage/qore/issues/4808">issue 4808</a>)

    @subsection fixedlengthutil_v1_5 Version 1.5
    - updated with initial support for generic expressions
      (<a href="https://github.com/qorelanguage/qore/issues/4538">issue 4538</a>)

    @subsection fixedlengthutil_v1_4 Version 1.4
    - added support for resolving locations with the \c FileLocationHandler module
      (<a href="https://github.com/qorelanguage/qore/issues/4456">issue 4456</a>)

    @subsection fixedlengthutil_v1_3 Version 1.3
    - added support for generic record search operators and options
      (<a href="https://github.com/qorelanguage/qore/issues/4430">issue 4430</a>)

    @subsection fixedlengthutil_v1_2_1 Version 1.2.1
    - updated read and write data providers to provide verbose option support
      (<a href="https://github.com/qorelanguage/qore/issues/4139">issue 4139</a>)

    @subsection fixedlengthutil_v1_1 Version 1.1
    - added support for streams; the following classes implement fixed-length input and output based on streams:
      - @ref FixedLengthUtil::FixedLengthIterator "FixedLengthIterator": provides a more generic interface than @ref FixedLengthUtil::FixedLengthDataIterator "FixedLengthDataIterator" and @ref FixedLengthUtil::FixedLengthFileIterator "FixedLengthFileIterator"
      - @ref FixedLengthUtil::FixedLengthWriter "FixedLengthWriter": provides a more generic interface than @ref FixedLengthUtil::FixedLengthDataWriter "FixedLengthDataWriter" and @ref FixedLengthUtil::FixedLengthFileWriter "FixedLengthFileWriter"
    - added @ref FixedLengthUtil::FixedLengthFileIterator::getFileName() (<a href="https://github.com/qorelanguage/qore/issues/1164">issue 1164</a>)
    - added field as well as global option "truncate" (<a href="https://github.com/qorelanguage/qore/issues/1841">issue 1841</a>)
    - added field as well as global option "tab2space" (<a href="https://github.com/qorelanguage/qore/issues/1866">issue 1866</a>)

    @subsection fixedlengthutil_v1_0_1 Version 1.0.1
    - fixes and improvements to errors and exceptions (<a href="https://github.com/qorelanguage/qore/issues/1828">issue 1828</a>)

    @subsection fixedlengthutil_v1_0 Version 1.0
    - initial version of module
*/

#! The FixedLengthUtil namespace contains all the definitions in the FixedLengthUtil module
public namespace FixedLengthUtil {
#! FixedLength app name
public const AppName = "FixedLength";

#! Unix end of line character sequence (for new OS X too)
public const EOL_UNIX = "\n";
#! MS DOS/Windows end of line character sequence
public const EOL_WIN = "\r\n";
#! Old (pre-OSX) Macintosh end of line character sequence
public const EOL_MACINTOSH = "\r";

# helper hash (for O(ln(n)) lookups in the worst case) of end of line values
const EOLS = {
    EOL_UNIX: True,
    EOL_WIN: True,
    EOL_MACINTOSH: True,
};
}

namespace Priv {
const FixedLengthWhiteLogo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">
<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">
    <g transform=\"matrix(1,0,0,1,-2.00787,164.04)\">
        <g id=\"g3\">
            <g id=\"text3\">
                <g transform=\"matrix(180,0,0,180,0,0)\">
                    <path d=\"M0.496,-0.367C0.496,-0.354 0.489,-0.347 0.476,-0.347L0.169,-0.347L0.169,-0.02C0.169,-0.007 0.162,-0 0.149,-0L0.098,-0C0.085,-0 0.078,-0.007 0.078,-0.02L0.078,-0.564C0.078,-0.688 0.149,-0.75 0.291,-0.75C0.379,-0.75 0.444,-0.748 0.486,-0.744C0.493,-0.743 0.496,-0.738 0.496,-0.73L0.496,-0.68C0.496,-0.672 0.492,-0.668 0.485,-0.668L0.292,-0.668C0.241,-0.668 0.208,-0.66 0.191,-0.645C0.176,-0.631 0.169,-0.604 0.169,-0.564L0.169,-0.425L0.476,-0.425C0.489,-0.425 0.496,-0.418 0.496,-0.405L0.496,-0.367Z\" style=\"fill:white;fill-rule:nonzero;\"/>
                </g>
                <g transform=\"matrix(180,0,0,180,99.18,0)\">
                    <path d=\"M0.496,-0.016C0.496,-0.008 0.493,-0.003 0.486,-0.002C0.447,0.004 0.382,0.007 0.291,0.007C0.225,0.007 0.176,-0.003 0.144,-0.024C0.1,-0.053 0.078,-0.104 0.078,-0.179L0.078,-0.723C0.078,-0.736 0.085,-0.743 0.098,-0.743L0.149,-0.743C0.162,-0.743 0.169,-0.736 0.169,-0.723L0.169,-0.179C0.169,-0.139 0.176,-0.112 0.191,-0.099C0.208,-0.083 0.241,-0.075 0.292,-0.075L0.485,-0.075C0.492,-0.075 0.496,-0.071 0.496,-0.063L0.496,-0.016Z\" style=\"fill:white;fill-rule:nonzero;\"/>
                </g>
            </g>
        </g>
    </g>
</svg>";

const FixedLengthBlackLogo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">
<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">
    <g transform=\"matrix(1,0,0,1,-2.00787,164.04)\">
        <g id=\"g3\">
            <g id=\"text3\">
                <g transform=\"matrix(180,0,0,180,0,0)\">
                    <path d=\"M0.496,-0.367C0.496,-0.354 0.489,-0.347 0.476,-0.347L0.169,-0.347L0.169,-0.02C0.169,-0.007 0.162,-0 0.149,-0L0.098,-0C0.085,-0 0.078,-0.007 0.078,-0.02L0.078,-0.564C0.078,-0.688 0.149,-0.75 0.291,-0.75C0.379,-0.75 0.444,-0.748 0.486,-0.744C0.493,-0.743 0.496,-0.738 0.496,-0.73L0.496,-0.68C0.496,-0.672 0.492,-0.668 0.485,-0.668L0.292,-0.668C0.241,-0.668 0.208,-0.66 0.191,-0.645C0.176,-0.631 0.169,-0.604 0.169,-0.564L0.169,-0.425L0.476,-0.425C0.489,-0.425 0.496,-0.418 0.496,-0.405L0.496,-0.367Z\" style=\"fill-rule:nonzero;\"/>
                </g>
                <g transform=\"matrix(180,0,0,180,99.18,0)\">
                    <path d=\"M0.496,-0.016C0.496,-0.008 0.493,-0.003 0.486,-0.002C0.447,0.004 0.382,0.007 0.291,0.007C0.225,0.007 0.176,-0.003 0.144,-0.024C0.1,-0.053 0.078,-0.104 0.078,-0.179L0.078,-0.723C0.078,-0.736 0.085,-0.743 0.098,-0.743L0.149,-0.743C0.162,-0.743 0.169,-0.736 0.169,-0.723L0.169,-0.179C0.169,-0.139 0.176,-0.112 0.191,-0.099C0.208,-0.083 0.241,-0.075 0.292,-0.075L0.485,-0.075C0.492,-0.075 0.496,-0.071 0.496,-0.063L0.496,-0.016Z\" style=\"fill-rule:nonzero;\"/>
                </g>
            </g>
        </g>
    </g>
</svg>";
}