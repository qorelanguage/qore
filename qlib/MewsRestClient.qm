# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file MewsRestClient.qm Qore user module for calling Oracle Mews REST services

/*  MewsRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4
%requires Swagger

module MewsRestClient {
    version = "1.0";
    desc = "User module for calling Mews REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("mewsrest", MewsRestConnection::ConnectionScheme);
    };
}

/** @mainpage MewsRestClient Module

    @tableofcontents

    @section mewsrestclientintro MewsRestClient Introduction

    The %MewsRestClient module provides an API for calling Mews REST API services.

    To use this module, use \c "%requires MewsRestClient" in your code.

    All the public symbols in the module are defined in the MewsRestClient namespace.

    The main classes are:
    - @ref MewsRestClient::MewsRestClient "MewsRestClient":
      this class provides the REST client API for communuication with the Mews REST
      API; it also automates authentication and authorization to the target
    - @ref MewsRestClient::MewsRestConnection "MewsRestConnection":
      provides a REST connection object to Mews cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires MewsRestClient
%requires ConnectionProvider

MewsRestClient rest = get_connection("my-mews-connection");
hash<auto> ans = rest.get("/some/uri/path");
printf("%N\n", ans.body);
    @endcode

    @section Mewsrestclientrelnotes Release Notes

    @subsection Mewsrestclientv1_0 MewsRestClient v1.0
    - the initial version of the %MewsRestClient module
*/

#! the MewsRestClient namespace contains all the objects in the MewsRestClient module
public namespace MewsRestClient {
#! this class provides the REST client API for communication with Mews servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.
*/
public class MewsRestClient inherits RestClient::RestClient {
    public {
        #! Connector REST API path prefix
        const DefaultUriPathPrefix = "api/connector/v1";

        #! Default client value
        const DefaultClient = sprintf("Qore %s", Qore::VersionString);
    }

    private {
        #! Mews client token
        string client_token;

        #! Mews access token
        string access_token;

        #! Mews client values
        string client = DefaultClient;
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
MewsRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect) : RestClient(MewsRestClient::getOptions(opts), True) {
        if (opts.client_token) {
            client_token = opts.client_token;
        } else {
            throw "RESTCLIENT-ERROR", "missing 'client_token' option";
        }
        if (opts.access_token) {
            access_token = opts.access_token;
        } else {
            throw "RESTCLIENT-ERROR", "missing 'access_token' option";
        }
        if (*string client = getString(opts, "client")) {
            self.client = client;
        }
        {
            *string cp = getConnectionPath();
            if (!cp.val() || cp == "/") {
                setConnectionPath(DefaultUriPathPrefix);
            }
        }
        if (!do_not_connect) {
            connect();
        }
    }

    #! Makes a POST request to the server with the required tokens and returns the response
    /** @param path the URI path to add (will be appended to any root path given in the constructor)
        @param body an optional message body to be included in the request; this will have the \c AccessToken,
        \c ClientToken, as well as the \c Client value added to it automatically before sending with JSON
        serialization
        @param info an optional reference to a hash that will be used as an output variable giving a hash of request
        headers and other information about the HTTP request

        @return A hash of headers received from the HTTP server with all key names converted to lower-case; if any
        message body is included in the response, it will be deserialized to %Qore data and assigned to the value of
        the \c "body" key

       @throw REST-RESPONSE-ERROR if this exception is thrown by the @ref Qore::HTTPClient::send() call in case of an
        HTTP response code < 100 or >= 300, the message body is still deserialized if possible and the response
        information can be retrieved in the \a info hash output keys as follows:
        - \c "response-code": the HTTP response code given
        - \c "response-headers": a hash of processed response headers
        - \c "response-headers-raw": a hash of raw unprocessed response headers
        - \c "response-body": the decoded response body
        .
        Note that this exception is not raised for HTTP status codes indicating an error if the \c error_passthru
        option is set to @ref True "True"

        Other exceptions can be thrown by the @ref Qore::HTTPClient::send() call used to make the HTTP request.
    */
    hash<auto> doMewsRequest(string path, *hash<auto> body, *reference<hash<auto>> info, *hash<auto> hdr) {
        return RestClient::doRequest("POST", path, body, \info, NOTHING, hdr);
    }

    #! Adds authorization keys to the request body
    auto preprocessRequestBody(auto body) {
        if (!exists body || body.typeCode() == NT_HASH) {
            return {
                "ClientToken": client_token,
                "AccessToken": access_token,
                "Client": client,
            } + body;
        }
        return body;
    }

    #! Checks if a login is necessary; if so, then the login is performed
    private checkLogin(*reference<hash<auto>> info) {
    }

    #! returns options for @ref MewsRestClient::MewsRestClient::constructor()
    private static hash<auto> getOptions(hash<auto> opts) {
        if (!opts.swagger && !opts.validator) {
            string path = dirname(get_module_hash().MewsRestClient.filename)
                + "/MewsRestDataProvider/mews-swagger-2.0.yaml";
            if (is_file(path)) {
                opts.swagger = path;
                # the Mews Swagger file has been heavily corrected and updated but still needs compat flags to be
                # usable
                # - LM_OPTIONAL_REF_PROPERTIES: many properties set by references are missing in the data and must be
                #   treated as optional
                # - LM_ACCEPT_ALL_PROPERTIES: the API is often updated with new properties that are not in the schema;
                #   this is to ensure that API calls will still work when the server returns unexpected data
                opts.swagger_lax_parsing = LM_OPTIONAL_REF_PROPERTIES | LM_ACCEPT_ALL_PROPERTIES;
            }
        }
        return opts + {"data": "json"};
    }
}

#! Class for Mews REST connections; returns @ref MewsRestClient objects
/** This class implements a subset of @ref RestClient::RestClientConnection "RestClientConnection"; in addition,
    this class requires values for the following options:
    - \c client_token
    - \c access_token

    @see @ref MewsRestClient::MewsRestClient::constructor() for more information on the above options
*/
public class MewsRestConnection inherits RestClient::RestConnection {
    public {
        #! REST options not supported by this class
        const MewsUnsupportedRestOptions = (
            "data",
            "password",
            "token",
            "token_type",
            "username",
        ) + map $1, keys RestConnection::ConnectionScheme.options, $1 =~ /^oauth/;

        #! Default Mews ping body
        const DefaultMewsPingBody= "auto";

        #! Default Mews ping method
        const DefaultMewsPingMethod= "POST";

        #! Default Mews ping headers
        const DefaultMewsPingHeaders = {
            "Accept": MimeTypeJson,
        };

        #! Defualt Mews ping path
        const DefaultMewsPingPath = "configuration/get";

        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "Mews REST Connection",
            "short_desc": "A connection to the Mews REST API",
            "desc": "A connection to the Mews REST API",
            "cls": Class::forName("MewsRestConnection"),
            "auto_url": True,
            "schemes": {
                "mewsrest": True,
            },
            "base_scheme_map": {
                "https": "mewsrest",
            },
            "options": RestConnection::ConnectionScheme.options - MewsUnsupportedRestOptions + {
                "access_token": <ConnectionOptionInfo>{
                    "display_name": "Mews Account Token",
                    "short_desc": "The Mews account token for access to the given Mews instance",
                    "type": "string",
                    "desc": "The Mews account token for access to the given Mews instance",
                },
                "client": <ConnectionOptionInfo>{
                    "display_name": "Mews Client",
                    "short_desc": "The Mews client value for requests",
                    "type": "string",
                    "desc": "The Mews client value for requests",
                    "default_value": MewsRestClient::DefaultClient,
                },
                "client_token": <ConnectionOptionInfo>{
                    "display_name": "Mews Client Token",
                    "short_desc": "The Mews client token for access to the given Mews instance",
                    "type": "string",
                    "desc": "The Mews client token for access to the given Mews instance",
                },
                "ping_body": RestConnection::ConnectionScheme.options.ping_body + <ConnectionOptionInfo>{
                    "default_value": DefaultMewsPingBody,
                },
                "ping_headers": RestConnection::ConnectionScheme.options.ping_headers + <ConnectionOptionInfo>{
                    "default_value": DefaultMewsPingHeaders,
                },
                "ping_method": RestConnection::ConnectionScheme.options.ping_method + <ConnectionOptionInfo>{
                    "default_value": DefaultMewsPingMethod,
                },
                "ping_path": RestConnection::ConnectionScheme.options.ping_path + <ConnectionOptionInfo>{
                    "default_value": DefaultMewsPingPath,
                },
            },
            "required_options": "client_token,access_token",
        };
    }

    #! creates the MewsRestConnection object
    /** @param config with the following keys:
        - name (required string): the connection name
        - display_name (optional string): the display name
        - short_desc (optional string): a short description in plain text
        - desc (optional string): a long description with markdown formatting
        - url (required string): the connection URL
        - opts (optional hash): connection options
        - logger (optional LoggerInterface object): logger for the connection
        @param attr optional connection attributes
        - monitor (optional bool): should the connection be monitored? Default: True
        - enabled (optional bool): is the connection enabled? Default: True
        - locked (optional bool): is the connection locked? Default: False
        - debug_data (optional bool): debug data? Default: False
        - tags (optional hash): tags for the connection; no default value

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option or attribute
    */
    constructor(hash<auto> config, *hash<auto> attr) : RestConnection(config, attr) {
    }

    #! returns \c "mewsrest"
    string getType() {
        return "mewsrest";
    }

    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the MewsDataProvider and creates the data provider
        # object dynamically
        load_module("MewsRestDataProvider");
        return create_object("MewsRestDataProvider", get());
    }

    private auto getPingBody() {
        if (opts.ping_body == "auto") {
            return {
                "ClientToken": opts.client_token,
                "AccessToken": opts.access_token,
                "Client": opts.client,
            };
        }
        return opts.ping_body;
    }

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        #children_can_support_apis = True;
    }

    #! returns a @ref MewsRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref MewsRestClient object
    */
    private MewsRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new MewsRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
