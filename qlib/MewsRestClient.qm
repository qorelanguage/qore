# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file MewsRestClient.qm Qore user module for calling Oracle Mews REST services

/*  MewsRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module MewsRestClient {
    version = "1.0";
    desc = "User module for calling Mews REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("mews", MewsRestConnection::ConnectionScheme);
    };
}

/** @mainpage MewsRestClient Module

    @tableofcontents

    @section mewsrestclientintro MewsRestClient Introduction

    The %MewsRestClient module provides an API for calling Mews REST API services.

    To use this module, use \c "%requires MewsRestClient" in your code.

    All the public symbols in the module are defined in the MewsRestClient namespace.

    The main classes are:
    - @ref MewsRestClient::MewsRestClient "MewsRestClient":
      this class provides the REST client API for communuication with the Mews REST
      API; it also automates authentication and authorization to the target
    - @ref MewsRestClient::MewsRestConnection "MewsRestConnection":
      provides a REST connection object to Mews cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires MewsRestClient
%requires ConnectionProvider

MewsRestClient rest = get_connection("my-mews-connection");
hash<auto> ans = rest.get("/some/uri/path");
printf("%N\n", ans.body);
    @endcode

    @section Mewsrestclientrelnotes Release Notes

    @subsection Mewsrestclientv1_0 MewsRestClient v1.0
    - the initial version of the %MewsRestClient module
*/

#! the MewsRestClient namespace contains all the objects in the MewsRestClient module
public namespace MewsRestClient {
#! this class provides the REST client API for communication with Mews servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.
*/
public class MewsRestClient inherits RestClient::RestClient {
    public {
        #! Default Mews ping method
        const DefaultMewsPingMethod= "GET";

        #! Default Mews ping headers
        const DefaultMewsPingHeaders = {
            "Accept": MimeTypeJson,
        };
    }

    private {
        #! Mews client token
        string client_token;

        #! Mews access token
        string access_token;
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
MewsRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class; note
        that the URL is set by default if not provided (see @ref DefaultUrl)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect) : RestClient(MewsRestClient::getOptions(opts), True) {
        if (opts.client_token) {
            client_token = opts.client_token;
        } else {
            throw "RESTCLIENT-ERROR", "missing 'client_token' option";
        }
        if (opts.access_token) {
            access_token = opts.access_token;
        } else {
            throw "RESTCLIENT-ERROR", "missing 'access_token' option";
        }
        if (!do_not_connect) {
            connect();
        }
    }

    #! Checks if a login is necessary; if so, then the login is performed
    private checkLogin(*reference<hash<auto>> info) {
    }


    #! returns options for @ref MewsRestClient::MewsRestClient::constructor()
    private static hash<auto> getOptions(hash<auto> opts) {
        return opts + {"data": "json"};
    }
}

#! Class for Mews REST connections; returns @ref MewsRestClient objects
/** This class implements a subset of @ref RestClient::RestClientConnection "RestClientConnection"; in addition,
    this class requires values for the following options:
    - \c client_token
    - \c access_token

    @see @ref MewsRestClient::MewsRestClient::constructor() for more information on the above options
*/
public class MewsRestConnection inherits RestClient::RestConnection {
    public {
        #! REST options not supported by this class
        const MewsUnsupportedRestOptions = (
            "data",
            "password",
            "token",
            "token_type",
            "username",
        ) + map $1, keys RestConnection::ConnectionScheme.options, $1 =~ /^oauth/;

        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "Mews REST Connection",
            "short_desc": "A connection to the Mews REST API",
            "desc": "A connection to the Mews REST API",
            "cls": Class::forName("MewsRestConnection"),
            "auto_url": True,
            "schemes": {
                "mews": True,
            },
            "base_scheme_map": {
                "https": "mews",
            },
            "options": RestConnection::ConnectionScheme.options - MewsUnsupportedRestOptions + {
                "client_token": <ConnectionOptionInfo>{
                    "display_name": "Mews Client Token",
                    "short_desc": "The Mews client token for access to the given Mews instance",
                    "type": "string",
                    "desc": "The Mews client token for access to the given Mews instance",
                },
                "access_token": <ConnectionOptionInfo>{
                    "display_name": "Mews Account Token",
                    "short_desc": "The Mews account token for access to the given Mews instance",
                    "type": "string",
                    "desc": "The Mews account token for access to the given Mews instance",
                },
            },
            "required_options": "client_token,access_token",
        };
    }

    #! creates the MewsRestConnection object
    /** @param config with the following keys:
        - name (required string): the connection name
        - display_name (optional string): the display name
        - short_desc (optional string): a short description in plain text
        - desc (optional string): a long description with markdown formatting
        - url (required string): the connection URL
        - opts (optional hash): connection options
        - logger (optional LoggerInterface object): logger for the connection
        @param attr optional connection attributes
        - monitor (optional bool): should the connection be monitored? Default: True
        - enabled (optional bool): is the connection enabled? Default: True
        - locked (optional bool): is the connection locked? Default: False
        - debug_data (optional bool): debug data? Default: False
        - tags (optional hash): tags for the connection; no default value

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option or attribute
    */
    constructor(hash<auto> config, *hash<auto> attr) : RestConnection(config, attr) {
    }

    #! returns \c "mews"
    string getType() {
        return "mews";
    }

%ifdef HaveMewsDataProvider
    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the MewsDataProvider and creates the data provider
        # object dynamically
        load_module("MewsDataProvider");
        return create_object("MewsDataProvider", get());
    }
%endif

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        #children_can_support_apis = True;
    }

    #! returns a @ref MewsRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref MewsRestClient object
    */
    private MewsRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new MewsRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
