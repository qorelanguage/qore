# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file JdbcPostgresqlSqlUtil.qm Qore user module for working with PostgreSQL SQL data

/*  JdbcPostgresqlSqlUtil.qm Copyright (C) 2013 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 1.14

# requires the SqlUtil module
%requires SqlUtil >= 1.5

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# the implementation is in PgsqlSqlUtilBase
%requires PgsqlSqlUtilBase

module JdbcPostgresqlSqlUtil {
    version = "1.0";
    desc = "user module for working with PostgreSQL SQL data with the JDBC driver";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

# version history is included below in the docs

/** @mainpage JdbcPostgresqlSqlUtil Module

    @tableofcontents

    @section jdbcpostgresqlsqlutilintro JdbcPostgresqlSqlUtil Module Introduction

    The %JdbcPostgresqlSqlUtil module provides a high level API for working with PostgreSQL database objects using
    the \c jdbc driver.

    Usually this module is loaded on demand from the SqlUtil module, however to use this module
    directly, use \c "%requires JdbcPostgresqlSqlUtil" in your code.

    All the public symbols in the module are defined in the JdbcPostgresqlSqlUtil namespace

    @note This module requires the <a href="https://github.com/qorelanguage/module-jni">jni</a> binary module and the
    PostgreSQL JDBC driver for communication with PostgreSQL databases

    @see @ref pgsqlsqlutilbaseintro for implementation information about this module

    @section jdbcpostgresqlsqlutil_relnotes Release Notes

    @subsection jdbcpostgresqlsqlutilv10 JdbcPostgresqlSqlUtil v1.0
    - initial release
*/

#! the JdbcPostgresqlSqlUtil namespace contains all the objects in the JdbcPostgresqlSqlUtil module
public namespace JdbcPostgresqlSqlUtil {
    #! returns a JdbcPgsqlTable object corresponding to the arguments
    public JdbcPgsqlTable sub get_table(AbstractDatasource nds, string nname, *hash<auto> opts) {
        return new JdbcPgsqlTable(nds, nname, opts);
    }

    #! returns a PgsqlDatabase object corresponding to the arguments
    public JdbcPgsqlDatabase sub get_database(AbstractDatasource nds, *hash<auto> opts) {
        return new JdbcPgsqlDatabase(nds, opts);
    }

    #! provides the JDBC PostgreSQL-specific implementation of the SqlUtil::AbstractDatabase interface
    public class JdbcPgsqlDatabase inherits PgsqlDatabase {
        constructor(AbstractDatasource nds, *hash opts) : PgsqlDatabase(nds, opts) {
        }

        private *string getDbName() {
            return (ds.getDBName() =~ x/:([^{]+)/)[0];
        }
    }

    #! provides the JDBC PostgreSQL-specific implementation of the SqlUtil::AbstractTable interface
    public class JdbcPgsqlTable inherits PgsqlTable {
        #! Creates the object from the arguments
        constructor(AbstractDatasource nds, string nname, *hash opts) : PgsqlTable(nds, nname, opts) {
        }

        #! returns @ref True "True" because the jdbc driver supports array binds / bulk DML operations
        bool hasArrayBind() {
            return True;
        }

        #! Sets the internal PostgreSQL server version
        private getServerVersion() {
            pg_state.lock();
            on_exit pg_state.unlock();

            if (server_version) {
                return;
            }

            hash<auto> h = ds.getServerVersion();
            server_version = h.major_version * 10000 + h.minor_version * 100;
            server_version_major = h.major_version;
            server_version_minor = h.minor_version;
        }
    }
}
