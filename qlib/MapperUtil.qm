# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file MapperUtil.qm data mapping module common definitions

/*  Mapper.qm Copyright 2014 - 2019 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9.4

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# do not use "$" for vars
%new-style

module MapperUtil {
    version = "1.0";
    desc = "user module providing definitions for basic data mapping infrastructure";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage MapperUtil Module

    @tableofcontents

    @section mapperutilintro MapperUtil Module Introduction

    This module provides common definitions for the Mapper module.

    Declarations provided by this module:
    - @ref Mapper::MapperRuntimeKeyInfo "MapperRuntimeKeyInfo": runtime key definition

    @section mapperutilrelnotes Release Notes

    @subsection mapperutil_v1_0 MapperUtil v1.0
    - initial release
*/

#! All the definitions in the MapperUtil module are contained in the Mapper namespace
public namespace Mapper {
    #! Mapper standard field key info hash
    public const MapperKeyInfo = {
        "name": <MapperRuntimeKeyInfo>{
            "desc": "the name of the input field; dot notation accepted",
            "value_type": "string",
            "conflicting_keys": {
                "constant": True,
                "index": True,
            },
        },
        "constant": <MapperRuntimeKeyInfo>{
            "desc": "a constant value for the output field",
            "value_type": "any",
            "conflicting_keys": {
                "name": True,
                "code": True,
                "default": True,
            },
        },
        "index": <MapperRuntimeKeyInfo>{
            "desc": "the index number of the row",
            "value_type": "nothing",
            "conflicting_keys": {
                "name": True,
                "code": True,
                "default": True,
            },
        },
        "code": <MapperRuntimeKeyInfo>{
            "desc": "a code block for generating the field output programmatically",
            "value_type": "code",
            "conflicting_keys": {
                "constant": True,
                "index": True,
            },
        },
        "default": <MapperRuntimeKeyInfo>{
            "desc": "the default value for the field if no input is provided",
            "value_type": "any",
            "conflicting_keys": {
                "constant": True,
                "index": True,
            },
        },
        "trunc": <MapperRuntimeKeyInfo>{
            "desc": "if True and the input is longer than the output field permits, the input will be "
                "silently truncated",
            "value_type": "bool",
        },
        "runtime": <MapperRuntimeKeyInfo>{
            "desc": "the name of the field in the runtime hash where to take the value from",
            "value_type": "string",
        },
    };

    #! Describes a runtime mapper field key
    public hashdecl MapperRuntimeKeyInfo {
        #! A description of the key
        string desc;

        #! The type of value that must be assigned to this key
        string value_type = "string";

        #! Hash of conflicting keys, if any
        *hash<string, bool> conflicting_keys;

        #! If the key requires in input field for the mapping
        bool requires_input = False;

        #! The code to handle the key at runtime
        /** the signature of this closure or call reference depends on \a requires_input:
            - \a requires_input == True: <tt>auto sub (auto arg, auto val) {}</tt>
              - parameters:
                - \c arg: the argument to the runtime key in the mapping
                - \c val: the current value of the mapping, if any
            - \a requires_input == False: <tt>auto sub (auto arg) {}</tt>
              - parameters:
                - \c arg: the argument to the runtime key in the mapping

            In both cases the return value is the value to use for the field
        */
        code handler;
    }
}

