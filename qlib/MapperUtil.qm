# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file MapperUtil.qm data mapping module common definitions

/*  Mapper.qm Copyright 2014 - 2020 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9.4

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# do not use "$" for vars
%new-style

module MapperUtil {
    version = "1.0.1";
    desc = "user module providing definitions for basic data mapping infrastructure";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage MapperUtil Module

    @tableofcontents

    @section mapperutilintro MapperUtil Module Introduction

    This module provides common definitions for the Mapper module.

    Declarations provided by this module:
    - @ref Mapper::MapperRuntimeKeyInfo "MapperRuntimeKeyInfo": runtime key definition

    @section mapperutilrelnotes Release Notes

    @subsection mapperutil_v1_0 MapperUtil v1.0.1
    - added support for the \c use_input_record output field mapping key
      (<a href="https://github.com/qorelanguage/qore/issues/3823">issue 3823</a>)

    @subsection mapperutil_v1_0 MapperUtil v1.0
    - initial release
*/

#! All the definitions in the MapperUtil module are contained in the Mapper namespace
public namespace Mapper {
    #! Mapper standard field key info hash
    public const MapperKeyInfo = {
        "name": <MapperRuntimeKeyInfo>{
            "desc": "the name of the input field; dot notation accepted",
            "value_type": "string",
            "unique_roles": "value",
        },
        "use_input_record": <MapperRuntimeKeyInfo>{
            "desc": "The entire input record will be used for the output field mapping; only compatible with hash "
                "output fields",
            "value_type": "bool",
            "unique_roles": "*",
            "returns_type": "hash",
        },
        "constant": <MapperRuntimeKeyInfo>{
            "desc": "a constant value for the output field",
            "value_type": "any",
            "requires_field_type": True,
            "unique_roles": "*",
        },
        "index": <MapperRuntimeKeyInfo>{
            "desc": "the index number of the row",
            "value_type": "int",
            "unique_roles": "*",
        },
        "code": <MapperRuntimeKeyInfo>{
            "desc": "a code block for generating the field output programmatically",
            "value_type": "mapper-code",
        },
        "default": <MapperRuntimeKeyInfo>{
            "desc": "the default value for the field if no input is provided",
            "value_type": "any",
            "requires_field_type": True,
        },
        "trunc": <MapperRuntimeKeyInfo>{
            "desc": "if True and the input is longer than the output field permits, the input will be "
                "silently truncated",
            "value_type": "bool",
        },
        "runtime": <MapperRuntimeKeyInfo>{
            "desc": "the name of the field in the runtime hash where to take the value from",
            "value_type": "string",
            "unique_roles": "*",
        },
        "type_options": <MapperRuntimeKeyInfo>{
            "desc": "a hash of type options; this must correspond to option values for the output data type",
            "value_type": "option_hash",
        },
    };

    #! Describes a runtime mapper field key
    public hashdecl MapperRuntimeKeyInfo {
        #! A description of the key
        string desc;

        #! The type of value that must be assigned to this key
        string value_type = "string";

        #! Hash of conflicting keys, if any
        *hash<string, bool> conflicting_keys;

        #! If the type of the value for the key must be the same as the field type
        bool requires_field_type = False;

        #! If the key provides some unique functionality
        /** only one key providing the given functionality can be included in an output field; this is a list so that
            keys can provide more than one unique function
        */
        *softlist<string> unique_roles;

        #! If the key can only be used if one or more other keys supplying the given roles are also present
        *softlist<string> requires_roles;

        #! If the key provides a value that returns a specific type
        *string returns_type;

        #! The code to handle the key at runtime
        /** the signature of this closure or call reference depends on \a requires_input:
            - \a requires_roles contains \a value: <tt>auto sub (auto arg, auto val) {}</tt>
              - parameters:
                - \c arg: the argument to the runtime key in the mapping
                - \c val: the current value of the mapping, if any
            - \a requires_roles does not contain \a value: <tt>auto sub (auto arg) {}</tt>
              - parameters:
                - \c arg: the argument to the runtime key in the mapping

            In both cases the return value is the value to use for the field
        */
        code handler;
    }
}

