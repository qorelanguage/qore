# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DebugHandler.qm Qore handler definition for the HttpServer module for providing debug server via WebSocket server services

/*  DebugHandler.qm Copyright 2013 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.12 or better
%requires qore >= 0.8.13
%requires WebSocketUtil
%requires WebSocketHandler
%requires yaml >= 0.5
%requires HttpServerUtil >= 0.3.11
%requires DebugUtil
%requires DebugProgramControl
%requires Mime

# require type definitions everywhere
%require-types
# enable all warnings
%enable-all-warnings
%new-style
%no-debugging
%allow-debugger

module DebugHandler {
    version = "0.1";
    desc = "user module for providing debug server via WebSocket server services";
    author = "Tomas Mandys <tomas.mandys@qoretechnologies.com>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage DebugHandler Module

    @tableofcontents

    @section debughandlerintro Introduction to the DebugHandler Module

    The %DebugHandler module provides a handler to be used with @ref HttpServer to support server-side
    %Qore-language debugging.  Multiple websocket clients may connect to the websocket server and debug
    simultaneously.

    @see
    - @ref DebugProgramControl::DebugProgramControl "DebugProgramControl"

    @subsection debughandler_v0_1 DebugHandler Version 0.1
    - the initial version of the DebugHandler module
*/

#! the DebugHandler namespace contains all the objects in the DebugHandler module
public namespace DebugHandler {
    #! The class represents a connection to a debug server via websocket client
    /**
        The class implements @ref WebSocketHandler::WebSocketConnection::gotMessage() "WebSocketConnection::gotMessage()"
        to handle incomming commands passed to control assigned @ref Qore::ProgramControl "ProgramControl" instance
        Such a command is handled on request/response basis.

        Unsolicited messages are sent to client asynchronously when an event occurs in the
        program being debugged.
    */
    public class WebSocketDebugConnection inherits WebSocketHandler::WebSocketConnection {
        public {
            #! websocket context, cx.id is used for sending messages to particular client, custom field may be added as well
            hash cx;
        }
        private {
            AbstractWebSocketDebugHandler dhandler;
        }

        #! The constructor is called by the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when a new connection is made by a websocket client
        /**
            It is called from @ref WebSocketHandler::WebSocketHandler::getConnectionImpl() "WebSocketHandler::getConnectionImpl()".
        */
        constructor(AbstractWebSocketDebugHandler n_handler, hash n_cx): WebSocketConnection(n_handler) {
            dhandler = n_handler;
            cx = n_cx;
            cx.handler = dhandler;
            dhandler.debugProgram.registerConnection(cx);
        }

        #! The method is called by the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when message from the client is received
        /**
        */
        gotMessage(string msg) {
            dhandler.receiveData(cx, msg);
        }

        #! The method is called by the @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" when the connection is closed
        /**
            Implementation unregisters connection from debug program host
        */
        connectionClosed() {
            dhandler.debugProgram.unregisterConnection(cx);
        }

        #! Notifies debug control host that new connection is registered.
        /**
            It may e.g. send welcome message to identify itself
        */
        registered() {
            dhandler.debugProgram.connectionRegistered(cx);
        }
    }

    #! The abstract web socket debug handler class
    /** Connections are represented by an object descended from @ref WebSocketHandler::WebSocketConnection "WebSocketConnection" which is
        instantiated via @ref WebSocketHandler::WebSocketHandler::getConnectionImpl().

        The handler is registered via @ref HtpServer::HttpServer::setHandler() "HttpServer::setHandler()" to receive messages.

        @par Receiving WebSocket Messages from Clients
        When a message is received via @ref WebSocketHandler::WebSocketConnection::gotMessage() "WebSocketConnection::gotMessage()" from the client then it is passed to @ref receiveData as is.

        @par Sending WebSocket Message to Clients
        To send a message to a websocket client, call one of the following methods @ref sendData or @ref broadcastData.

        Websocket connections are identified by their HTTP connection ID as passed in @ref WebSocketHandler::WebSocketHandler::handleRequest() "WebSocketHandler::handleRequest()" in the \c "cx.id" argument when the connection is first established.
    */
    public class AbstractWebSocketDebugHandler inherits WebSocketHandler::WebSocketHandler {
        public {
            WebSocketDebugProgramControl debugProgram;
            # default socket send timeout
            #const DefaultSocketSendTimeout = 30s;
            DebugLogger logger;
        }
        constructor(WebSocketDebugProgramControl dpc, *HttpServer::AbstractAuthenticator auth, *hash opts) : WebSocketHandler::WebSocketHandler(auth, opts) {
            debugProgram = dpc;
            dpc.addHandler(self);
        }

        log(int verbosity, string fmt) {
            if (logger) {
                logger.log2(verbosity, fmt, argv);
            }
        }

        #! called when a connection is established; the default implementation creates a WebSocketConnection object
        WebSocketHandler::WebSocketConnection getConnectionImpl(hash cx, hash hdr, string cid) {
            return new WebSocketDebugConnection(self, cx);
        }

        #! returns the MIME type for serialized data
        abstract public *string getContentType();

        #! encode websocket data
        abstract string encodeData(auto data);

        #! called when web socket receives data
        /**
            Data are passed as is, i.e. decoding is needed. Intercept method when implementing a 3rd party protocol.
        */
        abstract public receiveData(hash cx, string msg);

        #! sends data to the given connection
        /**
            Encode data and send using @ref WebSocketHandler::WebSocketHandler::sendOne() "WebSocketHandler::sendOne()" a message 
            to single connection given its connection ID. Intercept method when implementing a 3rd party protocol.
        */
        public sendData(hash cx, auto data) {
            sendOne(cx.id, encodeData(data));
        }

        #! sends data to all connections
        /**
            Encode data and broadcast data using @ref WebSocketHandler::WebSocketHandler::sendAll() "WebSocketHandler::sendAll()" a message to all connected clients.
            Intercept method when implementing a 3rd party protocol.
        */
        public broadcastData(auto data) {
            sendAll(encodeData(data));
        }

        #! called by the HTTP server to handle incoming HTTP requests
        /**
            It adds custom header \c X-QoreDebugWsProtocol to response
         */
        hash handleRequest(hash cx, hash hdr, *data b) {
            hash rv = WebSocketHandler::handleRequest(cx, hdr, b);
            rv.hdr{QoreDebugWsProtocolHeader} = QoreDebugProtocolVersion;
            return rv;
        }

        logInfo(string fmt) {
            log(DUV_INFO, fmt, argv);
        }

        logDebug(string fmt) {
            log(DUV_DEBUG, fmt, argv);
        }

        logError(string fmt) {
            log(DUV_INFO, "ERROR: " + fmt, argv);
        }
    }

    #! the main web socket debug handler class implementing internal protocol in YAML format.
    public class WebSocketDebugHandler inherits AbstractWebSocketDebugHandler {

        #! create the object optionally with the given @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator"
        /** @param auth the authentication object to use to authenticate connections (see @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator");
            if no @ref HttpServer::AbstractAuthenticator "AbstractAuthenticator" object is passed, then by default no authentication will be required
            @param dpc the debug program controller object
            @param opts passed to @ref WebSocketHandler::WebSocketHandler "WebSocketHandler" constructor
         */
        constructor(WebSocketDebugProgramControl dpc, *HttpServer::AbstractAuthenticator auth, *hash opts) : AbstractWebSocketDebugHandler(dpc, auth, opts) {
        }

        #! returns the MIME type for serialized data
        public *string getContentType() {
            return MimeTypeYamlRpc;
        }

        #! encode data as YAML
        string encodeData(auto data) {
            string s = make_yaml(data);
            log(DUV_DEBUG_1, "%s", s);
            return s;
        }

        #! called when web socket receive data
        public receiveData(hash cx, string msg) {
            *hash sd;
            try {
                any rd = parse_yaml(msg);
                sd = debugProgram.processCommand(cx, rd);
                if (exists sd)
                    sendData(cx, sd);
            }
            catch (hash<ExceptionInfo> ex) {
                log(DUV_DEBUG, "exception: %y", ex);
                sd.type = 'error';
                sd.result.err = ex.err;
                sd.result.desc = ex.desc;
                sd.result.ex = ex;
                sendData(cx, sd);
            }
        }

    }

    #! debug program control via @ref AbstractWebSocketDebugHandler
    /**
        More websocket handlers may be assigned, i.e. it can handle more URLs running one or more
        protocols.
    */
    public class WebSocketDebugProgramControl inherits DebugProgramControl {
        private {
            #! list of associated @ref AbstractWebSocketDebugHandler handlers
            list handlers = ();
        }

        #! creates the object
        /**
            @param serverName is used identifier fr \c welcome message
        */
        constructor(string serverName) : DebugProgramControl(serverName) {
        }

        #! sends data to the given connection
        public sendDataImpl(hash cx, auto data) {
            if (cx.handler) {
                cx.handler.sendData(cx, data);
            }
        }

        #! sends data to all connections
        public broadcastDataImpl(auto data) {
            foreach AbstractWebSocketDebugHandler h in (handlers) {
                h.broadcastData(data);
            }
        }

        #! add web socket handler object to handler list
        public addHandler(AbstractWebSocketDebugHandler newHandler) {
            if (inlist(newHandler, handlers)) {
                return;
            }
            push handlers, newHandler;
        }

    }
}
