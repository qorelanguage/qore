# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file Sap4HanaRestClient.qm Qore user module for calling Sap4Hana REST services

/*  Sap4HanaRestClient.qm Copyright (C) 2019 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 2.2
%requires(reexport) ConnectionProvider >= 2.0

module Sap4HanaRestClient {
    version = "1.1";
    desc = "user module for calling SAP4Hana REST services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("sap4hanarests", Sap4HanaRestConnection::ConnectionScheme);
    };
}

/** @mainpage Sap4HanaRestClient Module

    @tableofcontents

    @section sap4hanarestclientintro Sap4HanaRestClient Introduction

    The %Sap4HanaRestClient module provides an API for calling REST services with <a href="https://sap.com">SAP S/4Hana</a> servers.

    To use this module, use \c "%requires Sap4HanaRestClient" in your code.

    All the public symbols in the module are defined in the Sap4HanaRestClient namespace.

    The main classes are:
    - @ref Sap4HanaRestClient::Sap4HanaRestClient "Sap4HanaRestClient": this class provides the REST client API for communuication with <a href="https://sap.com">SAP S/4Hana</a>'s REST API; it also automates authentication and authorization to the target
    - @ref Sap4HanaRestClient::Sap4HanaRestConnection "Sap4HanaRestConnection": provides a REST connection object to a <a href="https://sap.com">SAP S/4Hana</a> server (based on the @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires Sap4HanaRestClient

hash<auto> opts = (
    "url": "https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap",
    "apikey": ENV.SAP4HANA_API_KEY,
);

Sap4HanaRestClient rest(opts);
hash<auto> ans = rest.get("API_BUSINESS_PARTNER/A_AddressEmailAddress?%24top=1");
printf("%N\n", ans.body);
    @endcode

    @section sap4hanarestclientrelnotes Release Notes

    @subsection sap4hanarestclientv1_1 Sap4HanaRestClient v1.1
    - implemented support for a data provider scheme cache and rich option information for connections
      (<a href="https://github.com/qorelanguage/qore/issues/4025">issue 4025</a>)

    @subsection sap4hanarestclientv1_0 Sap4HanaRestClient v1.0
    - the initial version of the %Sap4HanaRestClient module
*/

#! the Sap4HanaRestClient namespace contains all the objects in the Sap4HanaRestClient module
public namespace Sap4HanaRestClient {
#! this class provides the REST client API for communication with <a href="https://sap.com">SAP S/4Hana</a> servers
/** This class requires the following options for <a href="https://sap.com">SAP S/4Hana</a> authentication and authorization to the target server:
    - \c apikey: the <a href="https://sap.com">SAP S/4Hana</a> API key
*/
public class Sap4HanaRestClient inherits RestClient::RestClient {
    public {
        #! default send encoding
        const DefaultSendEncoding = "gzip";

        #! OAuth2 URI path
        const OAuth2TokenUriPath = "oauth2/apitoken/v1";
    }

    private:internal {
        # for access based on a simple API key
        string apikey;
    }

    #! creates the object with the given options (which include the mandatory \c apikey option for <a href="https://sap.com">SAP S/4Hana</a> server authentication)
    /**
        @par Example:
        @code{.py}
Sap4HanaRestClient rest({"url": "https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap", "apikey": apikey});
        @endcode

        @param opts valid options are:
        - \c additional_methods: Optional hash with more but not-HTTP-standardized methods to handle. It allows to
            create various HTTP extensions like e.g. WebDAV. The hash takes the method name as a key, and the value is
            a boolean @ref True "True" or @ref False "False": indicating if the method requires a message body as
            well. Example:
            @code{.py}
# add new HTTP methods for WebDAV. Both of them require body posting to the server
("additional_methods": ("PROPFIND": True, "MKCOL": True ));
            @endcode
        - \c apikey: (required) the <a href="https://sap.com">SAP S/4Hana</a> api key for the target server
        - \c content_encoding: for possible values, see @ref EncodingSupport; this sets the send encoding (if the
          \c "send_encoding" option is not set) and the requested response encoding (note that the
          @ref RestClient::RestClient "RestClient" class will only compress outgoing message bodies over
          @ref RestClient::RestClient::CompressionThreshold "CompressionThreshold" bytes in size)
        - \c data: a @ref DataSerializationOptions "data serialization option"; if not present defaults to \c "json"
        - \c default_path: The default path to use for new connections if a path is not otherwise specified in the
          connection URL
        - \c default_port: The default port number to connect to if none is given in the URL
        - \c error_passthru: if @ref True "True" then HTTP status codes indicating errors will not cause a
            \c REST-RESPONSE-ERROR exception to be raised, rather such responses will be passed through to the caller
            like any other response
        - \c headers: an optional hash of headers to send with every request, these can also be overridden in request
          method calls
        - \c http_version: Either '1.0' or '1.1' (default) for the claimed HTTP protocol version compliancy in
          outgoing message headers
        - \c max_redirects: The maximum number of redirects before throwing an exception (the default is 5)
        - \c proxy: The proxy URL for connecting through a proxy
        - \c redirect_passthru: if @ref True "True" then redirect responses will be passed to the caller instead of
          processed
        - \c send_encoding: a @ref EncodingSupport "send data encoding option" or the value \c "auto" which means to
          use automatic encoding; if not present defaults to \c "gzip" content encoding on sent message bodies (note
          that the @ref RestClient::RestClient "RestClient" class will only compress outgoing message bodies over
          @ref RestClient::RestClient::CompressionThreshold "CompressionThreshold" bytes in size)
        - \c timeout: The timeout value in milliseconds (also can be a relative date-time value for clarity, ex:
          \c 30s)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
        @throw SAP4HANARESTCLIENT-ERROR missing or invalid required option for
        <a href="https://sap.com">SAP S/4Hana</a> REST authentication or communication
    */
    constructor(hash<auto> opts, *softbool do_not_connect) : RestClient(Sap4HanaRestClient::getOptions(opts), True) {
        # check for either the apikey or client id/secret options
        if (opts.apikey) {
            apikey = getString(opts, "apikey");
        } else if (!oauth2_client_id || !oauth2_client_secret) {
            raiseError("missing either the \"apikey\" or both \"client_id\" and \"client_secret\" options");
        }

        # ensure that if json serialization is set, that we do not claim to understand XML responses (which SAP
        # will prefer otherwise)
        if (ds == "json") {
            addDefaultHeaders({"Accept": MimeTypeJson});
        } else {
            delete headers.Accept;
        }

        if (!do_not_connect) {
            if (!token && oauth2_grant_type) {
                loginIntern();
            } else {
                connect();
            }
        }
    }

    #! throws an exception due to an error
    static raiseError(string fmt, ...) {
        throw "SAP4HANARESTCLIENT-ERROR", vsprintf(fmt, argv);
    }

    #! returns options for the @ref Sap4HanaRestClient::Sap4HanaRestClient::constructor() "Sap4HanaRestClient::constructor()"
    static hash<auto> getOptions(hash<auto> opts) {
        hash<auto> hdr;
        if (!opts.client_id || !opts.client_secret) {
            hdr = {
                "ApiKey": opts.apikey,
            };
        } else {
            opts += {
                "oauth2_client_id": opts.client_id,
                "oauth2_client_secret": opts.client_secret,
                "oauth2_grant_type": opts.oauth2_grant_type ?? "client_credentials",
                "oauth2_token_url": OAuth2TokenUriPath,
            };
        }
        hdr += opts.headers;
        return opts + {
            "data": "json",
            "headers": hdr,
        };
    }
}

#! class for <a href="https://sap.com">SAP S/4Hana</a> REST connections; returns @ref Sap4HanaRestClient::Sap4HanaRestClient objects
/** In addition to all options supported by @ref RestClient::RestClientConnection "RestClientConnection", this
    connection class supports the following options:
    - \c "apikey": (required if \c "client_id" and \c "client_secret" are not supplied) the
        <a href="https://sap.com">SAP S/4Hana</a> api key
    - \c "client_id": (required if \c "apikey" is not supplied) the <a href="https://sap.com">SAP S/4Hana</a> OAuth2
      client ID
    - \c "client_secret": (required if \c "apikey" is not supplied) the <a href="https://sap.com">SAP S/4Hana</a>
      OAuth2 client secret

    @see @ref Sap4HanaRestClient::Sap4HanaRestClient::constructor() "Sap4HanaRestClient::constructor()" for more information on the above options
*/
public class Sap4HanaRestConnection inherits RestClient::RestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "SAP S/4 Hana REST Connection",
            "short_desc": "A connection to SAP S/4 Hana REST API services",
            "desc": "A connection to SAP S/4 Hana REST API services",
            "cls": Class::forName("Sap4HanaRestConnection"),
            "schemes": {
                "sap4haharests": True,
            },
            "base_scheme_map": {
                "https": "sap4haharests",
            },
            "options": RestConnection::ConnectionScheme.options + {
                "apikey": <ConnectionOptionInfo>{
                    "display_name": "API Key",
                    "short_desc": "The SAP S/4 Hana API key",
                    "type": "string",
                    "desc": "The SAP S/4 Hana API key",
                },
                "client_id": RestConnection::ConnectionScheme.options.oauth2_client_id,
                "client_secret": RestConnection::ConnectionScheme.options.oauth2_client_secret,
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url + <ConnectionOptionInfo>{
                    "default_value": Sap4HanaRestClient::OAuth2TokenUriPath,
                },
                "send_encoding": RestConnection::ConnectionScheme.options.send_encoding + <ConnectionOptionInfo>{
                    "default_value": Sap4HanaRestClient::DefaultSendEncoding,
                },
            },
            "required_options": "client_id,client_secret|apikey",
        };

        #! options required to support the OAuth2 authorization code grant flow
        const OAuth2AuthRequestOptions = (
            "client_id",
            "client_secret",
            "oauth2_auth_url",
            "oauth2_token_url",
            "oauth2_redirect_url",
        );

        #! Maps SAP REST options to standard options
        const OAuth2Options = {
            "oauth2_auto_refresh": "oauth2_auto_refresh",
            "oauth2_auth_args": "oauth2_auth_args",
            "oauth2_auth_url": "oauth2_auth_url",
            "client_id": "oauth2_client_id",
            "client_secret": "oauth2_client_secret",
            "oauth2_redirect_url": "oauth2_redirect_url",
            "oauth2_refresh_token": "oauth2_refresh_token",
            "oauth2_scopes": "oauth2_scopes",
            "oauth2_token_url": "oauth2_token_url",
            "password": "password",
            "username": "username",
        };

        #! Maps standard option names to SAP REST option names
        const OAuth2StandardToSapOptionMap = map {$1.value: $1.key}, OAuth2Options.pairIterator();

        #! Different OAuth2 option map; standard name => our name
        const OAuth2DifferentOptionMap = map {$1.value: $1.key}, OAuth2Options.pairIterator(), $1.key != $1.value;
    }

    #! creates the Sap4HanaRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL (potentially with password info)
        @param attributes various attributes. See below
        @param options connection options

        See @ref AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url, hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, options) {
    }

    #! creates the Sap4HanaRestConnection object
    /** @param config with the following keys:
        - name (required string): the connection name
        - display_name (optional string): the display name
        - short_desc (optional string): a short description in plain text
        - desc (optional string): a long description with markdown formatting
        - url (required string): the connection URL
        - opts (optional hash): connection options
        - logger (optional LoggerInterface object): logger for the connection
        @param attr optional connection attributes
        - monitor (optional bool): should the connection be monitored? Default: True
        - enabled (optional bool): is the connection enabled? Default: True
        - locked (optional bool): is the connection locked? Default: False
        - debug_data (optional bool): debug data? Default: False
        - tags (optional hash): tags for the connection; no default value

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option or attribute
    */
    constructor(hash<auto> config, *hash<auto> attr) : RestConnection(config, attr) {
    }

    #! returns \c "sap4hanarests"
    string getType() {
        return "sap4hanarests";
    }

    #! Returns the OAuth2 option name for this connection
    /** @since %SapRestClient 2.0
    */
    string getOAuth2OptionName(string opt) {
        return OAuth2StandardToSapOptionMap{opt} ?? opt;
    }

    #! Returns OAuth2 options in a standard format
    /** @since %SapRestClient 2.0
    */
    hash<auto> getOAuth2Options() {
        hash<auto> rv;
        foreach hash<auto> i in (OAuth2Options.pairIterator()) {
            rv{i.value} = real_opts{i.key};
        }
        return rv;
    }

    #! returns a @ref Sap4HanaRestClient::Sap4HanaRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref Sap4HanaRestClient::Sap4HanaRestClient "Sap4HanaRestClient" object
    */
    private Sap4HanaRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new Sap4HanaRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
