# -*- mode: qore; indent-tabs-mode: nil -*-
#! Qore DiscordDataProvider module definition

/** DiscordMessageCreateDataType.qc Copyright 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#! Contains all public definitions in the DiscordDataProvider module
public namespace DiscordDataProvider {
#! Discord message create payload data type
public class DiscordMessageCreatePayloadDataType inherits HashDataType {
    public {
        #! Field descriptions
        const Fields = {
            "id": {
                "type": AbstractDataProviderTypeMap."string",
                "desc": "The ID of the message",
            },
            "channel_id": {
                "type": AbstractDataProviderTypeMap."string",
                "desc": "The ID of the channel the message was sent in",
            },
            "author": {
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "The author of this message (not guaranteed to be a valid user, see below)",
            },
            "content": {
                "type": AbstractDataProviderTypeMap."*string",
                "desc": "Content of the message",
            },
            "timestamp": {
                "type": AbstractDataProviderTypeMap."date",
                "desc": "When this message was sent",
            },
            "edited_timestamp": {
                "type": AbstractDataProviderTypeMap."*date",
                "desc": "When this message was edited (or null if never)",
            },
            "tts": {
                "type": AbstractDataProviderTypeMap."bool",
                "desc": "Whether this was a TTS message",
            },
            "mention_everyone": {
                "type": AbstractDataProviderTypeMap."bool",
                "desc": "Whether this message mentions everyone",
            },
            "mentions": {
                # array of user objects, with an additional partial member field
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Users specifically mentioned in the message",
            },
            "mention_roles": {
                # array of roles
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Roles specifically mentioned in this message",
            },
            "mention_channels": {
                # array of channel mention objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Channels specifically mentioned in this message",
            },
            "attachments": {
                # array of attachment objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Any attached files",
            },
            "embeds": {
                # array of embed objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Any embedded content",
            },
            "reactions": {
                # array of reaction objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Reactions to the message",
            },
            "nonce": {
                # integer or string
                "type": AbstractDataProviderTypeMap."auto",
                "desc": "used for validating a message was sent",
            },
            "pinned": {
                "type": AbstractDataProviderTypeMap."bool",
                "desc": "Whether this message is pinned",
            },
            "webhook_id": {
                "type": AbstractDataProviderTypeMap."*string",
                "desc": "If the message is generated by a webhook, this is the webhook's id",
            },
            "type": {
                "type": AbstractDataProviderTypeMap."int",
                "desc": "Type of message",
            },
            "activity": {
                # message activity object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Sent with Rich Presence-related chat embeds",
            },
            "application": {
                # partial application object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Sent with Rich Presence-related chat embeds",
            },
            "application_id": {
                "type": AbstractDataProviderTypeMap."*string",
                "desc": "If the message is an Interaction or application-owned webhook, this is the id of the "
                    "application",
            },
            "message_reference": {
                # message reference object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Data showing the source of a crosspost, channel follow add, pin, or reply message",
            },
            "flags": {
                "type": AbstractDataProviderTypeMap."*int",
                "desc": "Message flags combined as a bitfield",
            },
            "referenced_message": {
                # message object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "The message associated with the message_reference",
            },
            "interaction": {
                # message interaction object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Sent if the message is a response to an Interaction",
            },
            "thread": {
                # channel object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "The thread that was started from this message, includes thread member object",
            },
            "components": {
                # array of message components
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Sent if the message contains components like buttons, action rows, or other interactive "
                    "components",
            },
            "sticker_items": {
                # array of message sticker item objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Sent if the message contains stickers",
            },
            "stickers": {
                # array of sticker objects
                "type": AbstractDataProviderTypeMap."*list",
                "desc": "Deprecated: the stickers sent with the message",
            },
            "position": {
                "type": AbstractDataProviderTypeMap."*int",
                "desc": "A generally increasing integer (there may be gaps or duplicates) that represents the "
                    "approximate position of the message in a thread, it can be used to estimate the relative "
                    "position of the message in a thread in company with `total_message_sent` on parent thread",
            },
            "role_subscription_data": {
                # role subscription data object
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Data of the role subscription purchase or renewal that prompted this "
                    "`ROLE_SUBSCRIPTION_PURCHASE` message",
            },
            "resolved": {
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Data for users, members, channels, and roles in the message's auto-populated select menus",
            },

            "guild_id": {
                "type": AbstractDataProviderTypeMap."*string",
                "desc": "ID of the guild the message was sent in - unless it is an ephemeral message",
            },
            "member": {
                "type": AbstractDataProviderTypeMap."*hash",
                "desc": "Member properties for this message's author. Missing for ephemeral messages and messages "
                    "from webhooks",
            },
        };
    }

    #! Creates the object
    constructor() {
        map addField(new QoreDataField($1.key, $1.value.desc, $1.value.type, $1.value.default_value,
            $1.value.allowed_values)), Fields.pairIterator();
    }
}

#! Discord user info data type
public class DiscordMessageCreateEventDataType inherits DiscordGatewayEventBaseDataType {
    public {
        #! Field descriptions
        const Fields = {
            "d": {
                "type": new DiscordMessageCreatePayloadDataType(),
                "desc": "The message create information",
            },
        };
    }

    #! Creates the object
    constructor() {
        map addField(new QoreDataField($1.key, $1.value.desc, $1.value.type, $1.value.default_value,
            $1.value.allowed_values)), Fields.pairIterator();
    }
}
}
