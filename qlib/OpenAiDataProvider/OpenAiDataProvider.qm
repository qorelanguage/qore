# -*- mode: qore; indent-tabs-mode: nil -*-
#! Qore OpenAiDataProvider module definition

/*  OpenAiDataProvider.qm Copyright 2024 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 1.0
# assume local scope for variables, do not use "$" signs
%new-style
# require type definitions everywhere
%require-types
# strict argument handling
%strict-args
# enable all warnings
%enable-all-warnings

%requires(reexport) DataProvider
%requires(reexport) OpenAiRestClient
%requires FileLocationHandler

module OpenAiDataProvider {
    version = "1.3";
    desc = "user module providing a data provider API for OpenAI services";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
    init = sub () {
        # register the data provider factory
        DataProvider::registerFactory(new OpenAiDataProviderFactory());

        # register the data provider application
        DataProviderActionCatalog::registerApp(<DataProviderAppInfo>{
            "name": OpenAiDataProvider::AppName,
            "display_name": "OpenAI Services",
            "short_desc": "OpenAI services",
            "desc": "OpenAI services",
            "scheme": "openai",
            "logo": OpenAiLogo,
            "logo_file_name": "openai-logo.svg",
            "logo_mime_type": MimeTypeSvg,
        });

        # register all supported actions
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/multi-chat",
            "action": "multi-chat",
            "display_name": "Multi Chat",
            "short_desc": "Chat with an AI model by sending multiple messages at once and potentially getting "
                "multiple replies",
            "desc": "Chat with an AI model by sending multiple messages at once and potentially getting multiple "
                "replies",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiChatCompletionRequestType.getFields(){"model", "messages"}, {
                    "preselected": True,
                    "required": True,
                }
            ) + DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiChatCompletionRequestType.getFields() - ("model", "messages")
            ),
            "output_type": OpenAiChatCompletionDataProvider::ResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/simple-chat",
            "action": "simple-chat",
            "display_name": "Simple Chat",
            "short_desc": "Chat with an AI model by sending a single message and receiving a single reply",
            "desc": "Chat with an AI model by sending a single message and receiving a single reply",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiSimpleChatCompletionRequestType.getFields(){"model", "role", "content"}, {
                    "preselected": True,
                    "required": True,
                }
            ) + DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiSimpleChatCompletionRequestType.getFields() - ("model", "role", "content")
            ),
            "output_type": OpenAiChatCompletionDataProvider::ResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/upload-file-from-location",
            "action": "upload-file",
            "display_name": "Upload File",
            "short_desc": "Upload a file for an assistant, for fine tuning, or for batch processing",
            "desc": "Upload a file for an assistant, for fine tuning, or for batch processing",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiFileUploadFromLocationRequestType.getFields(){"purpose", "location"}, {
                    "preselected": True,
                    "required": True,
                }
            ),
            "output_type": OpenAiFileUploadFromLocationDataProvider::ResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/files/{file}/delete",
            "action": "delete-file",
            "display_name": "Delete File",
            "short_desc": "Delete a file stored on OpenAI",
            "desc": "Delete a file stored on OpenAI",
            "action_code": DPAT_API,
            "path_vars": {
                "file": <DataProviderPathVarInfo>{
                    "display_name": "File",
                    "short_desc": "The ID or OpenAI file name of the file to delete",
                    "desc": "The ID or OpenAI file name of the file to delete",
                    "example_value": "file-XlKc5wjQpWHfXbKwhCZeAuul",
                },
            },
            "output_type": OpenAiDeleteResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/create-assistant",
            "action": "create-assistant",
            "display_name": "Create an Assistant",
            "short_desc": "Create an assistant",
            "desc": "Create an assistant with a model and instructions",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiAssistantCreateRequestType.getFields(){"model",}, {
                    "preselected": True,
                    "required": True,
                }
            ) + DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiAssistantCreateRequestType.getFields() - ("model",)
            ),
            "output_type": OpenAiFileUploadFromLocationDataProvider::ResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/assistants/{assistant}/update",
            "action": "update-assistant",
            "display_name": "Update Assistant",
            "short_desc": "Update an assistant",
            "desc": "Update an assistant",
            "action_code": DPAT_API,
            "path_vars": {
                "assistant": <DataProviderPathVarInfo>{
                    "display_name": "Assistant",
                    "short_desc": "The ID of the assistant to update",
                    "desc": "The ID of the assistant to update",
                    "example_value": "asst_pOVJLN6z0hTsW1UKpALakcLA",
                },
            },
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiAssistantUpdateRequestType.getFields()
            ),
            "output_type": OpenAiDeleteResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/assistants/{assistant}/delete",
            "action": "delete-assistant",
            "display_name": "Delete Assistant",
            "short_desc": "Delete an assistant",
            "desc": "Delete an assistant",
            "action_code": DPAT_API,
            "path_vars": {
                "assistant": <DataProviderPathVarInfo>{
                    "display_name": "Assistant",
                    "short_desc": "The ID of the assistant to delete",
                    "desc": "The ID of the assistant to delete",
                    "example_value": "asst_pOVJLN6z0hTsW1UKpALakcLA",
                },
            },
            "output_type": OpenAiDeleteResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/threads/create",
            "action": "create-thread",
            "display_name": "Create a Thread",
            "short_desc": "Create a thread",
            "desc": "Create a thread with the given messages",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiThreadCreateRequestType.getFields(){"messages",}, {
                    "preselected": True,
                    "required": True,
                }
            ) + DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiThreadCreateRequestType.getFields() - ("messages",)
            ),
            "output_type": OpenAiFileUploadFromLocationDataProvider::ResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/threads/update",
            "action": "update-thread",
            "display_name": "Update Thread",
            "short_desc": "Update a thread",
            "desc": "Update a thread",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiThreadUpdateRequestType.getFields(){"thread_id",}, {
                    "preselected": True,
                    "required": True,
                }
            ) + DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiThreadUpdateRequestType.getFields() - "thread_id"
            ),
            "output_type": OpenAiDeleteResponseType,
        });
        DataProviderActionCatalog::registerAction(<DataProviderActionInfo>{
            "app": OpenAiDataProvider::AppName,
            "path": "/threads/delete",
            "action": "delete-thread",
            "display_name": "Delete Thread",
            "short_desc": "Delete a thread",
            "desc": "Delete a thread",
            "action_code": DPAT_API,
            "options": DataProviderActionCatalog::getActionOptionFromFields(
                OpenAiThreadIdRequestType.getFields(){"thread_id",}, {
                    "preselected": True,
                    "required": True,
                }
            ),
            "output_type": OpenAiDeleteResponseType,
        });
    };
}

/** @mainpage OpenAiDataProvider Module

    @tableofcontents

    @section openaidataproviderintro Introduction to the OpenAiDataProvider Module

    The %OpenAiDataProvider module provides a @ref dataproviderintro "data provider" API for OpenAI services.

    @section openaidataprovider_relnotes Release Notes

    @subsection openaidataprovider_v1_0 OpenAiDataProvider v1.0
    - initial release of the module
*/

#! contains all public definitions in the OpenAiDataProvider module
public namespace OpenAiDataProvider {
#! OpenAI app name
public const AppName = "OpenAI";

#! Logo file
const OpenAiLogo = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">
<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 320 320\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">
    <path id=\"path14\" d=\"M297.06,130.97C304.32,109.18 301.82,85.31 290.21,65.49C272.75,35.09 237.65,19.45 203.37,26.81C188.12,9.63 166.21,-0.14 143.24,-0C108.2,-0.08 77.11,22.48 66.33,55.82C43.82,60.43 24.39,74.52 13.02,94.49C-4.57,124.81 -0.56,163.03 22.94,189.03C15.68,210.82 18.18,234.69 29.79,254.51C47.25,284.91 82.35,300.55 116.63,293.19C131.87,310.37 153.79,320.14 176.76,319.99C211.82,320.08 242.92,297.5 253.7,264.13C276.21,259.52 295.64,245.43 307.01,225.46C324.58,195.14 320.56,156.95 297.07,130.95L297.06,130.97ZM176.78,299.08C162.75,299.1 149.16,294.19 138.39,285.2C138.88,284.94 139.73,284.47 140.28,284.13L204,247.33C207.26,245.48 209.26,242.01 209.24,238.26L209.24,148.43L236.17,163.98C236.46,164.12 236.65,164.4 236.69,164.72L236.69,239.11C236.65,272.19 209.86,299.01 176.78,299.08ZM47.94,244.05C40.91,231.91 38.38,217.68 40.79,203.87C41.26,204.15 42.09,204.66 42.68,205L106.4,241.8C109.63,243.69 113.63,243.69 116.87,241.8L194.66,196.88L194.66,227.98C194.68,228.3 194.53,228.61 194.28,228.81L129.87,266C101.18,282.52 64.54,272.7 47.95,244.05L47.94,244.05ZM31.17,104.96C38.17,92.8 49.22,83.5 62.38,78.67C62.38,79.22 62.35,80.19 62.35,80.87L62.35,154.48C62.33,158.22 64.33,161.69 67.58,163.54L145.37,208.45L118.44,224C118.17,224.18 117.83,224.21 117.53,224.08L53.11,186.86C24.48,170.28 14.66,133.65 31.16,104.97L31.17,104.96ZM252.43,156.45L174.64,111.53L201.57,95.99C201.84,95.81 202.18,95.78 202.48,95.91L266.9,133.1C295.58,149.67 305.41,186.36 288.84,215.04C281.83,227.18 270.79,236.48 257.64,241.32L257.64,165.51C257.67,161.77 255.68,158.31 252.44,156.45L252.43,156.45ZM279.23,116.11C278.76,115.82 277.93,115.32 277.34,114.98L213.62,78.18C210.39,76.29 206.39,76.29 203.15,78.18L125.36,123.1L125.36,92C125.34,91.68 125.49,91.37 125.74,91.17L190.15,54.01C218.84,37.46 255.52,47.31 272.06,76.01C279.05,88.13 281.58,102.32 279.21,116.11L279.23,116.11ZM110.72,171.54L83.78,155.99C83.49,155.85 83.3,155.57 83.26,155.25L83.26,80.86C83.28,47.74 110.15,20.9 143.27,20.92C157.28,20.92 170.84,25.84 181.61,34.8C181.12,35.06 180.28,35.53 179.72,35.87L116,72.67C112.74,74.52 110.74,77.98 110.76,81.73L110.72,171.52L110.72,171.54ZM125.35,140L160,119.99L194.65,139.99L194.65,180L160,200L125.35,180L125.35,140Z\" style=\"fill:white;fill-rule:nonzero;\"/>
</svg>";
}
