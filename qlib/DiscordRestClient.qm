# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DiscordRestClient.qm Qore user module for calling Discord REST services

/*  DiscordRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module DiscordRestClient {
    version = "1.0";
    desc = "user module for calling Discord REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("discord", DiscordRestConnection::ConnectionScheme);
    };
}

/** @mainpage DiscordRestClient Module

    @tableofcontents

    @section discordrestclientintro DiscordRestClient Introduction

    The %DiscordRestClient module provides an API for calling Discord REST API services.

    To use this module, use \c "%requires DiscordRestClient" in your code.

    All the public symbols in the module are defined in the DiscordRestClient namespace.

    The main classes are:
    - @ref DiscordRestClient::DiscordRestClient "DiscordRestClient":
      this class provides the REST client API for communuication with the Discord REST
      API; it also automates authentication and authorization to the target
    - @ref DiscordRestClient::DiscordRestConnection "DiscordRestConnection":
      provides a REST connection object to Discord cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires DiscordRestClient
%requires ConnectionProvider

DiscordRestClient rest = get_connection("my-discord-connection");
hash<auto> ans = rest.get("/calendar/users/me/calendarList");
printf("%N\n", ans.body);
    @endcode

    @section discordrestclientrelnotes Release Notes

    @subsection discordrestclientv1_0 DiscordRestClient v1.0
    - the initial version of the %DiscordRestClient module
*/

#! the DiscordRestClient namespace contains all the objects in the DiscordRestClient module
public namespace DiscordRestClient {
#! this class provides the REST client API for communication with Discord servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.
*/
public class DiscordRestClient inherits RestClient::RestClient {
    public {
        #! Default Discord REST API URL
        const DefaultUrl = "https://discord.com/api";

        #! Default authorization request URL
        const DefaultAuthUrl = "https://discord.com/oauth2/authorize";

        #! Default OAuth2 grant type
        const DefaultGrantType = "authorization_code";

        #! Default token request URL
        const DefaultTokenUrl = "https://discord.com/api/oauth2/token";

        #! Default OAuth2 scopes
        const DefaultScopes = ("bot", "guilds", "identify", "messages.read");

        #! Default OAuth2 auth args
        const DefaultAuthArgs = {
            /** permissions:
                - Read Messages/View Channels
                - Send Messages
                - Create Public Threads
                - Create Private Threads
                - Send Messages in Threads
                - Attach Files
                - Add Reactions
            */
            "permissions": 377957157952,
        };

        #! Default "data" option value
        const DefaultData = "json";

        #! Default constructor options
        const DefaultOptions = {
            "url": DefaultUrl,
            "oauth2_auth_args": DefaultAuthArgs,
            "oauth2_auth_url": DefaultAuthUrl,
            "oauth2_grant_type": DefaultGrantType,
            "oauth2_token_url": DefaultTokenUrl,
            "oauth2_scopes": DefaultScopes,
            "data": DefaultData,
        };

        #! Default Discord ping method
        const DefaultDiscordPingMethod= "GET";

        #! Default Discord ping headers
        const DefaultDiscordPingHeaders = {
            "Accept": MimeTypeJson,
        };
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
DiscordRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class; note
        that the URL is set by default if not provided (see @ref DefaultUrl)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect)
            : RestClient(DiscordRestClient::getOptions(opts), True) {
    }

    #! returns options for @ref DiscordRestClient::DiscordRestClient::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        return DefaultOptions + opts + {"url": DefaultUrl};
    }
}

#! Class for Discord REST connections; returns @ref DiscordRestClient objects
/** This class implements all options of @ref RestClient::RestClientConnection "RestClientConnection";  in addition,
    this class provides the following default values for the following options:
    - \c oauth2_auth_args: <tt>access_type: offline</tt>
    - \c oauth2_auth_url: \c https://accounts.Discord.com/o/oauth2/v2/auth
    - \c oauth2_grant_type: \c authorization_code
    - \c oauth2_token_url: \c https://oauth2.Discordapis.com/token

    @see @ref DiscordRestClient::DiscordRestClient::constructor() for more information on the above options
*/
public class DiscordRestConnection inherits RestClient::RestConnection {
    public {
        #! Default Discord REST API URL
        const DefaultConnectionUrl = "discord://discord.com/api";

        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "cls": Class::forName("DiscordRestConnection"),
            "options": RestConnection::ConnectionScheme.options + {
                "data": RestConnection::ConnectionScheme.options."data"
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultData,
                },
                "oauth2_auth_args": RestConnection::ConnectionScheme.options.oauth2_auth_args
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultAuthArgs,
                },
                "oauth2_auth_url": RestConnection::ConnectionScheme.options.oauth2_auth_url
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultAuthUrl,
                },
                "oauth2_grant_type": RestConnection::ConnectionScheme.options.oauth2_grant_type
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultGrantType,
                },
                "oauth2_scopes": RestConnection::ConnectionScheme.options.oauth2_scopes
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultScopes,
                },
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultTokenUrl,
                },
            },
            "required_options": "token|oauth2_auth_url,oauth2_grant_type,oauth2_token_url,"
                "oauth2_client_id,oauth2_client_secret",
        };
    }

    #! creates the DiscordRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL (potentially with password info)
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url = DiscordRestClient::DefaultUrl,
            hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, options) {
        real_opts = {
            "url": real_url,
        } + urlh{"username", "password"} + opts;
    }

    #! returns \c "discord"
    string getType() {
        return "discord";
    }

%ifdef HaveDiscordDataProvider
    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the DiscordDataProvider and creates the data provider
        # object dynamically
        load_module("DiscordDataProvider");
        return create_object("DiscordDataProvider", get());
    }
%endif

    #! Can be called to set or clear a closure or call reference to be called when options are automatically updated
    /** The closure or call reference must have the following signature:
        <tt><update_options(hash<auto> options)</tt>
    */
    setUpdateOptionsCode(*code update_options) {
        UpdateOptionsInterface::setUpdateOptionsCode(update_options);
        # update the URL immediately if necessary
        if (update_options && opts.url != DefaultConnectionUrl) {
            doUpdateOptions(self, {
                "url": opts.url = DefaultConnectionUrl,
            });
            real_opts.url = real_url = DiscordRestClient::DefaultUrl;
        }
    }

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        children_can_support_apis = True;
    }

    #! returns a @ref DiscordRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref DiscordRestClient object
    */
    private DiscordRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new DiscordRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
