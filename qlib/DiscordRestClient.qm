# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DiscordRestClient.qm Qore user module for calling Discord REST services

/*  DiscordRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module DiscordRestClient {
    version = "1.0";
    desc = "User module for calling Discord REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("discord", DiscordRestConnection::ConnectionScheme);
    };
}

/** @mainpage DiscordRestClient Module

    @tableofcontents

    @section discordrestclientintro DiscordRestClient Introduction

    The %DiscordRestClient module provides an API for calling Discord REST API services.

    To use this module, use \c "%requires DiscordRestClient" in your code.

    All the public symbols in the module are defined in the DiscordRestClient namespace.

    The main classes are:
    - @ref DiscordRestClient::DiscordRestClient "DiscordRestClient":
      this class provides the REST client API for communuication with the Discord REST
      API; it also automates authentication and authorization to the target
    - @ref DiscordRestClient::DiscordRestConnection "DiscordRestConnection":
      provides a REST connection object to Discord cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires DiscordRestClient
%requires ConnectionProvider

DiscordRestClient rest = get_connection("my-discord-connection");
hash<auto> ans = rest.get("/calendar/users/me/calendarList");
printf("%N\n", ans.body);
    @endcode

    @section discordrestclientrelnotes Release Notes

    @subsection discordrestclientv1_0 DiscordRestClient v1.0
    - the initial version of the %DiscordRestClient module
*/

#! the DiscordRestClient namespace contains all the objects in the DiscordRestClient module
public namespace DiscordRestClient {

/** @defgroup discord_channel_types Discord Channel Types
*/
#/@{
#! a text channel within a server
public const DCT_GUILD_TEXT = 0;

#! a direct message between users
public const DCT_DM = 1;

#! a voice channel within a server
public const DCT_GUILD_VOICE = 2;

#! a direct message between multiple users
public const DCT_GROUP_DM = 3;

#! an organizational category that contains up to 50 channels
public const DCT_GUILD_CATEGORY = 4;

#! a channel that users can follow and crosspost into their own server (formerly news channels)
public const DCT_GUILD_ANNOUNCEMENT = 5;

#! a temporary sub-channel within a \c GUILD_ANNOUNCEMENT channel
public const DCT_ANNOUNCEMENT_THREAD = 10;

#! a temporary sub-channel within a \c GUILD_TEXT or \c GUILD_FORUM channel
public const DCT_PUBLIC_THREAD = 11;

#! a temporary sub-channel within a GUILD_TEXT channel
/** Only viewable by those invited and those with the \c MANAGE_THREADS permission
*/
public const DCT_PRIVATE_THREAD = 12;

#! a voice channel for hosting events with an audience
public const DCT_GUILD_STAGE_VOICE = 13;

#! the channel in a hub containing the listed servers
public const DCT_GUILD_DIRECTORY = 14;

#! Channel that can only contain threads
public const DCT_GUILD_FORUM = 15;

#! Channel that can only contain threads, similar to \c GUILD_FORUM channels
public const DCT_GUILD_MEDIA = 16;
#/@}

/** @defgroup discord_permissions Discord Permission Constants
    These constants should be combined in a bitfield when setting Discord permissions
*/
#/@{
#! Allows creation of instant invites (channel type: T, V, S)
public const DP_CREATE_INSTANT_INVITE = (1 << 0);

#! Allows kicking members (channel type: all)
public const DP_KICK_MEMBERS = (1 << 1);

#! Allows banning members (channel type: all)
public const DP_BAN_MEMBERS = (1 << 2);

#! Allows all permissions and bypasses channel permission overwrites (channel type: all)
public const DP_ADMINISTRATOR = (1 << 3);

#! Allows management and editing of channels (channel type: T, V, S)
public const DP_MANAGE_CHANNELS = (1 << 4);

#! Allows management and editing of the guild (channel type: all)
public const DP_MANAGE_GUILD = (1 << 5);

#! Allows for the addition of reactions to messages (channel type: T, V, S)
public const DP_ADD_REACTIONS = (1 << 6);

#! Allows for viewing of audit logs (channel type: all)
public const DP_VIEW_AUDIT_LOG = (1 << 7);

#! Allows for using priority speaker in a voice channel (channel type: V)
public const DP_PRIORITY_SPEAKER = (1 << 8);

#! Allows the user to go live (channel type: V, S)
public const DP_STREAM = (1 << 9);

#! Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels (channel type: T, V, S)
public const DP_VIEW_CHANNEL = (1 << 10);

#! Allows for sending messages in a channel and creating threads in a forum (does not allow sending messages in threads) (channel type: T, V, S)
public const DP_SEND_MESSAGES = (1 << 11);

#! Allows for sending of /tts messages (channel type: T, V, S)
public const DP_SEND_TTS_MESSAGES = (1 << 12);

#! Allows for deletion of other users messages (channel type: T, V, S)
public const DP_MANAGE_MESSAGES = (1 << 13);

#! Links sent by users with this permission will be auto-embedded (channel type: T, V, S)
public const DP_EMBED_LINKS = (1 << 14);

#! Allows for uploading images and files (channel type: T, V, S)
public const DP_ATTACH_FILES = (1 << 15);

#! Allows for reading of message history (channel type: T, V, S)
public const DP_READ_MESSAGE_HISTORY = (1 << 16);

#! Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel (channel type: T, V, S)
public const DP_MENTION_EVERYONE = (1 << 17);

#! Allows the usage of custom emojis from other servers (channel type: T, V, S)
public const DP_USE_EXTERNAL_EMOJIS = (1 << 18);

#! Allows for viewing guild insights (channel type: all)
public const DP_VIEW_GUILD_INSIGHTS = (1 << 19);

#! Allows for joining of a voice channel (channel type: V, S)
public const DP_CONNECT = (1 << 20);

#! Allows for speaking in a voice channel (channel type: V)
public const DP_SPEAK = (1 << 21);

#! Allows for muting members in a voice channel (channel type: V, S)
public const DP_MUTE_MEMBERS = (1 << 22);

#! Allows for deafening of members in a voice channel (channel type: V)
public const DP_DEAFEN_MEMBERS = (1 << 23);

#! Allows for moving of members between voice channels (channel type: V, S)
public const DP_MOVE_MEMBERS = (1 << 24);

#! Allows for using voice-activity-detection in a voice channel (channel type: V)
public const DP_USE_VAD = (1 << 25);

#! Allows for modification of own nickname (channel type: all)
public const DP_CHANGE_NICKNAME = (1 << 26);

#! Allows for modification of other users nicknames (channel type: all)
public const DP_MANAGE_NICKNAMES = (1 << 27);

#! Allows management and editing of roles (channel type: T, V, S)
public const DP_MANAGE_ROLES = (1 << 28);

#! Allows management and editing of webhooks (channel type: T, V, S)
public const DP_MANAGE_WEBHOOKS = (1 << 29);

#! Allows management and editing of emojis, stickers, and soundboard sounds (channel type: all)
public const DP_MANAGE_GUILD_EXPRESSIONS = (1 << 30);

#! Allows members to use application commands, including slash commands and context menu commands. (channel type: T, V, S)
public const DP_USE_APPLICATION_COMMANDS = (1 << 31);

#! Allows for requesting to speak in stage channels. (This permission is under active development and may be changed or removed.) (channel type: S)
public const DP_REQUEST_TO_SPEAK = (1 << 32);

#! Allows for creating, editing, and deleting scheduled events (channel type: V, S)
public const DP_MANAGE_EVENTS = (1 << 33);

#! Allows for deleting and archiving threads, and viewing all private threads (channel type: T)
public const DP_MANAGE_THREADS = (1 << 34);

#! Allows for creating public and announcement threads (channel type: T)
public const DP_CREATE_PUBLIC_THREADS = (1 << 35);

#! Allows for creating private threads (channel type: T)
public const DP_CREATE_PRIVATE_THREADS = (1 << 36);

#! Allows the usage of custom stickers from other servers (channel type: T, V, S)
public const DP_USE_EXTERNAL_STICKERS = (1 << 37);

#! Allows for sending messages in threads (channel type: T)
public const DP_SEND_MESSAGES_IN_THREADS = (1 << 38);

#! Allows for using Activities (applications with the EMBEDDED flag) in a voice channel (channel type: V)
public const DP_USE_EMBEDDED_ACTIVITIES = (1 << 39);

#! Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels (channel type: all)
public const DP_MODERATE_MEMBERS = (1 << 40);

#! Allows for viewing role subscription insights (channel type: all)
public const DP_VIEW_CREATOR_MONETIZATION_ANALYTICS = (1 << 41);

#! Allows for using soundboard in a voice channel (channel type: V)
public const DP_USE_SOUNDBOARD = (1 << 42);

#! Allows the usage of custom soundboard sounds from other servers (channel type: V)
public const DP_USE_EXTERNAL_SOUNDS = (1 << 45);

#! Allows sending voice messages (channel type: T, V, S)
public const DP_SEND_VOICE_MESSAGES = (1 << 46);
#/@}

/** @defgroup discord_message_types Discord Message Types
*/
#/@{
#! this message has been published to subscribed channels (via Channel Following)
public const DMT_CROSSPOSTED = 1 << 0;

#! this message originated from a message in another channel (via Channel Following)
public const DMT_IS_CROSSPOST = 1 << 1;

#! do not include any embeds when serializing this message
public const DMT_SUPPRESS_EMBEDS = 1 << 2;

#! the source message for this crosspost has been deleted (via Channel Following)
public const DMT_SOURCE_MESSAGE_DELETED = 1 << 3;

#! this message came from the urgent message system
public const DMT_URGENT = 1 << 4;

#! this message has an associated thread, with the same id as the message
public const DMT_HAS_THREAD = 1 << 5;

#! this message is only visible to the user who invoked the Interaction
public const DMT_EPHEMERAL = 1 << 6;

#! this message is an Interaction Response and the bot is "thinking"
public const DMT_LOADING = 1 << 7;

#! this message failed to mention some roles and add their members to the thread
public const DMT_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD = 1 << 8;

#! this message will not trigger push and desktop notifications
public const DMT_SUPPRESS_NOTIFICATIONS = 1 << 12;

#! this message is a voice message
public const DMT_IS_VOICE_MESSAGE = 1 << 13;
#/@}

#! this class provides the REST client API for communication with Discord servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.
*/
public class DiscordRestClient inherits RestClient::RestClient {
    public {
        #! Default Discord REST API URL
        const DefaultUrl = "https://discord.com/api";

        #! Default authorization request URL
        const DefaultAuthUrl = "https://discord.com/oauth2/authorize";

        #! Default OAuth2 grant type
        const DefaultGrantType = "authorization_code";

        #! Default token request URL
        const DefaultTokenUrl = "https://discord.com/api/oauth2/token";

        #! Default OAuth2 scopes
        const DefaultScopes = ("bot", "guilds", "identify", "messages.read");

        #! Default OAuth2 auth args
        const DefaultAuthArgs = {
            "permissions": DP_ADMINISTRATOR
                | DP_VIEW_CHANNEL
                | DP_SEND_MESSAGES
                | DP_CREATE_PUBLIC_THREADS
                | DP_CREATE_PRIVATE_THREADS
                | DP_SEND_MESSAGES_IN_THREADS
                | DP_ATTACH_FILES
                | DP_ADD_REACTIONS,
        };

        #! Default "data" option value
        const DefaultData = "json";

        #! Default Discord ping method
        const DefaultPingMethod= "GET";

        #! Default Discord ping path
        const DefaultPingPath = "users/@me";

        #! Default Discord ping headers
        const DefaultPingHeaders = {
            "Accept": MimeTypeJson,
        };

        #! The default API to use
        const DefaultApi = 10;

        #! Default constructor options
        const DefaultOptions = {
            "api": DefaultApi,
            "data": DefaultData,
            "oauth2_auth_args": DefaultAuthArgs,
            "oauth2_auth_url": DefaultAuthUrl,
            "oauth2_grant_type": DefaultGrantType,
            "oauth2_token_url": DefaultTokenUrl,
            "oauth2_scopes": DefaultScopes,
            "ping_headers": DefaultPingHeaders,
            "ping_method": DefaultPingMethod,
            "ping_path": DefaultPingPath,
            "url": DefaultUrl,
        };
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
DiscordRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class; note
        that the URL is set by default if not provided (see @ref DefaultUrl)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect)
            : RestClient(DiscordRestClient::getOptions(opts), False) {
        setAssumedEncoding("UTF-8");
        if (!do_not_connect) {
            if (token) {
                connect();
            } else {
                loginIntern();
            }
        }
    }

    #! Returns @ref True if the response was related to an authorization token error
    /** @return @ref True if the response was related to an authorization token error
    */
    bool isAuthTokenError(int status_code, hash<auto> headers, bool body_decoded, *string body_content_type,
            auto body) {
        return status_code == 401;
    }

    #! returns options for @ref DiscordRestClient::DiscordRestClient::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        return DefaultOptions + opts + {"url": DefaultUrl + "/v" + (opts.api ?? DefaultApi)};
    }
}

#! Class for Discord REST connections; returns @ref DiscordRestClient objects
/** This class implements all options of @ref RestClient::RestClientConnection "RestClientConnection";  in addition,
    this class provides the following default values for the following options:
    - \c oauth2_auth_args: <tt>access_type: offline</tt>
    - \c oauth2_auth_url: \c https://accounts.Discord.com/o/oauth2/v2/auth
    - \c oauth2_grant_type: \c authorization_code
    - \c oauth2_token_url: \c https://oauth2.Discordapis.com/token

    @see @ref DiscordRestClient::DiscordRestClient::constructor() for more information on the above options
*/
public class DiscordRestConnection inherits RestClient::RestConnection {
    public {
        #! Default Discord REST API URL
        const DefaultConnectionUrl = "discord://discord.com/api";

        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "display_name": "Discord REST Connection",
            "short_desc": "A connection to the Discord REST API",
            "desc": "A connection to the Discord REST API",
            "cls": Class::forName("DiscordRestConnection"),
            "auto_url": True,
            "schemes": {
                "discord": True,
            },
            "base_scheme_map": {
                "https": "discord",
            },
            "options": RestConnection::ConnectionScheme.options + {
                "api": <ConnectionOptionInfo>{
                    "display_name": "API Version",
                    "short_desc": "The API version to use",
                    "type": "int",
                    "desc": "The default API version to use",
                    "default_value": DiscordRestClient::DefaultApi,
                },
                "data": RestConnection::ConnectionScheme.options."data"
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultData,
                },
                "oauth2_auth_args": RestConnection::ConnectionScheme.options.oauth2_auth_args
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultAuthArgs,
                },
                "oauth2_auth_url": RestConnection::ConnectionScheme.options.oauth2_auth_url
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultAuthUrl,
                },
                "oauth2_grant_type": RestConnection::ConnectionScheme.options.oauth2_grant_type
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultGrantType,
                },
                "oauth2_scopes": RestConnection::ConnectionScheme.options.oauth2_scopes
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultScopes,
                },
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultTokenUrl,
                },
                "ping_headers": RestConnection::ConnectionScheme.options."ping_headers"
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultPingHeaders,
                },
                "ping_method": RestConnection::ConnectionScheme.options."ping_method"
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultPingMethod,
                },
                "ping_path": RestConnection::ConnectionScheme.options."ping_path"
                + <ConnectionOptionInfo>{
                    "default_value": DiscordRestClient::DefaultPingPath,
                },
            },
            "required_options": "token|oauth2_auth_url,oauth2_grant_type,oauth2_token_url,"
                "oauth2_client_id,oauth2_client_secret",
        };

        #! Data provider subtypes supported
        const DataProviderSubtypeMap = {
            "discordws": {
                "module": "DiscordDataProvider",
                "class": "DiscordGatewayDataProvider",
                "options": "ConstructorOptions",
            },
        };
    }

    private {
        #! Data provider subtype info
        static hash<string, *hash<string, hash<DataProviderOptionInfo>>> subtype_info;

        #! Data provider subtype lock
        static Mutex subtype_lck();
    }

    #! creates the DiscordRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL (potentially with password info)
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url = DiscordRestClient::DefaultUrl,
            hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, options) {
        real_opts = {
            "url": real_url,
        } + urlh{"username", "password"} + opts;
    }

    #! returns \c "discord"
    string getType() {
        return "discord";
    }

    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the DiscordDataProvider and creates the data provider
        # object dynamically
        load_module("DiscordDataProvider");
        return create_object("DiscordDataProvider", get());
    }

    #! Can be called to set or clear a closure or call reference to be called when options are automatically updated
    /** The closure or call reference must have the following signature:
        <tt><update_options(hash<auto> options)</tt>
    */
    setUpdateOptionsCode(*code update_options) {
        UpdateOptionsInterface::setUpdateOptionsCode(update_options);
        # update the URL immediately if necessary
        if (update_options && opts.url != DefaultConnectionUrl) {
            doUpdateOptions(self, {
                "url": opts.url = DefaultConnectionUrl,
            });
            real_url = DiscordRestClient::DefaultUrl;
        }
    }

    #! returns a data provider object for the connection and subtype passed as an argument
    /** @param subtype the subtype of data provider supported, in case the connection can return multiple data
        providers
        @param constructor_options any additional constructor options required by the data provider

        @return a data provider object for the connection and subtype passed as an argument

        @throw DATA-PROVIDER-ERROR this object does not support the data provider API or the given subtype is not
        valid
    */
    private AbstractDataProvider getDataProviderImpl(string subtype, *hash<auto> constructor_options) {
        *hash<auto> conf = DataProviderSubtypeMap{subtype};
        if (!conf) {
            throw "DATA-PROVIDER-ERROR", sprintf("ftp connections do not support data provider subtype %y; supported "
                "subtypes: %y", subtype, getDataProviderSubtypes());
        }
        checkSubtypeInfo();
        hash<auto> opts = getSubtypeOptions(subtype_info{subtype}, constructor_options);
        return create_object(conf."class", opts);
    }

    #! Returns a hash of supported data provider subtypes
    /** @return a hash of supported data provider subtypes
    */
    private *hash<string, *hash<string, hash<DataProviderOptionInfo>>> getDataProviderSubtypesImpl() {
        if (subtype_info) {
            return subtype_info;
        }
        loadSubtypeInfo();
        return subtype_info;
    }

    #! Verifies that subtype info has been loaded from external modules
    private checkSubtypeInfo() {
        if (!subtype_info) {
            loadSubtypeInfo();
        }
    }

    #! Loads subtype info from external modules
    private loadSubtypeInfo() {
        subtype_lck.lock();
        on_exit subtype_lck.unlock();
        # check again inside the lock
        if (subtype_info) {
            return;
        }
        foreach hash<auto> i in (DataProviderSubtypeMap.pairIterator()) {
            load_module(i.value."module");
            Class cls = Class::forName(i.value."option_class" ?? i.value."class");
            subtype_info{i.key} = cls.getConstant(i.value."options").getValue();
        }
    }

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        children_can_support_apis = True;
    }

    #! returns a @ref DiscordRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref DiscordRestClient object
    */
    private DiscordRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new DiscordRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}
}
