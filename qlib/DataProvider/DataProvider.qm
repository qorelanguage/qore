# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file DataProvider.qm module for data access and introspection

/*  DataProvider.qm Copyright 2019 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 0.9.4
# assume local scope for variables, do not use "$" signs
%new-style
# require type definitions everywhere
%require-types
# strict argument handling
%strict-args
# enable all warnings
%enable-all-warnings

%requires(reexport) reflection
%requires(reexport) Util
%requires(reexport) MapperUtil

module DataProvider {
    version = "1.0";
    desc = "user module for data access and introspection";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage DataProvider Module

    @tableofcontents

    @section dataproviderintro Introduction to the DataProvider Module

    The %DataProvider module provides APIs for hierarchical data structures from arbitrary sources to be described,
    queried, introspected, and updated.  It also supports data providers with request-reply semantics such as REST
    schemas or with SOAP messaging.

    The data provider module supports high-performance reading (searching) and writing as well as record creation and
    upserting and transaction management if supported by the underlying data provider implementation as well.

    The %Qore command-line program \c qdp provides a user-friendly interface to data provider functionality.

    This module provides the following primary classes:
    - @ref DataProvider::AbstractDataField "AbstractDataField"
    - @ref DataProvider::AbstractDataProvider "AbstractDataProvider"
    - @ref DataProvider::AbstractDataProviderBulkOperation "AbstractDataProviderBulkOperation"
    - @ref DataProvider::AbstractDataProviderBulkRecordInterface "AbstractDataProviderBulkRecordInterface"
    - @ref DataProvider::AbstractDataProviderFactory "AbstractDataProviderFactory"
    - @ref DataProvider::AbstractDataProviderRecordIterator "AbstractDataProviderRecordIterator"
    - @ref DataProvider::DataProvider "DataProvider"
    - @ref DataProvider::DefaultBulkInserter "DefaultBulkInserter"
    - @ref DataProvider::DefaultBulkUpserter "DefaultBulkUpserter"
    - @ref DataProvider::DefaultBulkRecordIterface "DefaultBulkRecordIterface"
    - @ref DataProvider::DefaultRecordIterator "DefaultRecordIterator"
    - @ref DataProvider::QoreDataField "QoreDataField"

    The following supporting type classes are also provided:
    - @ref DataProvider::AbstractDataProviderType "AbstractDataProviderType"
    - @ref DataProvider::HashDataType "HashDataType"
    - @ref DataProvider::HashDeclDataType "HashDeclDataType"
    - @ref DataProvider::ListDataType "ListDataType"
    - @ref DataProvider::QoreBoolDataType "QoreBoolDataType"
    - @ref DataProvider::QoreBoolDataTypeBase "QoreBoolDataTypeBase"
    - @ref DataProvider::QoreBoolOrNothingDataType "QoreBoolOrNothingDataType"
    - @ref DataProvider::QoreDataType "QoreDataType"
    - @ref DataProvider::QoreDateDataType "QoreDateDataType"
    - @ref DataProvider::QoreDateDataTypeBase "QoreDateDataTypeBase"
    - @ref DataProvider::QoreDateOrNothingDataType "QoreDateOrNothingDataType"
    - @ref DataProvider::QoreFloatDataType "QoreFloatDataType"
    - @ref DataProvider::QoreFloatDataTypeBase "QoreFloatDataTypeBase"
    - @ref DataProvider::QoreFloatOrNothingDataType "QoreFloatOrNothingDataType"
    - @ref DataProvider::QoreHashDataType "QoreHashDataType"
    - @ref DataProvider::QoreIntDataType "QoreIntDataType"
    - @ref DataProvider::QoreIntDataTypeBase "QoreIntDataTypeBase"
    - @ref DataProvider::QoreIntOrNothingDataType "QoreIntOrNothingDataType"
    - @ref DataProvider::QoreListDataType "QoreListDataType"
    - @ref DataProvider::QoreNumberDataType "QoreNumberDataType"
    - @ref DataProvider::QoreNumberDataTypeBase "QoreNumberDataTypeBase"
    - @ref DataProvider::QoreNumberOrNothingDataType "QoreNumberOrNothingDataType"
    - @ref DataProvider::QoreSoftBoolDataType "QoreSoftBoolDataType"
    - @ref DataProvider::QoreSoftBoolNoNullDataType "QoreSoftBoolNoNullDataType"
    - @ref DataProvider::QoreSoftBoolOrNothingDataType "QoreSoftBoolOrNothingDataType"
    - @ref DataProvider::QoreSoftDateDataType "QoreSoftDateDataType"
    - @ref DataProvider::QoreSoftDateNoNullDataType "QoreSoftDateNoNullDataType"
    - @ref DataProvider::QoreSoftDateOrNothingDataType "QoreSoftDateOrNothingDataType"
    - @ref DataProvider::QoreSoftFloatDataType "QoreSoftFloatDataType"
    - @ref DataProvider::QoreSoftFloatNoNullDataType "QoreSoftFloatNoNullDataType"
    - @ref DataProvider::QoreSoftFloatOrNothingDataType "QoreSoftFloatOrNothingDataType"
    - @ref DataProvider::QoreSoftIntDataType "QoreSoftIntDataType"
    - @ref DataProvider::QoreSoftIntNoNullDataType "QoreSoftIntNoNullDataType"
    - @ref DataProvider::QoreSoftIntOrNothingDataType "QoreSoftIntOrNothingDataType"
    - @ref DataProvider::QoreSoftNumberDataType "QoreSoftNumberDataType"
    - @ref DataProvider::QoreSoftNumberNoNullDataType "QoreSoftNumberNoNullDataType"
    - @ref DataProvider::QoreSoftNumberOrNothingDataType "QoreSoftNumberOrNothingDataType"
    - @ref DataProvider::QoreSoftStringDataType "QoreSoftStringDataType"
    - @ref DataProvider::QoreSoftStringOrNothingDataType "QoreSoftStringOrNothingDataType"
    - @ref DataProvider::QoreStringDataType "QoreStringDataType"
    - @ref DataProvider::QoreStringDataTypeBase "QoreStringDataTypeBase"
    - @ref DataProvider::QoreStringOrNothingDataType "QoreStringOrNothingDataType"

    @subsection dataprovider_modules Data Provider Modules

    This module uses the \c "QORE_DATA_PROVIDERS" environment variable to register data provider
    modules.  Each data provider registration module must provide a single public function with the following signature:
    @code{.py}
# returns a hash of connection provider factory names to module names
public hash<string, string> sub get_data_provider_map() { ... }
    @endcode

    Data provider registration modules declared in the \c "QORE_DATA_PROVIDERS" environment variable must
    be separated by the platform-specific @ref Qore::PathSep "PathSep" character as in the following
    examples:

    @par Unix Example
    @verbatim
export QORE_DATA_PROVIDERS=MyConnectionProvider:OtherConnectionProvider
    @endverbatim

    @par Windows CMD.EXE Example
    @verbatim
set QORE_DATA_PROVIDERS=MyConnectionProvider;OtherConnectionProvider
    @endverbatim

    @par Windows PowerShell Example
    @verbatim
$env:QORE_DATA_PROVIDERS="MyConnectionProvider;OtherConnectionProvider"
    @endverbatim

    @section dataprovider_relnotes Release Notes

    @subsection dataprovider_v1_0 DataProvider v1.0
    - initial release of the module
*/

#! contains all public definitions in the DataProvider module
public namespace DataProvider {
}
