# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file GoogleRestClient.qm Qore user module for calling Google REST services

/*  GoogleRestClient.qm Copyright (C) 2020 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 1.19

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module GoogleRestClient {
    version = "1.0";
    desc = "user module for calling Google REST API services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("grests", GoogleRestConnection::ConnectionScheme);
        ConnectionSchemeCache::registerScheme("gcal", GoogleCalendarRestConnection::ConnectionScheme);
    };
}

/** @mainpage GoogleRestClient Module

    @tableofcontents

    @section googlerestclientintro GoogleRestClient Introduction

    The %GoogleRestClient module provides an API for calling Google REST API services.

    To use this module, use \c "%requires GoogleRestClient" in your code.

    All the public symbols in the module are defined in the GoogleRestClient namespace.

    The main classes are:
    - @ref GoogleRestClient::GoogleRestClient "GoogleRestClient":
      this class provides the REST client API for communuication with the Google REST
      API; it also automates authentication and authorization to the target
    - @ref GoogleRestClient::GoogleRestConnection "GoogleRestConnection":
      provides a REST connection object to Google cloud services (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires GoogleRestClient
%requires ConnectionProvider

GoogleRestClient rest = get_connection("my-google-connection");
hash<auto> ans = rest.get("/calendar/users/me/calendarList");
printf("%N\n", ans.body);
    @endcode

    @section Googlerestclientrelnotes Release Notes

    @subsection Googlerestclientv1_0 GoogleRestClient v1.0
    - the initial version of the %GoogleRestClient module
*/

#! the GoogleRestClient namespace contains all the objects in the GoogleRestClient module
public namespace GoogleRestClient {
#! this class provides the REST client API for communication with Google servers
/** You must use an OAuth2 token by setting the \c token and \c oauth2_refresh_token options; the following options
    need to be set as well:
    - \c oauth2_client_id: the OAuth2 client ID
    - \c oauth2_client_secret: the OAuth2 client secret

    Then an external program has to guide the user through using the authorization_grant flow to get a token to use;
    this module does not implement that flow.

    @note This class encodes \c "+" characters in URI paths as \c "%2B", as the Google API server will return a
    <tt>400 Bad Request</tt> error to requests with this character unencoded
*/
public class GoogleRestClient inherits RestClient::RestClient {
    public {
        #! Default Google REST API URL
        const DefaultUrl = "https://www.googleapis.com";

        #! Default addition auth request arguments
        const DefaultAuthArgs = {"access_type": "offline"};

        #! Default authorization request URL
        const DefaultAuthUrl = "https://accounts.google.com/o/oauth2/v2/auth";

        #! Default OAuth2 grant type
        const DefaultGrantType = "authorization_code";

        #! Default token request URL
        const DefaultTokenUrl = "https://oauth2.googleapis.com/token";

        #! Default "data" option value
        const DefaultData = "json";

        #! Default constructor options
        const DefaultOptions = {
            "data": DefaultData,
            "encode_chars": "+",
            "oauth2_auth_args": DefaultAuthArgs,
            "oauth2_auth_url": DefaultAuthUrl,
            "oauth2_grant_type": DefaultGrantType,
            "oauth2_token_url": DefaultTokenUrl,
            "url": DefaultUrl,
        };

        #! API profiles
        const ApiProfiles = {
            "none": {},
            "calendar": {
                "oauth2_scopes": (
                    "https://www.googleapis.com/auth/calendar",
                ),
                "ping_method": DefaultGooglePingMethod,
                "ping_path": "/calendar/v3/users/me/calendarList?maxResults=1",
                "ping_headers": DefaultGooglePingHeaders,
            },
        };

        #! Default Google ping method
        const DefaultGooglePingMethod= "GET";

        #! Default Google ping headers
        const DefaultGooglePingHeaders = {
            "Accept": MimeTypeJson,
        };
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
GoogleRestClient rest(opts);
        @endcode

        @param opts valid options are all the options for the @ref RestClient::RestClient "RestClient" class; note
        that the URL is set by default if not provided (see @ref DefaultUrl); the following options are unique to this
        class:
        - \c api_profile: one of:
          - \c none (no options set)
          - \c calendar (set client options for the Google calendar API)
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
    */
    constructor(hash<auto> opts, *softbool do_not_connect)
            : RestClient(GoogleRestClient::getOptions(opts), True) {
    }

    #! returns options for @ref GoogleRestClient::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        if (*string prof = opts.api_profile) {
            *hash<auto> conf = ApiProfiles{prof};
            if (!exists conf) {
                throw "GOOGLE-RESTCLIENT-ERROR", sprintf("api_profile %y is unknown; known API profiles: %y", prof,
                    keys ApiProfiles);
            }
            # set ping options
            map opts{$1.key} = $1.value, conf.pairIterator(), !opts.hasKey($1.key);
        }
        return DefaultOptions + opts + {
            "url": DefaultUrl,
        };
    }
}

#! Class for Google REST connections; returns @ref GoogleRestClient objects
/** This class implements all options of @ref RestClient::RestClientConnection "RestClientConnection";  in addition,
    this class provides the following default values for the following options:
    - \c oauth2_auth_args: <tt>access_type: offline</tt>
    - \c oauth2_auth_url: \c https://accounts.google.com/o/oauth2/v2/auth
    - \c oauth2_grant_type: \c authorization_code
    - \c oauth2_token_url: \c https://oauth2.googleapis.com/token

    @see @ref GoogleRestClient::GoogleRestClient::constructor() for more information on the above options
*/
public class GoogleRestConnection inherits RestClient::RestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "cls": Class::forName("GoogleRestConnection"),
            "options": RestConnection::ConnectionScheme.options + {
                "api_profile": <ConnectionOptionInfo>{
                    "type": "string",
                    "desc": "the API profile according to the Google API in use; this option will set the REST "
                        "options if they are not already set (`oauth2_scopes`, `ping_body`, `ping_headers`, and "
                        "`ping_method`); valid "
                        "values:\n"
                        "- `none`: no options configured (default)\n"
                        "- `calendar`: set options for the Google calendar API",
                    "default_value": "none",
                    "allowed_values": (
                        <AllowedValueInfo>{
                            "desc": "No options are set",
                            "value": "none",
                        },
                        <AllowedValueInfo>{
                            "desc": "Set REST client options for the Google calendar API",
                            "value": "calendar",
                        },
                    ),
                },
                "data": RestConnection::ConnectionScheme.options."data"
                   + <ConnectionOptionInfo>{
                    "default_value": GoogleRestClient::DefaultData,
                },
                "oauth2_auth_args": RestConnection::ConnectionScheme.options.oauth2_auth_args
                    + <ConnectionOptionInfo>{
                    "default_value": GoogleRestClient::DefaultAuthArgs,
                },
                "oauth2_auth_url": RestConnection::ConnectionScheme.options.oauth2_auth_url
                    + <ConnectionOptionInfo>{
                    "default_value": GoogleRestClient::DefaultAuthUrl,
                },
                "oauth2_grant_type": RestConnection::ConnectionScheme.options.oauth2_grant_type
                    + <ConnectionOptionInfo>{
                    "default_value": GoogleRestClient::DefaultGrantType,
                },
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url
                    + <ConnectionOptionInfo>{
                    "default_value": GoogleRestClient::DefaultTokenUrl,
                },
            },
            "required_options": "token|oauth2_auth_url,oauth2_grant_type,oauth2_token_url,"
                "oauth2_client_id,oauth2_client_secret",
        };
    }

    #! creates the GoogleRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url this aargument is ignored; the default Google API is always used
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url = GoogleRestClient::DefaultUrl,
            hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, GoogleRestConnection::getOptions(options)) {
        real_opts = {
            "url": real_url,
        } + urlh{"username", "password"} + opts;
    }

    #! returns \c "grest"
    string getType() {
        return "grest";
    }

    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the GoogleDataProvider and creates the data provider
        # object dynamically
        load_module("GoogleDataProvider");
        return create_object("GoogleDataProvider", get());
    }

    #! returns options for @ref GoogleRestConnection::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        if (*string prof = opts.api_profile) {
            *hash<auto> conf = (GoogleRestClient::ApiProfiles{prof} - ("encode_chars",));
            if (!exists conf) {
                throw "GOOGLE-RESTCLIENT-ERROR", sprintf("api_profile %y is unknown; known API profiles: %y", prof,
                    keys GoogleRestClient::ApiProfiles);
            }
            # set ping options
            map opts{$1.key} = $1.value, conf.pairIterator(), !opts.hasKey($1.key);
        }
        return opts;
    }

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        #children_can_support_records = True;
        children_can_support_apis = True;
    }

    #! returns a @ref GoogleRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref GoogleRestClient object
    */
    private GoogleRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new GoogleRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }
}

#! Class for Google REST connections; returns @ref GoogleRestClient objects
/** This class implements all options of @ref GoogleRestConnection except \c "api_profile", which is assumed to be
    \c "calendar"

    @see @ref GoogleRestClient::GoogleRestClient::constructor() for more information on the above options
*/
public class GoogleCalendarRestConnection inherits GoogleRestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "cls": Class::forName("GoogleCalendarRestConnection"),
            "options": GoogleRestConnection::ConnectionScheme.options - "api_profile",
        };
    }

    #! creates the GoogleRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url this aargument is ignored; the default Google API is always used
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url = GoogleRestClient::DefaultUrl,
            hash<auto> attributes = {}, hash<auto> options = {})
            : GoogleRestConnection(name, description, url, attributes,
                GoogleRestConnection::getOptions(options + {"api_profile": "calendar"})) {
    }

    #! returns \c "gcal"
    string getType() {
        return "gcal";
    }
}
}
