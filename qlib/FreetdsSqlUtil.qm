
# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file FreetdsSqlUtil.qm Qore user module for working with FreeTDS SQL data

/*  FreetdsSqlUtil.qm Copyright (C) 2015 - 2024 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 1.0

# requires the SqlUtil module
%requires SqlUtil >= 1.5

# requires the Util module
%requires Util >= 1.0

# the implementation is in MssqlSqlUtilBase
%requires MssqlSqlUtilBase

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

module FreetdsSqlUtil {
    version = "1.6";
    desc = "user module for working with FreeTDS SQL data";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

# version history is included below in the docs

/** @mainpage FreetdsSqlUtil Module

    @tableofcontents

    @section freetdssqlutilintro FreetdsSqlUtil Module Introduction

    The %FreetdsSqlUtil module provides a high level API for working with database objects through the \c freetds
    driver.

    Usually this module is loaded on demand from the SqlUtil module, however to use this module
    directly, use \c "%requires FreetdsSqlUtil" in your code.

    All the public symbols in the module are defined in the FreetdsSqlUtil namespace

    @note This module requires the <a href="https://github.com/qorelanguage/module-sybase">freetds</a> binary module
    for communication with MS SQL Server and Sybase databases

    @see @ref mssqlsqlutilbaseintro for implementation information about this module

    @subsection freetdssqlutilv16 FreetdsSqlUtil v1.6
    - implementation moved to the \c MssqlSqlUtilBase module

    @subsection freetdssqlutilv15 FreetdsSqlUtil v1.5
    - fixed the prepend and append column operators
      (<a href="https://github.com/qorelanguage/qore/issues/4548">issue 4548</a>)
    - implemented support for generating queries based on generic expressions using the DataProvider module's generic
      expression support
      (<a href="https://github.com/qorelanguage/qore/issues/4538">issue 4538</a>)

    @subsection freetdssqlutilv141 FreetdsSqlUtil v1.4.2
    - fixed a bug where \c offset and \c limit were not properly supported with MS SQL Server DBs
      (<a href="https://github.com/qorelanguage/qore/issues/4408">issue 4408</a>)
    - fixed a bug where date/time values in other time zones were not bound correctly
      (<a href="https://github.com/qorelanguage/qore/issues/4403">issue 4403</a>)
    - fixed a bug handling transaction savepoints
      (<a href="https://github.com/qorelanguage/qore/issues/4402">issue 4402</a>)
    - allow a \c VARCHAR column to be created without a size, assume a default size
      (<a href="https://github.com/qorelanguage/qore/issues/4399">issue 4399</a>)

    @subsection freetdssqlutilv141 FreetdsSqlUtil v1.4.1
    - added APIs to enable duplicate record creation errors to be detected
      (<a href="https://github.com/qorelanguage/qore/issues/4308">issue 4308</a>)

    @subsection freetdssqlutilv14 FreetdsSqlUtil v1.4
    - added support for the DataProvider module
      (<a href="https://github.com/qorelanguage/qore/issues/3545">issue 3545</a>)

    @subsection freetdssqlutilv131 FreetdsSqlUtil v1.3.1
    - fixed quoting of reserved words in column names in table alignment
      (<a href="https://github.com/qorelanguage/qore/issues/3400">issue 3400</a>)

    @subsection freetdssqlutilv13 FreetdsSqlUtil v1.3
    - added support for serializing and deserializing @ref SqlUtil::AbstractTable "AbstractTable" objects
      (<a href="https://github.com/qorelanguage/qore/issues/2663">issue 2663</a>)

    @subsection freetdssqlutilv121 FreetdsSqlUtil v1.2.1
    - implemented support for custom column operators
      (<a href="https://github.com/qorelanguage/qore/issues/2314">issue 2314</a>)

    @subsection freetdssqlutilv12 FreetdsSqlUtil v1.2
    - fixed a bug where @ref SqlUtil::BLOB columns were created as \c VARBINARY columns instead of \c VARBINARY(MAX)
      (<a href="https://github.com/qorelanguage/qore/issues/1852">issue 1852</a>)
    - implemented @ref cop_trunc_date() operator
      (<a href="https://github.com/qorelanguage/qore/issues/2032">issue 2032</a>)

    @subsection freetdssqlutilv11 FreetdsSqlUtil v1.1
    - implemented the \a force option (i.e. cascade) for dropping code objects
      (<a href="https://github.com/qorelanguage/qore/issues/1314">issue 1314</a>)

    @subsection freetdssqlutilv10 FreetdsSqlUtil v1.0
    - initial release
*/

#! the FreetdsSqlUtil namespace contains all the objects in the FreetdsSqlUtil module
public namespace FreetdsSqlUtil {
#! returns a MssqlTable object corresponding to the arguments
public MssqlTable sub get_table(AbstractDatasource nds, string nname, *hash<auto> opts) {
    return new FreetdsTable(nds, nname, opts);
}

#! returns a MssqlDatabase object corresponding to the arguments
public MssqlDatabase sub get_database(AbstractDatasource nds, *hash<auto> opts) {
    return new FreetdsDatabase(nds, opts);
}

#! provides the Mssql-specific implementation of the AbstractDatabase interface
public class FreetdsDatabase inherits MssqlSqlUtilBase::MssqlDatabase {
    constructor(AbstractDatasource nds, *hash<auto> opts) : MssqlDatabase(nds, opts) {
    }
}

#! provides the Mssql-specific implementation of the SqlUtil::AbstractTable interface
public class FreetdsTable inherits MssqlSqlUtilBase::MssqlTable {
    #! Creates the object with the given arguments
    constructor(AbstractDatasource nds, string nname, *hash<auto> opts) : MssqlTable(nds, nname, opts) {
    }

    #! returns a string for use in SQL queries representing the DB-specific value of the argument
    /** returns NOTHING if the type cannot be converted to an SQL string
    */
    private *string getSqlValueImpl(auto v) {
        switch (v.typeCode()) {
            case NT_FLOAT:
            case NT_INT: return v.toString();

            case NT_NUMBER: return string(v);

            # double any single quotes in strings
            case NT_STRING: v =~ s/'/''/g; return "'" + v + "'";

            case NT_NULL:
            case NT_NOTHING: return "null";

            case NT_BOOLEAN: return v ? "true" : "false";

            case NT_DATE: return sprintf("cast('%s' as datetimeoffset(6))",
                TimeZone::get().date(v).format("YYYY-MM-DD HH:mm:SS.us"));
        }
    }
}
}
