# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file ConnectionProvider.qm Qore user module providing an API for providing connections to %Qore

/*  ConnectionProvider.qm Copyright 2016 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore module
%requires qore >= 1.19

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires Util
%requires Logger
%requires(reexport) DataProvider

module ConnectionProvider {
    version = "1.10";
    desc    = "API for pluggable connection providers to Qore";
    author  = "David Nichols <david.nichols@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/** @mainpage ConnectionProvider Module

    @tableofcontents

    @section connectionproviderintro ConnectionProvider Module Introduction

    The %ConnectionProvider module provides an API for providing pluggable network connections objects
    to Qore.  This module can also be used to provide connection objects and URL strings from identifiers from
    registered connection providers as well.

    To use this module, use \c "%requires ConnectionProvider" in your code.

    All the public symbols in the module are defined in the ConnectionProvider namespace.

    Classes:
    - @ref ConnectionProvider::AbstractConnection "AbstractConnection"
    - @ref ConnectionProvider::AbstractConnectionWithInfo "AbstractConnectionWithInfo"
    - @ref ConnectionProvider::ConnectionSchemeCache "ConnectionSchemeCache"
    - @ref ConnectionProvider::FilesystemConnection "FilesystemConnection"
    - @ref ConnectionProvider::FtpConnection "FtpConnection"
    - @ref ConnectionProvider::HttpConnection "HttpConnection"
    - @ref ConnectionProvider::HttpBasedConnection "HttpBasedConnection"
    - @ref ConnectionProvider::InvalidConnection "InvalidConnection"
    - @ref ConnectionProvider::PollingConnectionMonitor "PollingConnectionMonitor"

    Hashdecls:
    - @ref ConnectionProvider::ConfigInfo "ConfigInfo"
    - @ref ConnectionProvider::ConnectionInfo "ConnectionInfo"
    - @ref ConnectionProvider::ConnectionOptionInfo "ConnectionOptionInfo"
    - @ref ConnectionProvider::ConnectionSchemeInfo "ConnectionSchemeInfo"
    - @ref ConnectionProvider::PingInfo "PingInfo"

    Functions:
    - @ref ConnectionProvider::get_connection() "get_connection()"
    - @ref ConnectionProvider::get_connection_hash() "get_connection_hash()"
    - @ref ConnectionProvider::get_connections() "get_connections()"
    - @ref ConnectionProvider::get_connection_url() "get_connection_url()"

    @subsection connectionprovider_modules Connection Provider Modules

    This module uses the \c "QORE_CONNECTION_PROVIDERS" environment variable to load connection provider
    modules.  Each connection provider module must provide two public functions with the following signatures:
    @code{.py}
# returns a ConnectionProvider::AbstractConnection object for the given identifier or throws an exception
public ConnectionProvider::AbstractConnection sub get_mod_connection(string str) {}
# returns a hash keyed by connection identifiers with values as ConnectionProvider::AbstractConnection objects for all
# connections known to the connection provider
public *hash sub get_mod_connections() {}
    @endcode

    Connection provider modules declared in the \c "QORE_CONNECTION_PROVIDERS" environment variable must
    be separated by the platform-specific @ref Qore::PathSep "PathSep" character as in the following
    examples:

    @par Unix Example
    @verbatim
export QORE_CONNECTION_PROVIDERS=MyConnectionProvider:OtherConnectionProvider
    @endverbatim

    @par Windows CMD.EXE Example
    @verbatim
set QORE_CONNECTION_PROVIDERS=MyConnectionProvider;OtherConnectionProvider
    @endverbatim

    @par Windows PowerShell Example
    @verbatim
$env:QORE_CONNECTION_PROVIDERS="MyConnectionProvider;OtherConnectionProvider"
    @endverbatim

    @section connectionproviderrelnotes Release Notes

    @subsection connectionprovider_1_10 ConnectionProvider 1.10
    - assume connections are up until they are proven to be down
      (<a href="https://github.com/qorelanguage/qore/issues/4789">issue 4789</a>)
    - fixed a bug where the @ref ConnectionProvider::InvalidConnection "InvalidConnection" class would report an
      invalid \c url hash
      (<a href="https://github.com/qorelanguage/qore/issues/4785">issue 4785</a>)
    - added a logger interface to the abstract base connection class
      (<a href="https://github.com/qorelanguage/qore/issues/4776">issue 4776</a>)
    - added a connection-defined capability list to connection info
      (<a href="https://github.com/qorelanguage/qore/issues/4771">issue 4771</a>)

    @subsection connectionprovider_1_9_2 ConnectionProvider 1.9.2
    - fixed a bug where the @ref ConnectionProvider::HttpConnection "HttpConnection" scheme could not be used
      (<a href="https://github.com/qorelanguage/qore/issues/4753">issue 4753</a>)
    - allow connection options designating files to be selected as files
      (<a href="https://github.com/qorelanguage/qore/issues/4725">issue 4725</a>)

    @subsection connectionprovider_1_9_1 ConnectionProvider 1.9.1
    - added a transaction capability flag for data providers to the connection info hash
      (<a href="https://github.com/qorelanguage/qore/issues/4722">issue 4722</a>)

    @subsection connectionprovider_1_9 ConnectionProvider 1.9
    - ensure that exception attributes from ping errors are serializable
      (<a href="https://github.com/qorelanguage/qore/issues/4708">issue 4708</a>)

    @subsection connectionprovider_1_8 ConnectionProvider 1.8
    - added the \c headers option to HTTP connections (@ref ConnectionProvider::HttpConnection "HttpConnection")
      (<a href="https://github.com/qorelanguage/qore/issues/4695">issue 4695</a>)

    @subsection connectionprovider_1_7_4 ConnectionProvider 1.7.4
    - set connection status to \c OK after a successful manual ping operation
      (<a href="https://github.com/qorelanguage/qore/issues/4685">issue 4685</a>)

    @subsection connectionprovider_1_7_3 ConnectionProvider 1.7.3
    - support full ping operations, also with polling, using an authenticated request
      (<a href="https://github.com/qorelanguage/qore/issues/4677">issue 4677</a>)
    - fixed bugs handling child capability attributes in connections
      (<a href="https://github.com/qorelanguage/qore/issues/4656">issue 4656</a>)

    @subsection connectionprovider_1_7_2 ConnectionProvider 1.7.2
    - removed unnecessary extraneous inheritance of @ref Qore::Serializable "Serializable" from the
      @ref ConnectionProvider::AbstractConnectionWithInfo "AbstractConnectionWithInfo" class
    - added support for the \c pre_encoded_urls option in the @ref ConnectionProvider::HttpConnection "HttpConnection"
      class
      (<a href="https://github.com/qorelanguage/qore/issues/4656">issue 4656</a>)

    @subsection connectionprovider_1_7_1 ConnectionProvider 1.7.1
    - non-blocking polling fixes
      (<a href="https://github.com/qorelanguage/qore/issues/4595">issue 4595</a>)

    @subsection connectionprovider_1_7 ConnectionProvider 1.7
    - allow multiple connections to be polled from a single thread; added:
      - @ref ConnectionProvider::PollingConnectionMonitor "PollingConnectionMonitor"
      - @ref ConnectionProvider::AbstractConnection::supportsPollingApi() "AbstractConnection::supportsPollingApi()"
      - @ref ConnectionProvider::AbstractConnection::startPollConnect() "AbstractConnection::startPollConnect()"
      \n
      (<a href="https://github.com/qorelanguage/qore/issues/4595">issue 4595</a>)
    - fixed a bug acquiring a data provider object from connection objects
      (<a href="https://github.com/qorelanguage/qore/issues/4584">issue 4584</a>)

    @subsection connectionprovider_1_6 ConnectionProvider 1.6
    - added data provider capability info to connection info
      (<a href="https://github.com/qorelanguage/qore/issues/4579">issue 4579</a>)

    @subsection connectionprovider_1_5 ConnectionProvider 1.5
    - updated the @ref ConnectionProvider::AbstractConnection::getInfo() "AbstractConnection::getInfo()" method
    - added the @ref ConnectionProvider::AbstractConnection::getExtendedInfo() "AbstractConnection::getExtendedInfo()"
      method

    @subsection connectionprovider_1_4_1 ConnectionProvider 1.4.1
    - connection path options are subjected to environment variable substitution
      (<a href="https://github.com/qorelanguage/qore/issues/4236">issue 4236</a>)

    @subsection connectionprovider_1_4 ConnectionProvider 1.4
    - implemented support for a data provider scheme cache and rich option information for connections
      (<a href="https://github.com/qorelanguage/qore/issues/4025">issue 4025</a>)

    @subsection connectionprovider_1_3 ConnectionProvider 1.3
    - implemented support for serializing connections and removed the \c AbstractConnection::getConstructorInfo() and
      \c AbstractConnection::getConstructorInfoImpl() methods
      (<a href="https://github.com/qorelanguage/qore/issues/3696">issue 3696</a>)
    - implemented support for the data provider API
      (<a href="https://github.com/qorelanguage/qore/issues/3545">issue 3545</a>)

    @subsection connectionprovider_1_2_1 ConnectionProvider 1.2.1
    - implemented support for connection tags as the attribute \c "tags"
      (<a href="https://github.com/qorelanguage/qore/issues/3486">issue 3486</a>)

    @subsection connectionprovider_1_2 ConnectionProvider 1.2
    - the @ref ConnectionProvider::AbstractConnection::constructor() "AbstractConnection::constructor()" refactoring
    - all connection clases have unified constructor
    - old constructors and static make() constructors are deprecated
    - ConnectionProvider::AbstractConnection::parseUrl() is introduced
    - ConnectionProvider::AbstractConnection::getSafeUrl() is not static anymore
    - it allows their reimplementation in the inherited class. It can be used
      to parse strange and unexpected URLs like eg. pure json strings, or Datasource connection strings.

    @subsection connectionprovider_1_1 ConnectionProvider 1.1
    - the @ref ConnectionProvider::AbstractConnection::getConstructorInfo() "AbstractConnection::getConstructorInfo()"
      method (and supporting declarations) was added to allow connections to be created dynamically,
      potentially in another process from a network call
      (<a href="https://github.com/qorelanguage/qore/issues/2628">issue 2628</a>)

    @subsection connectionprovider_1_0_1 ConnectionProvider 1.0.1
    - removed unnecessary serialization from ConnectionProvider::AbstractConnection::get() "AbstractConnection::get()"
      (<a href="https://github.com/qorelanguage/qore/issues/2880">issue 2880</a>)

    @subsection connectionprovider_1_0 ConnectionProvider 1.0
    - the initial version of the ConnectionProvider module
*/

#! The ConnectionProvider namespace
/** All public declarations in the %ConnectionProvider module are defined in this namespace
*/
public namespace ConnectionProvider {
#! information that can be used to dynamically construct a connection object
/** as returned by AbstractConnection::getConstructorInfo()

    @since ConnectionProvider 1.1
*/
public hashdecl ConnectionConstructorInfo {
    #! any module required to be loaded for the constructor call
    *string module;

    #! the name of the constructor's class
    string class_name;

    #! the constructor arguments
    *softlist<auto> args;

    #! code to execute after construction
    /** the code must be compatible with the following parse options:
        - @ref Qore::PO_NEW_STYLE
        - @ref Qore::PO_STRICT_ARGS
        - @ref Qore::PO_REQUIRE_TYPES

        The followinng local variables will be available:
        - <tt>object obj</tt>: the object that was created
        - <tt>bool connect</tt>: if the object should be connected
        - <tt>*hash rtopts</tt>: any runtime options provided
    */
    *string post_processing;

    #! code to execute before construction to preprocess the constructor arguments
    /** the code must be compatible with the following parse options:
        - @ref Qore::PO_NEW_STYLE
        - @ref Qore::PO_STRICT_ARGS
        - @ref Qore::PO_REQUIRE_TYPES

        The following local variables will be available:
        - <tt>reference<*softlist&lt;auto;gt;> args</tt>: a reference to the constructor arguments
        - <tt>bool connect</tt>: if the object should be connected
        - <tt>*hash rtopts</tt>: any runtime options provided
    */
    *string pre_processing;
}

#! connection information hash
/** As returned by @ref ConnectionProvider::AbstractConnection::getInfo() "AbstractConnection::getInfo()"
*/
public hashdecl ConnectionInfo {
    #! the connection name
    string name;

    #! the connection description
    string desc;

    #! the date/time value of the last connection check (or @ref nothing if not checked)
    *date last_check;

    #! a boolean vaue indicating if the connection is a loopback connection
    bool loopback;

    #! a boolean vaue indicating if the connection should be monitored or not
    bool monitor;

    #! the original options used to create the object
    *hash opts;

    #! a string giving the connection's status
    string status;

    #! the connection type
    string type;

    #! a boolean vaue indicating the connection is known to be up (will be @ref False "False" if not checked)
    bool up = False;

    #! the date/time value of the update (or @ref nothing if not updated)
    *date updated;

    #! the URL for the connection including the password
    /** if any present and the \a with_password argument is @ref True "True"
    */
    string url;

    #! a hash of URL information as returned by @ref Qore::parse_url() "parse_url()"
    hash url_hash;

    #! a boolean value indicating if the connection should be enabled or not
    /** This flag does not affect anything by default, it is for user re-implementations
    */
    bool enabled;

    #! a boolean value indicating whether the connection is locked or not
    /** This flag does not affect anything by default, it is for user re-implementations
    */
    bool locked;

    #! a boolean value indicating whether the connection should be subject to data debugging
    /** This flag does not affect anything by default, it is for user re-implementations
    */
    bool debug_data;

    #! user-defined key-value pairs associated with the connection
    hash<auto> tags;

    #! connection-defined feature hash
    *hash<string, bool> features;

    #! if the connection supports the data provider API
    bool has_provider = False;

    #! if the data provider or any of its children support requests (APIs)
    bool children_can_support_apis = False;

    #! if the data provider or any of its children support records
    bool children_can_support_records = False;

    #! if the data provider or any of its children support events
    bool children_can_support_observers = False;

    #! if the data provider or any of its children support messages
    bool children_can_support_messages = False;

    #! if the data provider or any of its children support transaction management
    bool children_can_support_transactions = False;
}

#! config informaton
/** As returned by @ref ConnectionProvider::AbstractConnection::getConfigHash() "AbstractConnection::getConfigHash()"
*/
public hashdecl ConfigInfo {
    string name;  #!< the name of the connection
    string desc;  #!< the description
    string url;   #!< the full URL (including any username & password)
    *hash opts;   #!< the options set on the connection
}

#! ping response info
/** As returned by @ref ConnectionProvider::AbstractConnection::ping() "AbstractConnection::ping()"
*/
public hashdecl PingInfo {
    string name;
    #!< the name of the connection

    string desc;
    #!< the description

    *hash opts;
    #!< the options set on the connection

    string url;
    #!< a safe version of the URL (without passwords)

    bool ok;
    #!< a boolean value giving the result of the ping

    date time;
    #!< a @ref relative_dates "relative date/time value" giving the elapsed time of the ping operation

    string info;
    #!< a string giving the result of the ping (\c "OK" or an error message)

    *hash ping_info;
    #!< an optional free-form hash giving additional info regarding ping operation or the remote system

    #!< if an exception occured, all exception info will be returned here
    *hash<ExceptionInfo> ex;
}

#! returns a URL string for the given identifier if the identifier is known to a registered connection provider or returns the URL itself if the identifier is a valid URL
/** @par Example:
    @code{.py}
string connstr = get_connection_url(str);
    @endcode

    @param str the connection identifier or a valid URL connection string (a URL string is considered valid for this function if it begins with a scheme and has at least one character after the scheme; ex: \c "scheme://x..."

    @return the URL string corresponding to the connection identifier, or, in case the argument is a valid URL string, returns the argument itself

    @throw CONNECTION-ERROR the connection string cannot be matched as an external url identifier by a connection provider module and there is no scheme (i.e. protocol) specification in the string followed by at least one character (ex: \c "scheme://x...")

    @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

    @see @ref connectionprovider_modules
*/
public string sub get_connection_url(string str) {
    return str =~ /^[^:\/]+:\/\/.+/
        ? str
        : get_connection(str).url;
}

#! returns an AbstractConnection object if the identifier is known to a registered connection provider
/** @par Example:
    @code{.py}
string connstr = get_connection(str);
    @endcode

    @param conn the connection identifier

    @return the connection object

    @throw CONNECTION-ERROR the connection string cannot be matched as an external url identifier by a connection provider module

    @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

    @see @ref connectionprovider_modules
*/
public AbstractConnection sub get_connection(string conn) {
    # process connection provider modules in declaration order
    if (ENV.QORE_CONNECTION_PROVIDERS) {
        list el = ();
        list pl = ENV.QORE_CONNECTION_PROVIDERS.split(PathSep);
        foreach string mod in (pl) {
            try {
                return priv_try_get_connection(mod, conn);
            } catch (hash<ExceptionInfo> ex) {
                el += sprintf("%s: %s: %s\n", get_ex_pos(ex), ex.err, ex.desc);
            }
        }
        throw "CONNECTION-ERROR", sprintf("connection identifier %y could not be matched to a known connection; "
            "tried the following connection provider modules: %y; errors: %y", conn, pl, el);
    }

    throw "CONNECTION-ERROR", sprintf("connection identifier %y could not be matched to a known connection; no "
        "connection provider modules are set in the QORE_CONNECTION_PROVIDERS environment variable", conn);
}

#! returns all known connections as a hash keyed by connection identifier; values are AbstractConnection objects; @ref nothing is returned if no connections are known
/** @par Example:
    @code{.py}
*hash<string, AbstractConnection> h = get_connections();
    @endcode

    @param verbose display connection provider module errors on stdout (otherwise errors are ignored)

    @return a hash keyed by connection identifier; values are AbstractConnection objects; @ref nothing is returned if no connections are known

    @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

    @see
    - get_connection_hash()
    - @ref connectionprovider_modules
*/
public *hash<string, AbstractConnection> sub get_connections(*bool verbose) {
    hash<string, AbstractConnection> h();
    # process connection provider modules in declaration order
    if (ENV.QORE_CONNECTION_PROVIDERS) {
        list pl = ENV.QORE_CONNECTION_PROVIDERS.split(PathSep);
        foreach string mod in (pl) {
            try {
                map h.($1.key) = $1.value, priv_try_get_connections(mod).pairIterator(), !exists h.($1.key);
            } catch (hash<ExceptionInfo> ex) {
                if (verbose)
                    printf("%s: %s: %s\n", get_ex_pos(ex), ex.err, ex.desc);
            }
        }
    }

    return h;
}

#! returns a hash of connection information keyed by connection identifier; values are @ref ConnectionInfo hashes as returned by @ref AbstractConnection::getInfo() (with passwords included)
/** @par Example:
    @code{.py}
*hash<string, hash<ConnectionInfo>> h = get_connection_hash();
    @endcode

    @param verbose display connection provider module errors on stdout (otherwise errors are silently ignored)

    @return a hash keyed by connection identifier; values are @ref ConnectionInfo hashes as returned by @ref AbstractConnection::getInfo() (with passwords included); @ref nothing is returned if no connections are known

    @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

    @see
    - get_connections()
    - @ref connectionprovider_modules
*/
public *hash<string, hash<ConnectionInfo>> sub get_connection_hash(*bool verbose) {
    return map {
        $1.key: $1.value.getInfo(True),
    }, get_connections(verbose).pairIterator();
}
} # ConnectionProvider namespace

# private, non-exported namespace
namespace Priv {
*hash sub priv_try_get_connections(string mod) {
    Program p();
    p.loadModule(mod);
    # we cannot make the following call before the Program::loadModule() call or it will break loading modules from relative paths
    p.setScriptPath(sprintf("Qore::ConnectionProvider(%s)", mod));
    return p.callFunction("get_mod_connections");
}

ConnectionProvider::AbstractConnection sub priv_try_get_connection(string mod, string conn) {
    Program p();
    p.loadModule(mod);
    # we cannot make the following call before the Program::loadModule() call or it will break loading modules from relative paths
    p.setScriptPath(sprintf("Qore::ConnectionProvider(%s,%s)", mod, conn));
    return p.callFunction("get_mod_connection", conn);
}
} # Priv nsmrspace
