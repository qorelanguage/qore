# -*- mode: qore; indent-tabs-mode: nil -*-

/*  FilePoller.qm Copyright (C) 2014 - 2022 Qore Technologies s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 1.9

module FilePoller {
    version = "1.0";
    desc = "Filesystem polling solution";
    author = "Petr Vanek <petr@yarpen.cz>";
    url = "http://qore.org";
    license = "MIT";
    init = sub () {
        # register the data provider factory
        DataProvider::registerFactory(new FilePollerDataProviderFactory());
        # register the event data type
        DataProvider::registerType("qore/file/event", new FilePollerFileEventInfoDataType());
    };
}

%new-style
%require-types
%strict-args
%enable-all-warnings
%allow-weak-references

%requires Util
%requires DataProvider

/** @mainpage FilePoller Module

    @tableofcontents

    @section filepollerintro FilePoller Module Introduction

    The %FilePoller module provides a high level API for file polling.

    Available classes:
    - @ref FilePoller::FileDelayedPollerDataProvider "FileDelayedPollerDataProvider"
    - @ref FilePoller::FilePoller "FilePoller"
    - @ref FilePoller::FilePollerDataProvider "FilePollerDataProvider"
    - @ref FilePoller::FilePollerDataProviderBase "FilePollerDataProviderBase"
    - @ref FilePoller::FilePollerDataProviderFactory "FilePollerDataProviderFactory"

    @section filepollersandbox FilePoller Module in Sandboxed Programs

    The @ref FilePoller::FilePoller "FilePoller" class includes support for running in sandboxed Program objects with
    the following parse options set:
    - \c PO_NO_THREAD_CONTROL: in this case the \c "start_thread" option is required in
      @ref FilePoller::FilePoller::constructor() "FilePoller::constructor()"
    - \c PO_NO_PROCESS_CONTROL: in this case the \c "sleep" option is required in
      @ref FilePoller::FilePoller::constructor() "FilePoller::constructor()"

    @section file_poller_relnotes FilePoller Release Notes

    @subsection file_poller_1_0 FilePoller v1.0
    - added support for the event-based DataProvider API
      (<a href="https://github.com/qorelanguage/qore/issues/4557">issue 4557</a>)

    @subsection file_poller_0_1_0 FilePoller v0.1.0
    - initial release
*/

#! Main module namespace
public namespace FilePoller {

#! File event constant
public const EVENT_FILE = "file-event";

#! FilePoller file event hash
public hashdecl FilePollerFileEventInfo {
    #! The device inode number the file is on
    int dev;

    #! The inode of the file
    int inode;

    #! The file protection mode
    /** A bitfield of file permissions
    */
    int mode;

    #! The number of hard links to this file
    int nlink;

    #! The UID of the owner of the file
    int uid;

    #! The GID of the owner of the file
    int gid;

    #! The device type number
    int rdev;

    #! The size of the file in bytes
    int size;

    #! The last accessed date/time of the file
    date atime;

    #! The last modified date/time of the file
    date mtime;

    #! The created date/time of the file
    date ctime;

    #! Block size
    /** may be zero if the platform's internal %stat() (2) function does not provide this info
    */
    int blksize;

    #! Blocks allocated for the file
    /** may be zero if the platform's internal %stat() (2) function does not provide this info
    */
    int blocks;

    #! the type of file
    /** one of:
        - \c "REGULAR"
        - \c "DIRECTORY"
        - \c "SYMBOLIC-LINK"
        - \c "BLOCK-DEVICE"
        - \c "CHARACTER-DEVICE"
        - \c "FIFO"
        - \c "SYMBOLIC-LINK"
        - \c "SOCKET"
        - \c "UNKNOWN"
    */
    string type;

    #! a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
    string perm;

    #! The name of the file, link, or directory
    string name;

    #! The entire path of the file
    string filepath;

    #! symbolic link target (if present)
    *string link;
}

#! File polling class
public class FilePoller {
    public {
        #! ascending sort order
        const OrderAsc = 0;
        #! descending sort order
        const OrderDesc = 1;

        #! no sorting
        const SortNone = 0;
        #! sort by name
        const SortName = 1;
        #! sort by date
        const SortDate = 2;

        #! known constructor() options
        const Options = (
            "log_info",
            "log_detail",
            "log_debug",
            "poll_interval",
            "reopt",
            "sleep",
            "sort_order",
            "sort_type",
            "start_thread",
        );

        #! minimum required keys for all constructors
        const RequiredKeys = (
%ifdef PO_NO_PROCESS_CONTROL
            "sleep",
%endif
%ifdef PO_NO_THREAD_CONTROL
            "start_thread",
%endif
        );
    }

    private {
        #! path to monitor
        string path;

        #! file name mask
        string mask;

        #! poll interval in seconds
        int poll_interval = 10;

        #! run flag
        bool runflag = False;

        #! internal fatal error flag
        bool fatal = False;

        #! internal poll counter
        int pollcnt = 0;

        #! file sort type
        int sort_type = SortName;

        #! file sort order
        int sort_order = OrderAsc;

        #! start mutex
        Qore::Thread::Mutex m();

        #! polling tid
        int tid;

        #! stop counter
        Qore::Thread::Counter sc();

        #! regex options
        int reopt;

        #! minimum file age in seconds before the file will be included in the list returned
        *softint minage;

        #! optional info log closure
        *code log_info;

        #! optional detail log closure
        *code log_detail;

        #! optional debug log closure
        *code log_debug;

        #! optional start thread closure
        *code start_thread;

        #! optional sleep closure
        *code sleep;
    }

    #! creates the object
    /** @param n_path the path to poll
        @param n_mask the regular expression mask to use to match the files
        @param n_opts a hash with the following optional keys:
        - \c "log_info": a @ref closure "closure" or @ref call_reference "call reference" taking a single string
          argument as an information message for logging
        - \c "log_detail": a @ref closure "closure" or @ref call_reference "call reference" taking a single string
          argument as a detail information message for logging
        - \c "log_debug": a @ref closure "closure" or @ref call_reference "call reference" taking a single string
          argument as a debug information message for logging
        - \c "minage": the minimum file age in seconds as calculated from the file's "last modified" timestamp
          (\c mtime attribute) before a file will be acquired (default: 0); use this option if files could be
          otherwise read while being written
        - \c "poll_interval": an integer poll interval in seconds; if this option is not supplied, then the default
          \c poll_inteval is 10 seconds
        - \c "reopt": regular expression options; see @ref regex_constants for possible values (ex
          @ref Qore::RE_Caseless for case-insensitive matches)
        - \c "sleep": (required when imported into a context where @ref Qore::PO_NO_PROCESS_CONTROL is set) a
          @ref closure "closure" or @ref call_reference "call reference" to use instead of @ref Qore::sleep() (if not
          set then @ref Qore::sleep() will be used)
        - \c "sort_order": an integer constant giving the sort order; valid options are:
            - @ref OrderAsc "OrderAsc": ascending (the default)
            - @ref OrderDesc "OrderDesc": descending
        - \c "sort_type": an integer constant giving the sort type; valid options are:
            - @ref SortNone "SortNone": no sort
            - @ref SortName "SortName": sort by file name (the default)
            - @ref SortDate "SortDate": sort by the file's last modified date
        - \c "start_thread": (required when imported into a context where @ref Qore::PO_NO_THREAD_CONTROL is set) a
          @ref closure "closure" or @ref call_reference "call reference" for starting threads; must return the integer
          thread ID (if not set then @ref background will be used)

        @throw FILEPOLLER-CONSTRUCTOR-ERROR invalid option
    */
    constructor(string n_path, string n_mask, *hash<auto> n_opts) {
        path = n_path;
        mask = n_mask;

        foreach string k in (RequiredKeys) {
            if (!exists n_opts{k})
                throw "FILEPOLLER-CONSTRUCTOR-ERROR", sprintf("required key %y missing from constructor hash "
                    "argument)", k);
        }

        foreach hash<auto> h in (n_opts.pairIterator()) {
            switch (h.key) {
                case "log_info": {
                    log_info = h.value;
                    break;
                }
                case "log_detail": {
                    log_detail = h.value;
                    break;
                }
                case "log_debug": {
                    log_debug = h.value;
                    break;
                }
                case "minage": {
                    minage = h.value;
                    if (minage < 0)
                        throw "FILEPOLLER-CONSTRUCTOR-ERROR", sprintf("invalid %y = %d; must be a non-negative "
                            "number", h.key, h.value);
                    break;
                }
                case "poll_interval": {
                    poll_interval = h.value;
                    if (poll_interval <= 0)
                        throw "FILEPOLLER-CONSTRUCTOR-ERROR", sprintf("invalid %y = %d; must be a positive number",
                            h.key, h.value);
                    break;
                }
                case "reopt": {
                    reopt = h.value;
                    break;
                }
                case "sleep": {
                    sleep = h.value;
                    break;
                }
                case "sort_order": {
                    sort_order = h.value;
                    break;
                }
                case "sort_type": {
                    sort_type = h.value;
                    break;
                }
                case "start_thread": {
                    start_thread = h.value;
                    break;
                }

                default:
                    throw "FILEPOLLER-CONSTRUCTOR-ERROR", sprintf("unknown option %y; known options: %y", h.key,
                        Options);
            }
        }
    }

    #! stops the polling operation if in progress and destroys the object
    destructor() {
        stop();
    }

    #! returns a list of regular file hashes matching any file name mask set for the object
    /** @param sort the sort option for the list returned
        @param order the ordering of sorted data returned

        @return a list of @ref FilePollerFileEventInfo hashes for each matched file
    */
    list<hash<FilePollerFileEventInfo>> getFiles(int sort = FilePoller::SortNone, int order = FilePoller::OrderAsc) {
        Dir d();
        d.chdir(path);

        # file of file hashes
        list<hash<FilePollerFileEventInfo>> ret =
            map cast<hash<FilePollerFileEventInfo>>($1 + ("filepath": path + DirSep + $1.name)),
                d.listFiles(mask, reopt, True);

        # remove all files that aren't old enough
        if (minage) {
            date now = Qore::now();
            list<hash<FilePollerFileEventInfo>> n = ();
            foreach hash<FilePollerFileEventInfo> h in (ret) {
                if ((now - h.mtime).durationSeconds() < minage) {
                    logDebug("file %y is not old enough (minage: %d, current age: %d)", h.name, minage,
                        (now - h.mtime).durationSeconds());
                    continue;
                }
                n += h;
            }
            ret = n;
        }

        # return list of files
        switch (sort) {
            case FilePoller::SortName:
                # sort by file name
                return order == FilePoller::OrderAsc
                    ? Qore::sort(ret,
                        int sub (hash<FilePollerFileEventInfo> l, hash<FilePollerFileEventInfo> r) {
                            return l.name <=> r.name;
                        }
                    )
                    : sort_descending(ret,
                        int sub (hash<FilePollerFileEventInfo> l, hash<FilePollerFileEventInfo> r) {
                            return l.name <=> r.name;
                        }
                    );

            case FilePoller::SortDate:
                # sort by last modification date
                return order == FilePoller::OrderAsc
                    ? Qore::sort(ret,
                        int sub (hash<FilePollerFileEventInfo> l, hash<FilePollerFileEventInfo> r) {
                            return l.mtime <=> r.mtime;
                        }
                    )
                    : sort_descending(ret,
                        int sub (hash<FilePollerFileEventInfo> l, hash<FilePollerFileEventInfo> r) {
                            return l.mtime <=> r.mtime;
                        }
                    );
        }

        return ret;
    }

    #! starts polling in the background; returns the thread ID of the polling thread
    /** if polling had already been started, then the thread ID of the polling thread is
        returned immediately
    */
    int start() {
        m.lock();
        on_exit m.unlock();

        if (runflag)
            return tid;

        sc.waitForZero();

        runflag = True;
        sc.inc();

%ifdef PO_NO_THREAD_CONTROL
        return tid = call_function(start_thread, \run());
%else
        return tid = (start_thread ? call_function(start_thread, \run()) : background run());
%endif
    }

    #! stops the polling operation, returns when the polling operation has been stopped
    /** if polling was not in progress then this method returns immediately

        @throw THREAD-ERROR this exception is thrown if this method is called from the polling thread since it would
        result in a deadlock

        @see
        - stopNoWait()
        - waitStop()
    */
    stop() {
        if (gettid() == tid && sc.getCount())
            throw "THREAD-ERROR", sprintf("cannot call %s::stop() from the event thread (%d)", self.className(), tid);

        m.lock();
        on_exit m.unlock();

        runflag = False;

        sc.waitForZero();
    }

    #! stops the polling operation, returns immediately
    /** @see
        - stop()
        - waitStop()
    */
    stopNoWait() {
        m.lock();
        on_exit m.unlock();

        runflag = False;
    }

    #! Waits indefinitely for the polling operation to stop
    /** If polling was not in progress then this method returns immediately

        @throw THREAD-ERROR this exception is thrown if this method is called from the event thread since it would
        result in a deadlock

        @see
        - stop()
        - stopNoWait()
    */
    waitStop() {
        if (gettid() == tid)
            throw "THREAD-ERROR", sprintf("cannot call FilePoller::waitStop() from the event thread (%d)", tid);
        sc.waitForZero();
    }

    #! starts the polling operation inline (not in a background thread)
    /**
        @throw FILEPOLLER-ERROR this exception is thrown if polling is already in progress
    */
    startInline() {
        {
            m.lock();
            on_exit m.unlock();

            if (runflag) {
                throw "FILEPOLLER-ERROR", sprintf("the polling thread is already running in TID %d", tid);
            }

            runflag = True;
            tid = gettid();
        }
        sc.inc();
        run();
    }

    #! runs a single poll (useful for checking for errors inline before starting a background thread)
    bool runOnce() {
        ++pollcnt;

        list<hash<FilePollerFileEventInfo>> files = getFiles(sort_type, sort_order);
        if (files) {
            logDebug("got files in %y: %y", path, files);
            fileEvent(files);
            return True;
        }
        return False;
    }

    #! sleeps for the specificed number of seconds
    private fileSleep(softint secs) {
        date end = now_us() + seconds(secs);
        while (True) {
%ifdef PO_NO_PROCESS_CONTROL
            call_function(sleep, 1);
%else
            sleep ? call_function(sleep, 1) : Qore::usleep(250ms);
%endif
            if (!runflag || (now_us() >= end)) {
                break;
            }
        }
    }

    #! starts the polling operation
    private run() {
        on_exit sc.dec();

        while (runflag) {
            try {
                runOnce();
                fileSleep(poll_interval);
            } catch (hash<ExceptionInfo> ex) {
                logInfo("cannot get file list from %y: %s: %s", path, ex.desc, ex.err);
                runflag = False;
                break;
            }
        }

        logInfo("polling finished");
    }

    #! Called for each poll event with a list of all files matched
    /** Calls singleFileEvent() on each file hash in the list
    */
    fileEvent(list<hash<FilePollerFileEventInfo>> files) {
        foreach hash<FilePollerFileEventInfo> event in (files) {
            logInfo("got file: %y", event.name);
            logDebug("file info: %y", event);
            singleFileEvent(event);
        }
    }

    #! called for each matching file individually when matching files are polled
    /** If any error occurs here, the error is logged and the polling operation is retried

        @param event a hash of file data and information with the following keys:
        - \c name: the name of the file, link, or directory
        - \c filepath: the complete path to the file including the directory
        - \c size: the size of the file in bytes
        - \c uid: the UID of the owner of the file
        - \c gid: the GID of the owner of the file
        - \c mode: the permissions / mode of the file
        - \c atime: the last accessed date/time of the file
        - \c mtime: the last modified date/time of the file
        - \c type: the type of file; one of:
          - \c "REGULAR"
          - \c "DIRECTORY"
          - \c "SYMBOLIC-LINK"
          - \c "BLOCK-DEVICE"
          - \c "CHARACTER-DEVICE"
          - \c "FIFO"
          - \c "SYMBOLIC-LINK"
          - \c "SOCKET"
          - \c "UNKNOWN"
        - \c perm: a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
    */
    abstract singleFileEvent(hash<FilePollerFileEventInfo> event);

    #! checks a path on the local file system
    /**
        @throw DIR-ERROR this exception is thrown if the local path does not exist, is not readable, is not a
        directory, or should be writable and is not
    */
    static checkPath(string path, string type, bool write = False) {
        *hash<StatInfo> h = hstat(path);
        if (!exists h)
            throw "DIR-ERROR", sprintf("%y: %s path does not exist", path, type);
        if (h.type != "DIRECTORY")
            throw "DIR-ERROR", sprintf("%y: %s path is not a directory (%s)", path, type, h.type);

        # check if the directory is readable
        if (!is_readable(path))
            throw "DIR-ERROR", sprintf("%y: %s path is not readable", path, type);

        # check if the directory is writable
        if (write && !is_writable(path))
            throw "DIR-ERROR", sprintf("%y: %s path is not writable", path, type);
    }

    #! returns the current poll count
    int getPollCount() {
        return pollcnt;
    }

    #! calls \c "log_info" with important information, if set
    private logInfo(string fmt) {
        if (log_info)
            log_info(vsprintf(fmt, argv));
    }

    #! calls \c "log_detail" with detail information; if set
    private logDetail(string fmt) {
        if (log_detail)
            log_detail(vsprintf(fmt, argv));
    }

    #! calls \c "log_debug" with verbose debugging information; if set
    private logDebug(string fmt) {
        if (log_debug)
            log_debug(vsprintf(fmt, argv));
    }
}

#! Event-based data provider for file events
/** Note that this class will continue to output all matching files in the given folder until they are removed.

    In the assumed scenario, matches files are removed by a single observer in the first notification event
*/
public class FilePollerDataProviderBase inherits DataProvider::AbstractDataProvider {
    public {
        #! Constructor options
        const ConstructorOptions = {
            "path": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(StringType),
                "desc": "A path giving the location of the directory to poll",
                "required": True,
            },

            "mask": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(StringType),
                "desc": "The glob mask to use; will be treated as a regex if `regex` is `true`",
                "default_value": "*",
            },

            "poll_interval": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(IntType),
                "desc": "The interval in seconds between polling for files",
                "default_value": 10,
            },

            "regex": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(BoolType),
                "desc": "If `true` then `mask` is treated as a regular expression instead of a glob pattern",
            },

            "reopt": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(IntType),
                "desc": "A bitfield of regular expression options (`1` = ignore case, `2` = treat EOL as a regular "
                    "character); ignored if `regex` is not `true`",
            },

            "minage": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(IntType),
                "desc": "An integer giving the minimum file age in seconds before the file will be polled; this is "
                    "meant to work around non-atomic file transfer operations",
            },

            "sort_desc": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(BoolType),
                "desc": "Sort descending; if not given then an ascending sort is assumed if a `sort_type` is given",
            },

            "sort_type": <DataProviderOptionInfo>{
                "type": AbstractDataProviderType::get(StringType),
                "desc": "Either `name` or `date` for the data to use for sorting",
            },
        };
    }

    private {
        #! The file poller itself
        EmbeddedFilePoller poller;
    }

    #! Creates the object from constructor options
    constructor(*hash<auto> options) {
        hash<auto> copts = checkOptions("CONSTRUCTOR-ERROR", ConstructorOptions, options);
        string path = remove copts.path;
        string mask = remove copts.mask ?? ConstructorOptions.mask.default_value;
        bool regex = remove copts.regex ?? False;
        if (*string sort_type = remove copts.sort_type) {
            if (sort_type == "name") {
                copts.sort_type = FilePoller::SortName;
            } else if (sort_type == "date") {
                copts.sort_type = FilePoller::SortDate;
            } else {
                throw "CONSTRUCTOR-ERROR", sprintf("expecting \"name\" or \"date\" for the \"sort_type\" option "
                    "value; got %y instead", sort_type);
            }
            if (remove copts.sort_desc) {
                copts.sort_order = FilePoller::OrderDesc;
            }
        } else {
            remove copts.sort_desc;
        }

        if (!regex) {
            # convert glob to a regular expression
            mask =~ s/\*/.*/g;
            mask =~ s/\?/./g;
        }

        copts.log_info = sub (string msg) {
            if (logger) {
                logger.info("%s", msg);
            }
        };
        copts.log_detail = sub (string msg) {
            if (logger) {
                logger.info("%s", msg);
            }
        };
        copts.log_debug = sub (string msg) {
            if (logger) {
                logger.debug("%s", msg);
            }
        };

        poller = new EmbeddedFilePoller(self, path, mask, copts);
    }

    destructor() {
        delete poller;
    }

    string getName() {
        return "filepoller";
    }

    #! Returns a hash of all supported event types
    /** @return a hash of all supported event types

        @note only called if the provider supports the observer pattern / event API
    */
    private hash<string, AbstractDataProviderType> getEventTypesImpl() {
        return {
            EVENT_FILE: new FilePollerFileEventInfoDataType(),
        };
    }
}

#! Event-based data provider for file polling events
/** Note that this class will continue to output all matching files in the given folder until they are removed.

    In the assumed scenario, matches files are removed by a single observer in the first notification event

    The event ID raised for file events is \c "file-event" (see @ref EVENT_FILE)
*/
public class FilePollerDataProvider inherits FilePollerDataProviderBase, DataProvider::Observable {
    public {
        #! Provider info
        const ProviderInfo = <DataProviderInfo>{
            "type": "FilePollerDataProvider",
            "supports_observable": True,
            "constructor_options": ConstructorOptions,
            "event_ids": EVENT_FILE,
        };
    }

    #! Creates the object from constructor options
    constructor(*hash<auto> options) : FilePollerDataProviderBase(options) {
        poller.start();
    }

    private hash<DataProviderInfo> getStaticInfoImpl() {
        return ProviderInfo;
    }
}

#! Event-based data provider for file polling events
/** Note that this class will continue to output all matching files in the given folder until they are removed.

    In the assumed scenario, matches files are removed by a single observer in the first notification event

    The event ID raised for file events is \c "file-event" (see @ref EVENT_FILE)
*/
public class FileDelayedPollerDataProvider inherits FilePollerDataProviderBase, DataProvider::DelayedObservable {
    public {
        #! Provider info
        const ProviderInfo = <DataProviderInfo>{
            "type": "FileDelayedPollerDataProvider",
            "supports_observable": True,
            "constructor_options": ConstructorOptions,
            "event_ids": EVENT_FILE,
        };
    }

    #! Creates the object from constructor options
    constructor(*hash<auto> options) : FilePollerDataProviderBase(options) {
    }

    #! Called when all observers have been added to the object
    /** This method is meant to trigger event generation
    */
    observersReady() {
        poller.start();
    }

    private hash<DataProviderInfo> getStaticInfoImpl() {
        return ProviderInfo;
    }
}

#! File poller event data description
public class FilePollerFileEventInfoDataType inherits HashDataType {
    public {
        #! Markdown descriptions for hashdecl members
        const FieldDescriptions = {
            "dev": "The device inode number the file is on",
            "inode": "The inode of the file",
            "mode": "The file protection mode; a bitfield of file permissions",
            "nlink": "The number of hard links to this file",
            "uid": "The UID of the owner of the file",
            "gid": "The GID of the owner of the file",
            "rdev": "The device type number",
            "size": "the size of the file in bytes",
            "atime": "the last accessed date/time of the file",
            "mtime": "the last modified date/time of the file",
            "ctime": "the created date/time of the file",
            "blksize": "Block size; is zero if the file is zero length or if the platform's internal `stat()` (2) "
                "function does not provide this info",
            "blocks": "Blocks allocated for the file; is zero if the file is zero length or if the platform's "
                "internal `stat()` (2) function does not provide this info",
            "type": "the type of file; one of:\n- `REGULAR`\n- `DIRECTORY`\n- `SYMBOLIC-LINK`\n"
                "- `BLOCK-DEVICE`\n- `CHARACTER-DEVICE`\n- `FIFO`\n- `SYMBOLIC-LINK`\n- `SOCKET`\n"
                "- `UNKNOWN`",
            "perm": "a string giving UNIX-style permissions for the file (ex: `-rwxr-xr-x`)",
            "name": "the name of the file, link, or directory",
            "filepath": "the remote filepath relative to SFILE root directory",
            "link": "symbolic link target (if present)",
        };
    }

    #! Creates the type
    constructor() {
        # add members for base hashdecl
        map addField(new QoreDataField($1.getName(), FieldDescriptions{$1.getName()}, $1.getType(),
            $1.getDefaultValue())), TypedHash::forName("FilePoller::FilePollerFileEventInfo").getMembers();
    }
}

#! The file poller data provider factory
public class FilePollerDataProviderFactory inherits AbstractDataProviderFactory {
    private {
        #! Data provider type info
        static Class cls = new Class("FilePollerDataProvider");

        #! Factory info
        const FactoryInfo = <DataProviderFactoryInfo>{
            "name": "filepoller",
            "desc": "File poller data provider factory",
            "children_can_support_observers": True,
        };
    }

    #! Returns static factory information without \a provider_info
    /** @return static factory information without \a provider_info which is provided by @ref getProviderInfo()
    */
    private hash<DataProviderFactoryInfo> getInfoImpl() {
        return FactoryInfo;
    }

    #! Returns static provider information
    /** @note the \c name and \c children attributes are not returned as they are dynamic attributes
    */
    private hash<DataProviderInfo> getProviderInfoImpl() {
        return FilePollerDataProvider::ProviderInfo;
    }

    #! Returns the class for the data provider object
    private Class getClassImpl() {
        return cls;
    }
}
}

# private namespace; not exported
namespace Priv {
class EmbeddedFilePoller inherits FilePoller {
    private {
        #! The parent observer object
        Observable observable;
    }

    constructor(FilePollerDataProviderBase provider, string path, string mask, *hash<auto> options)
            : FilePoller(path, mask, options) {
        observable := cast<Observable>(provider);
    }

    singleFileEvent(hash<auto> event) {
        observable.notifyObservers("file-event", event);
    }
}
}
