# -*- mode: qore; indent-tabs-mode: nil -*-
# @file ConnectionProvider.qm Qore user module providing an API for providing connections to %Qore

/*  ConnectionProvider.qm Copyright 2016 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# this module requires Qore 0.8.13 or better
%requires qore >= 0.8.13

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires Util

module ConnectionProvider {
    version = "1.0";
    desc    = "API for pluggable connection providers to Qore";
    author  = "David Nichols <david.nichols@qoretechnologies.com>";
    url     = "http://qore.org";
    license = "MIT";
}

/** @mainpage ConnectionProvider Module

    @tableofcontents

    @section connectionproviderintro ConnectionProvider Module Introduction

    The %ConnectionProvider module provides an API for providing pluggable network connections objects
    to Qore.   This module can also be used to provide URL strings from identifiers from registered
    connection providers as well.

    To use this module, use \c "%requires ConnectionProvider" in your code.

    All the public symbols in the module are defined in the ConnectionProvider namespace.

    Class:
    - @ref ConnectionProvider::AbstractConnection "AbstractConnection"

    Functions:
    - @ref ConnectionProvider::get_connection() "get_connection()"
    - @ref ConnectionProvider::get_connections() "get_connections()"
    - @ref ConnectionProvider::get_connection_url() "get_connection_url()"

    @subsection connectionprovider_modules Connection Provider Modules

    This module uses the \c "QORE_CONNECTION_PROVIDERS" environment variable to load connection provider
    modules.  Each connection provider module must provide two public functions with the following signatures:
    @code{.py}
# returns a ConnectionProvider::AbstractConnection object for the given identifier or throws an exception
public ConnectionProvider::AbstractConnection sub get_mod_connection(string str) {}
# returns a hash keyed by connection identifiers with values as ConnectionProvider::AbstractConnection objects for all connections known to the connection provider
public *hash sub get_mod_connections() {}
    @endcode

    Connection provider modules declared in the \c "QORE_CONNECTION_PROVIDERS" environment variable must
    be separated by the platform-specific @ref Qore::PathSep "PathSep" character as in the following
    examples:

    @par Unix Example
    @verbatim
export QORE_CONNECTION_PROVIDERS=MyConnectionProvider:OtherConnectionProvider
    @endverbatim

    @par Windows CMD.EXE Example
    @verbatim
set QORE_CONNECTION_PROVIDERS=MyConnectionProvider;OtherConnectionProvider
    @endverbatim

    @par Windows PowerShell Example
    @verbatim
$env:QORE_CONNECTION_PROVIDERS="MyConnectionProvider;OtherConnectionProvider"
    @endverbatim

    @section connectionproviderrelnotes Release Notes

    @subsection connectionprovider_1_0 ConnectionProvider 1.0
    - the initial version of the ConnectionProvider module
*/

#! the ConnectionProvider namespace contains all the objects in the ConnectionProvider module
public namespace ConnectionProvider {
    #! returns a URL string for the given identifier if the identifier is known to a registered connection provider or returns the URL itself if the identifier is a valid URL
    /** @par Example:
        @code{.py}
string connstr = get_connection_url(str);
        @endcode

        @param str the connection identifier or a valid URL connection string (a URL string is considered valid for this function if it begins with a scheme and has at least one character after the scheme; ex: \c "scheme://x..."

        @return the URL string corresponding to the connection identifier, or, in case the argument is a valid URL string, returns the argument itself

        @throw CONNECTION-ERROR the connection string cannot be matched as an external url identifier by a connection provider module and there is no scheme (i.e. protocol) specification in the string followed by at least one character (ex: \c "scheme://x...")

        @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

        @see @ref connectionprovider_modules
     */
    public string sub get_connection_url(string str) {
        return str =~ /^[^:\/]+:\/\/.+/
            ? str
            : get_connection(str).url;
    }

    #! returns an AbstractConnection object if the identifier is known to a registered connection provider
    /** @par Example:
        @code{.py}
string connstr = get_connection(str);
        @endcode

        @param conn the connection identifier

        @return the connection object

        @throw CONNECTION-ERROR the connection string cannot be matched as an external url identifier by a connection provider module

        @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

        @see @ref connectionprovider_modules
     */
    public AbstractConnection sub get_connection(string conn) {
        # process connection provider modules in declaration order
        if (ENV.QORE_CONNECTION_PROVIDERS) {
            list el = ();
            list pl = ENV.QORE_CONNECTION_PROVIDERS.split(PathSep);
            foreach string mod in (pl) {
                try {
                    return priv_try_get_connection(mod, conn);
                }
                catch (hash ex) {
                    el += sprintf("%s: %s: %s\n", get_ex_pos(ex), ex.err, ex.desc);
                }
            }
            throw "CONNECTION-ERROR", sprintf("connection identifier %y could not be matched to a known connection; tried the following connection provider modules: %y; errors: %y", conn, pl, el);
        }

        throw "CONNECTION-ERROR", sprintf("connection identifier %y could not be matched to a known connection; no connection provider modules are set in the QORE_CONNECTION_PROVIDERS environment variable", conn);
    }

    #! returns all known connections as a hash keyed by connection identifier; values are AbstractConnection objects; @ref nothing is returned if no connections are known
    /** @par Example:
        @code{.py}
*hash h = get_connections();
        @endcode

        @param verbose display connection provider module errors on stdout (otherwise errors are ignored)

        @return a hash keyed by connection identifier; values are AbstractConnection objects; @ref nothing is returned if no connections are known

        @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

        @see
        - get_connection_hash()
        - @ref connectionprovider_modules
     */
    public *hash sub get_connections(*bool verbose) {
        hash h;
        # process connection provider modules in declaration order
        if (ENV.QORE_CONNECTION_PROVIDERS) {
            list pl = ENV.QORE_CONNECTION_PROVIDERS.split(PathSep);
            foreach string mod in (pl) {
                try {
                    map h.($1.key) = $1.value, priv_try_get_connections(mod).pairIterator(), !exists h.($1.key);
                }
                catch (hash ex) {
                    if (verbose)
                        printf("%s: %s: %s\n", get_ex_pos(ex), ex.err, ex.desc);
                }
            }
        }

        return h;
    }

    #! returns a hash of connection information keyed by connection identifier; values are hashes as returned by @ref AbstractConnection::getInfo() (with passwords included)
    /** @par Example:
        @code{.py}
*hash h = get_connection_hash();
        @endcode

        @param verbose display connection provider module errors on stdout (otherwise errors are ignored)

        @return a hash keyed by connection identifier; values are hashes as returned by @ref AbstractConnection::getInfo() (with passwords included); @ref nothing is returned if no connections are known

        @note connection provider modules are processed in the order they are declared with the \c QORE_CONNECTION_PROVIDERS environment variable; connection provider modules must be separated with @ref Qore::PathSep "PathSep" characters

        @see
        - get_connections()
        - @ref connectionprovider_modules
     */
    public *hash sub get_connection_hash(*bool verbose) {
        return map {$1.key: $1.value.getInfo(True)}, get_connections(verbose).pairIterator();
    }

    #! abstract base class for connections
    /** this class can be specialized to provide for user-defined connection types
     */
    public class AbstractConnection {
        public {
            #! connection name
            string name;

            #! connection description
            string desc;

            #! connection URL (potentially with password info)
            string url;

            #! "safe" URL (password information removed)
            string safe_url;

            #! original connection options
            *hash orig_opts;

            #! connection options
            *hash opts;

            #! broken down URL hash (as returned by @ref Qore::parse_url())
            hash urlh;

            #! date/time of last check/ping
            date last_check;

            #! status string; in case of a connection error this string will be the error string
            string status = "not checked";

            #! connection status flag; set by monitoring or explicit pings/connections
            bool up = False;

            #! monitoring flag
            bool monitor;

            #! date/time of last update
            date updated;

            #! set to @ref Qore::True "True" for loopback connections
            bool loopback = False;

            #! optional code for default post-processing of objects created by getImpl(); must take the object created and the connection name as arguments
            static *code post_processing;
        }

        private {
            Mutex m();
        }

        #! creates the AbstractConnection object
        /** @param n_name the name of the connection
            @param n_desc connection description
            @param n_url connection URL (potentially with password info)
            @param n_monitor monitoring flag
            @param n_opts connection options
            @param n_urlh broken down URL hash (as returned by @ref Qore::parse_url())
            @param n_safe_url "safe" URL (password information removed); if not set this will be set automatically by calling @ref getSafeUrl()
         */
        constructor(string n_name, string n_desc, string n_url, bool n_monitor, *hash n_opts, hash n_urlh, *string n_safe_url) {
            name = n_name;
            desc = n_desc;
            url = n_url;
            monitor = n_monitor;
            safe_url = n_safe_url ? n_safe_url : AbstractConnection::getSafeUrl(n_urlh);
            urlh = n_urlh;
            orig_opts = n_opts;
            n_opts = getDefaultOptions() + n_opts;
            if (n_opts) {
                *hash oh = getOptions();
                foreach string opt in (n_opts.keyIterator()) {
                    if (!oh{opt})
                        throw "CONNECTION-ERROR", sprintf("connection %y (type %y url %y) has unknown option %y (known options: %y)", name, urlh.protocol, url, opt, oh.keys());
                }
            }
            opts = n_opts;
        }

        #! creates a "safe" URL string with password information removed
        /** @param urlh broken down URL hash (as returned by @ref Qore::parse_url())

            @return a "safe" URL string with password information removed
         */
        private static string getSafeUrl(hash urlh) {
            string url = urlh.protocol + "://";
            if (urlh.username)
                url += urlh.username + "@";
            url += urlh.host;
            if (urlh.port)
                url += ":" + urlh.port;
            if (urlh.path && urlh.path != "/")
                url += urlh.path;
            return url;
        }

        #! returns a hash with the results of the ping operation
        /** @param throw_exception throw an exception if a connection error occurs

            @return a hash with the following keys:
            - \c "ok": a boolean value giving the result of the ping
            - \c "time": a @ref relative_dates "relative date/time value" giving the elapsed time of the ping operation
            - \c "info": a string giving the result of the ping (\c "OK" or an error message)
         */
        hash ping(bool throw_exception = False) {
            hash rv = hash(self).("name", "desc", "opts");
            rv.url = safe_url;

            last_check = now_us();

            if (throw_exception)
                return pingIntern(rv);

            try {
                return pingIntern(rv);
            }
            catch (hash ex) {
                return rv + (
                    "ok": False,
                    "info": sprintf("%s: %s", ex.err, ex.desc),
                    );
            }
        }

        #! performs the ping by executing get()
        private hash pingIntern(hash rv) {
            date start = now_us();
            get();
            return rv + (
                "ok": True,
                "time": now_us() - start,
                "info": "OK",
                );
        }

        #! returns a hash of information about the connection
        /** @param with_password determines if the password is returned or not

            @return a hash of information about the connection including the following keys:
            - \c name: the connection name
            - \c desc: the connection description
            - \c last_check: the date/time value of the last connection check (or @ref nothing if not checked)
            - \c loopback: a boolean vaue indicating of the connection is a loopback connection
            - \c monitor: a boolean vaue indicating of the connection should be monitored or not
            - \c opts: the original options used to create the object
            - \c status: a string giving the connection's status
            - \c type: the connection type
            - \c up: a boolean vaue indicating the connection is known to be up (will be @ref Qore::False "False" if not checked)
            - \c updated: the date/time value of the update (or @ref nothing if not updated)
            - \c url: the URL for the connection including the password (if any present and the \a with_password argument is @ref Qore::True "True")
            - \c url_hash: a hash of URL information as returned by @ref Qore::parse_url() "parse_url()"
         */
        hash getInfo(bool with_password = False) {
            hash h = self.("name", "desc", "url", "safe_url", "monitor", "last_check", "updated", "status", "up", "loopback") + ("type": getType(), "url_hash": urlh);
            if (with_password)
                delete h.safe_url;
            else {
                h.url = remove h.safe_url;
                delete h.url_hash.password;
            }
            h.opts = orig_opts;
            return h;
        }

        #! returns a hash of static configuration information about the connection
        /** @returns a hash of static configuration information about the connection with the following keys:
            - \c "name": the name of the connection
            - \c "desc": the description
            - \c "url": the full URL (including any username & password)
            - \c "opts": the options set on the connection
         */
        hash getConfigHash() {
            return self.("name", "desc", "url", "opts");
        }

        #! returns static / initialization options
        *hash getOptions() {
        }

        #! returns runtime options
        *hash getRuntimeOptions() {
        }

        #! returns default options
        *hash getDefaultOptions() {
        }

        #! returns options for saving the connection's configuration information
        *hash getRealOptions() {
            return orig_opts;
        }

        #! returns the underlying connection object
        /** calls @ref getImpl() to actually acquire the connection object
         */
        object get(bool connect = True, *hash rtopts) {
            m.lock();
            on_exit m.unlock();

            if (!connect) {
                object o = getImpl(False, rtopts);
                if (post_processing)
                    post_processing(o, name);
                return o;
            }

            on_exit
                last_check = now_us();

            try {
                object o = getImpl(True, rtopts);
                if (post_processing)
                    post_processing(o, name);
                up = True;
                status = "OK";
                return o;
            }
            catch (hash ex) {
                status = sprintf("%s: %s", ex.err, ex.desc);
                up = False;
                rethrow;
            }
        }

        #! this method is called when parsing connection file definitions from text files when loading into the database
        /** reimplement this method in subclasses to parse the option hash as set from a text file if needed (for special option formats, etc)
        */
        parseTextOptions() {
        }

        #! this method must return the connection object corresponding to the object's configuration
        /** @param connect if @ref Qore::True "True" then the connection should be returned connected (and if possible a round-trip "ping" of the server should be made)
            @param rtopts if the object acquisition requires any runtime options, then these are passed here

            @return the connection object
        */
        private abstract object getImpl(bool connect = True, *hash rtopts);

        #! returns the string type name for the connection object
        abstract string getType();
    }

    #! this class is used to mark invalid connections so they can be loaded and reported as invalid
    public class InvalidConnection inherits AbstractConnection {
        private {
            string error;
        }

        #! creates the invalid connection object
        constructor(string n_name, string n_desc, string n_url, *hash n_opts, string n_error, hash urlh) : AbstractConnection(n_name, n_desc, n_url, False, n_opts, urlh) {
            error = n_error;
        }

        #! throws an exception because the object is invalid
        object getImpl (bool connect=True, *hash rtopts) {
            throw "INVALID-CONNECTION", sprintf("connection %y (type %y url %y) is invalid and therefore could not be loaded: %s", name, urlh.protocol, url, error);
        }

        #! returns \c "invalid"
        string getType() {
            return "invalid";
        }
    }

    #! base class for HTTP-based connections that need their URLs rewritten to create the real connection object
    public class HttpBasedConnection inherits AbstractConnection {
        public {
            string real_url;
        }

        constructor(string name, string desc, string url, bool monitor, *hash opts, hash urlh) : AbstractConnection(name, desc, url, monitor, opts, urlh) {
            # sets an HTTP-based URL for the URL argument
            string scheme = (url =~ x/^([^:]+)/)[0];
            bool ssl = (scheme =~ /s$/);
            string targ = "http" + (ssl ? "s" : "");
            real_url = regex_subst(url, "^" + scheme, targ);
        }
    }

    #! class for FTP connections; returns @ref Qore::FtpClient objects
    /** supports the following runtime options in getImpl():
        - \c "path": overrides the path component in the URL at runtime
        - \c "path_add": appends the given string to the path component of the URL at runtime
    */
    public class FtpConnection inherits AbstractConnection {
        #! creates the FtpConnection object
        /** @param name the name of the connection
            @param desc connection description
            @param url connection URL (potentially with password info)
            @param monitor monitoring flag
            @param opts connection options
            @param urlh broken down URL hash (as returned by @ref Qore::parse_url())
        */
        constructor(string name, string desc, string url, bool monitor, *hash opts, hash urlh) : AbstractConnection(name, desc, url, monitor, opts, urlh) {
        }

        #! returns \c "ftp"
        string getType() {
            return "ftp";
        }

        #! returns runtime options
        /** return a hash with the following keys reflecting support for the corresponding runtime options in getImpl():
            - \c "path": overrides the path component in the URL at runtime
            - \c "path_add": appends the given string to the path component of the URL at runtime
        */
        *hash getRuntimeOptions() {
            return (
                "path": True,
                "path_add": True,
                );
        }

        #! returns an @ref Qore::FtpClient object
        /** @param connect if @ref Qore::True "True" then a connection is made any if there is any path in the URL a \c CWD operation is performed to change to the target directory
            @param rtopts this connection type does not accept any runtime option, so this parameter is ignored
        */
        private FtpClient getImpl(bool connect = True, *hash rtopts) {
            *string rtpath = urlh.path;
            if (rtopts.path)
                rtpath = rtopts.path;
            if (rtopts.path_add) {
                if (rtpath =~ /\/$/ && rtopts.path_add !~ /^\//)
                    rtpath += "/";
                rtpath += rtopts.path_add;
            }
            FtpClient fc(url);
            if (connect) {
                fc.connect();
                if (rtpath)
                    fc.cwd(rtpath);
            }
            return fc;
        }

        #! static constructor
        static FtpConnection make(string name, string desc, string url, bool monitor, *hash opts, hash urlh) {
            return new FtpConnection(name, desc, url, monitor, opts, urlh);
        }
    }

    #! class for HTTP connections; returns @ref Qore::HTTPClient objects
    /** supports the following options:
        - \c "http_version": HTTP version to use (\c "1.0" or \c "1.1", defaults to \c "1.1")
        - \c "max_redirects": maximum redirects to support
        - \c "proxy": proxy URL to use
        - \c "timeout": transfer timeout to use in milliseconds
        - \c "connect_timeout": connection timeout to use in milliseconds

        @see @ref Qore::HTTPClient::constructor(hash) "HTTPClient::constructor(hash opts)" for more information on the above options
    */
    public class HttpConnection inherits AbstractConnection {
        public {
            #! HttpConnection object connection options
            const Options = (
                "http_version": True,
                "max_redirects": True,
                "proxy": True,
                "timeout": True,
                "connect_timeout": True,
                );

            #! HttpConnection default options
            const DefaultOptions = (
                "timeout": 45s,
                "connect_timeout": 45s,
                );

            const OptionList = Options.keys();
        }

        #! creates the HttpConnection object
        /** @param name the name of the connection
            @param desc connection description
            @param url connection URL (potentially with password info)
            @param monitor monitoring flag
            @param opts connection options
            @param urlh broken down URL hash (as returned by @ref Qore::parse_url())
        */
        constructor(string name, string desc, string url, bool monitor, *hash opts, hash urlh) : AbstractConnection(name, desc, url, monitor, opts, urlh) {
        }

        #! returns an @ref Qore::HTTPClient object
        /** @param connect if @ref Qore::True "True" then a connection is made by calling @ref Qore::HTTPClient::connect() before returning the object
            @param rtopts this connection type does not accept any runtime option, so this parameter is ignored
        */
        private Qore::HTTPClient getImpl(bool connect = True, *hash rtopts) {
            HTTPClient sc(("url": url) + opts);
            if (connect)
                sc.connect();

            return sc;
        }

        #! gets options
        /** @return returns a hash with the following supported options:
            - \c "http_version": HTTP version to use (\c "1.0" or \c "1.1", defaults to \c "1.1")
            - \c "max_redirects": maximum redirects to support
            - \c "proxy": proxy URL to use
            - \c "timeout": transfer timeout to use in milliseconds
            - \c "connect_timeout": connection timeout to use in milliseconds

            @see @ref Qore::HTTPClient::constructor(hash) "HTTPClient::constructor(hash opts)" for more information on the above options
        */
        hash getOptions() {
            return Options;
        }

        #! returns default options
        *hash getDefaultOptions() {
            return DefaultOptions;
        }

        #! returns \c "http"
        string getType() {
            return "http";
        }

        #! static constructor
        static HttpConnection make(string name, string desc, string url, bool monitor, *hash opts, hash urlh) {
            return new HttpConnection(name, desc, url, monitor, opts, urlh);
        }
    }

    #! class for filesystem connections; returns an object of type @ref Qore::Dir; this can be used to monitor filesystem free space or to ensure a network filesystem is mounted, for example
    /** supports the following option:
        - \c "readonly": does not mark the connection as down if the directory is read-only; use for example if the connection should point to a read-only base directory; interface directories should normally be writable
    */
    public class FilesystemConnection inherits AbstractConnection {
        public {
            #! FilesystemConnection object connection options
            const Options = (
                "readonly": True,
                );

            #! FilesystemConnection object connection option list
            const OptionList = Options.keys();
        }

        #! creates the FilesystemConnection object
        /** @param name the name of the connection
            @param desc connection description
            @param url connection URL
            @param monitor monitoring flag
            @param opts connection options
            @param n_urlh broken down URL hash (as returned by @ref Qore::parse_url())
         */
        constructor(string name, string desc, string url, bool monitor, *hash opts, hash n_urlh) : AbstractConnection(name, desc, url, monitor, opts, n_urlh) {
            # the URL hash is parsed with parse_url() which will put a string in the
            # "host" key if it does not look like an absolute path, in which case "host"
            # needs to be prepended back to the path
            if (urlh.host)
                urlh.path = (remove urlh.host) + urlh.path;

            if (!absolute_path(urlh.path)) {
%ifdef Windows
                # here we have to guess where the "root" is
                urlh.path = "c:\\" + urlh.path;
%else
                urlh.path = "/" + urlh.path;
%endif
            }

            # sanitize / normalize the path
            urlh.path = normalize_dir(urlh.path);
        }

        #! returns \c "dir"
        string getType() {
            return "dir";
        }

        #! returns a @ref Qore::Dir object
        /** @param connect if @ref Qore::True "True", then the target directory is checked for existence and if it's writable, if either check fails, an exception is thrown
            @param rtopts this connection type does not accept any runtime option, so this parameter is ignored

            @return a @ref Qore::Dir object
         */
        private Dir getImpl(bool connect = True, *hash rtopts) {
            Dir dir();
            dir.chdir(urlh.path);
            if (connect) {
                if (!opts.readonly && (!is_writeable(urlh.path) || !dir.exists()))
                    throw "CONNECTION-ERROR", sprintf("connection %y (type %y url %y) points to non-existent, inaccessible, or read-only directory %y", name, urlh.protocol, url, urlh.path);
            }
            return dir;
        }

        #! gets options
        /** @return returns a hash with the following supported option:
        - \c "readonly": if @ref Qore::True "True", does not mark the connection as down if the directory is read-only; use for example if the connection should point to a read-only base directory; interface directories should normally be writable (default: @ref Qore::False "False")
         */
        hash getOptions() {
            return Options;
        }

        #! static constructor
        static FilesystemConnection make(string name, string desc, string url, bool monitor, *hash opts, hash urlh) {
            return new FilesystemConnection(name, desc, url, monitor, opts, urlh);
        }
    }
}

# private, non-exported namespace
namespace Priv {
    *hash sub priv_try_get_connections(string mod) {
        Program p();
        p.loadModule(mod);
        return p.callFunction("get_mod_connections");
    }

    ConnectionProvider::AbstractConnection sub priv_try_get_connection(string mod, string conn) {
        Program p();
        p.loadModule(mod);
        return p.callFunction("get_mod_connection", conn);
    }
}
