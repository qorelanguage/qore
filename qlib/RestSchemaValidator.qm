# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file RestSchemaValidator.qm an abstract API for validating REST schemas

/*  RestSchemaValidator.qm Copyright (C) 2017 - 2020 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%new-style
%enable-all-warnings
%require-types
%strict-args

# make sure we have the required qore version
%requires qore >= 0.9.5

# requires the HttpServerUtil module
%requires(reexport) HttpServerUtil >= 0.3.12

# need mime definitions
%requires(reexport) Mime >= 1.4

# supports using the DataProvider module to describe input and output records
%requires(reexport) DataProvider

%try-module yaml >= 0.5
%define NoYaml
%endtry

%try-module xml >= 1.3
%define NoXml
%endtry

%try-module json >= 1.5
%define NoJson
%endtry

module RestSchemaValidator {
    version = "2.1";
    desc = "RestSchemaValidator module providing an abstract REST schema validation API";
    author = "David Nichols <david.nichols@qoretechnologies.com>";
    url = "http://qore.org";
    license = "MIT";
}

/** @mainpage RestSchemaValidator module

    @tableofcontents

    @section restschemavalidatorintro RestSchemaValidator Module Introduction

    The %RestSchemaValidator module provides an abstract <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> schema validation API to %Qore.

    Primary classes provided by this module:
    - @ref RestSchemaValidator::AbstractRestSchemaValidator "AbstractRestSchemaValidator"
    - @ref RestSchemaValidator::NullRestSchemaValidator "NullRestSchemaValidator"

    @section restschemavalidator_relnotes RestSchemaValidator Module Release Notes

    @subsection restschemavalidator_2_1 RestSchemaValidator v2.1
    - fixed a bug handling complex \c Content-Type headers in responses
      (<a href="https://github.com/qorelanguage/qore/issues/4019">issue 4019</a>)
    - fixed a bug where the \c Expect header was not supported and where binary message bodies were read as strings
      (<a href="https://github.com/qorelanguage/qore/issues/4035">issue 4035</a>)

    @subsection restschemavalidator_2_0 RestSchemaValidator v2.0
    - implemented support for the DataProvider API
      (<a href="https://github.com/qorelanguage/qore/issues/3545">issue 3545</a>)

    @subsection restschemavalidator_1_1_2 RestSchemaValidator v1.1.2
    - fixed \c NullRestSchemaValidator to report serialization errors instead of ignoring them and returning about
      <tt>200 OK</tt> response
      (<a href="https://github.com/qorelanguage/qore/issues/3547">issue 3547</a>)

    @subsection restschemavalidator_1_1_1 RestSchemaValidator v1.1.1
    - fixed \c NullRestSchemaValidator not respecting set Content-Type header from RestClass
      (<a href="https://github.com/qorelanguage/qore/issues/3427">issue 3427</a>)

    @subsection restschemavalidator_1_1 RestSchemaValidator v1.1
    - updated the default validator to try all serialization methods if multiple methods are available and one fails
      (<a href="https://github.com/qorelanguage/qore/issues/2831">issue 2831</a>)

    @subsection restschemavalidator_1_0_2 RestSchemaValidator v1.0.2
    - fixed the null validator to handle binary message bodies; fixed issues with \c "text"
      serialization with binary message bodies
      (<a href="https://github.com/qorelanguage/qore/issues/2816">issue 2816</a>)

    @subsection restschemavalidator_1_0_1 RestSchemaValidator v1.0.1
    - updated docs for @ref RestSchemaValidator::AbstractRestSchemaValidator::parseRequest() "AbstractRestSchemaValidator::parseRequest()" to reflect how validation exceptions should be raised for proper error reporting (<a href="https://github.com/qorelanguage/qore/issues/2344">issue 2344</a>)
    - fixed handling of messages with non-object (i.e. non-hash) bodies (<a href="https://github.com/qorelanguage/qore/issues/2366">issue 2366</a>)

    @subsection restschemavalidator_1_0 RestSchemaValidator v1.0
    - initial release of the RestSchemaValidator module
*/

#! main namespace for all public RestSchemaValidator declarations
public namespace RestSchemaValidator {
    #! a hash of information about a client-side request
    public hashdecl RestRequestClientInfo {
        #! the URI path for the request
        string uri_path;
        #! the Content-Type for the message
        string content;
        #! Content-Type for the response message if available
        /** to be used for the Accept header
        */
        *list<string> response_content;
        #! the serialized message body hash
        *data body;
    }

    #! a hash of information about a server-side request
    public hashdecl RestRequestServerInfo {
        #! the URI path without query arguments
        string path;
        #! any query arguments
        *hash query;
        #! the deserialized message body data
        auto body;
        #! miscellaneous free-form info about the parsed request
        hash<auto> info;
    }

    #! a hash of information about a response from the server
    public hashdecl RestResponseClientInfo {
        #! the HTTP status code
        int code;
        #! the deserialized message body
        auto body;
        #! the HTTP headers received
        hash<auto> hdr;
        #! miscellaneous free-form info about the parsed response
        hash<auto> info;
    }

    #! a hash giving example info for example HTTP request messages
    public hashdecl RestExampleRequestInfo {
        #! the HTTP request URI
        string request_uri;
        #! the HTTP request header hash
        hash<auto> hdr;
        #! the HTTP request body
        string body;
    }

    #! a hash giving example info for example HTTP response messages
    public hashdecl RestExampleResponseInfo {
        #! the HTTP response URI
        string response_uri;
        #! the HTTP status code
        int code;
        #! the HTTP response header hash
        hash<auto> hdr;
        #! the HTTP response body
        string body;
    }

    #! a hash giving example information for building a request or response in Qore
    public hashdecl RestQoreExampleCodeInfo {
        #! a hash giving example hashdecl declarations for hash objects in the message; keys are hashdecl names; string values are Qore example code declarations of the given hashdecl
        hash<string, string> hashdecls();

        #! a string giving the example code generation
        string example;
    }

    #! abstract REST schema validation classes
    public class AbstractRestSchemaValidator {
        #! returns a unique hash for the schema that can be used to compare schemas
        /** @return a unique hash for the schema that can be used to compare schemas

            @since RestSchemaValidator 2.0
        */
        string getHash() {
            return getHashImpl();
        }

        #! returns the target URL for the schema
        /** @return the target URL for the schema

            @throws MISSING-TARGET-URL no target URL provided for the schema
        */
        string getTargetUrl() {
            return getTargetUrlImpl();
        }

        #! processes a client-side REST request and returns a hash that can be used to make the outgoing client-side HTTP request
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param body the unserialized message body data
            @param headers any headers to include in the request; note that the \c Content-Type header should not be sent here as it will be overridden when the message is serialized
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestRequestClientInfo hash with information about the request

            @throws SERIALIZATION-ERROR unsupported message body MIME type requested or missing serialization module
        */
        hash<RestRequestClientInfo> processRequest(string method, string path, auto body, *hash<auto> headers, *softlist<string> content_types) {
            return processRequestImpl(method, path, body, headers, content_types);
        }

        #! processes and parses a client request and returns the deserialized message body (if any)
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param http_body the serialized message body
            @param headers a reference to the hash of HTTP headers received; any default header values to be assumed by the server for the request will be added here

            @return a @ref RestRequestServerInfo hash of request information

            @throw DESERIALIZATION-ERROR the request body could not be deserialized, results in a <tt>400 Bad Request</tt> response returned to the caller
            @throw SCHEMA-VALIDATION-ERROR this exception should be thrown if there is a validation error in the request so that a <tt>400 Bad Request</tt> response can be returned to the caller
            @throw INVALID-METHOD invalid HTTP method for the request; the \c arg argument should have a list of acceptable HTTP methods for this request
        */
        hash<RestRequestServerInfo> parseRequest(string method, string path, *data http_body, reference<hash<auto>> headers) {
            return parseRequestImpl(method, path, http_body, \headers);
        }

        #! processes a REST response with a serialized message body, validates any response data against schema definitions if possible
        /** @param method the HTTP method of the original request
            @param path the URI path of the original request (without query arguments)
            @param code the HTTP response code
            @param response_body the response body data (if any)
            @param headers HTTP headers to include in the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown; if this argument is not present, then json is preferred over yaml

            @return an @ref HttpServer::HttpResponseInfo hash for the response

            @throw ACCEPT-ERROR the response body could not be serialized because the client does not accept a supported type
            @throw SERIALIZATION-ERROR the response body could not be serialized due to an error

            @note <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>RFC 2616 section 14</a>: If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.  To ensure this happens, if
            an Accept error of this nature occurs in this call, an \c "ACCEPT-ERROR" must be thrown
        */
        hash<HttpResponseInfo> processResponse(string method, string path, int code, auto response_body, *hash<auto> headers, *softlist<string> content_types) {
            return processResponseImpl(method, path, code, response_body, headers, content_types);
        }

        #! parses and validates the response from the server and returns a hash of the processed info
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the original request (without any query arguments)
            @param code the HTTP response code
            @param response_body the HTTP response body data (if any)
            @param hdr as hash of HTTP headers received

            @throw DESERIALIZATION-ERROR the request body could not be deserialized or had an invalid \c Content-Type
        */
        hash<RestResponseClientInfo> parseResponse(string method, string path, int code, *data response_body, hash<auto> hdr) {
            # strip any query arguments from the path when validating
            path =~ s/\?.*//;
            return parseResponseImpl(method, path, code, response_body, hdr);
        }

        #! returns a hash of example Qore code for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given request message
        */
        hash<RestQoreExampleCodeInfo> getQoreExampleRequest(string method, string path) {
            return getQoreExampleRequestImpl(method, path);
        }

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestExampleRequestInfo of example message information for the given request
        */
        hash<RestExampleRequestInfo> getExampleRequest(string method, string path, *softlist<string> content_types) {
            return getExampleRequestImpl(method, path, content_types);
        }

        #! returns example Qore code for the given response
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given response message
        */
        hash<RestQoreExampleCodeInfo> getQoreExampleResponse(string method, string path, int code) {
            return getQoreExampleResponseImpl(method, path, code);
        }

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestSchemaValidator::RestExampleResponseInfo "RestExampleResponseInfo" hash giving example response message info
        */
        hash<RestExampleResponseInfo> getExampleResponse(string method, string path, int code, *softlist<string> content_types) {
            hash<RestExampleResponseInfo> rv = getExampleResponseImpl(method, path, code, content_types);
            if (!rv.response_uri)
                rv.response_uri = sprintf("HTTP/1.1 %d %s", code, HttpCodes{code} ?? "Unknown");
            return rv;
        }

        #! returns a hash of URI paths as keys with values as lists of supported HTTP methods
        /** @return a hash of URI paths as keys with values as lists of supported HTTP methods
        */
        hash<string, list<string>> getPathOperationHash() {
            return getPathOperationHashImpl();
        }

        #! returns the base path prefix for all requests in this schema
        /** @return the base path prefix for all requests in this schema
        */
        string getBasePath() {
            return getBasePathImpl();
        }

        #! overrides the basePath value
        /** @param basePath the new base path value; use an empty string here to clear the basePath
        */
        setBasePath(string basePath) {
            setBasePathImpl(basePath);
        }

        #! returns a data provider object for this connection, if supported by any REST schema validator object
        /** @param rest the \c RestClient object to make the connection

            @return a data provider object for this connection, if supported by any REST schema validator object

            @throw DATA-PROVIDER-ERROR this class does not support the data provider API

            @note \a rest must be a \c RestClient object; this parameter is declared with a base class to avoid a
            circular dependency between modules
        */
        DataProvider::AbstractDataProvider getDataProvider(HTTPClient rest) {
            return getDataProviderImpl(rest);
        }

        #! returns a data provider object for this connection, if supported by any REST schema validator object
        /** @param rest the \c RestClient object to make the connection

            @return a data provider object for this connection, if supported by any REST schema validator object

            @throw DATA-PROVIDER-ERROR this class does not support the data provider API

            @note \a rest must be a \c RestClient object; this parameter is declared with a base class to avoid a
            circular dependency between modules
        */
        private DataProvider::AbstractDataProvider getDataProviderImpl(HTTPClient rest) {
            throw "DATA-PROVIDER-ERROR", sprintf("the %s class does not support the data provider API", self.className());
        }

        #! returns a unique hash for the schema that can be used to compare schemas
        /** @return a unique hash for the schema that can be used to compare schemas

            @since RestSchemaValidator 2.0
        */
        private abstract string getHashImpl();

        #! returns the target URL for the schema
        /** @return the target URL for the schema

            @throws MISSING-TARGET-URL no target URL provided for the schema
        */
        private abstract string getTargetUrlImpl();

        #! processes a client-side REST request and returns a hash that can be used to make the outgoing client-side HTTP request
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param body the unserialized message body data
            @param headers any headers to include in the request; note that the \c Content-Type header should not be sent here as it will be overridden when the message is serialized
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestRequestClientInfo hash with information about the request

            @throws SERIALIZATION-ERROR unsupported message body MIME type requested or missing serialization module
        */
        private abstract hash<RestRequestClientInfo> processRequestImpl(string method, string path, auto body, *hash<auto> headers, *softlist<string> content_types);

        #! processes and parses a client request and returns the deserialized message body (if any)
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param http_body the serialized message body
            @param headers a reference to the hash of HTTP headers received; any default header values to be assumed by the server for the request will be added here

            @return a @ref RestRequestServerInfo hash of request information

            @throw DESERIALIZATION-ERROR the request body could not be deserialized, results in a <tt>400 Bad Request</tt> response returned to the caller
            @throw SCHEMA-VALIDATION-ERROR this exception should be thrown if there is a validation error in the request so that a <tt>400 Bad Request</tt> response can be returned to the caller
            @throw INVALID-METHOD invalid HTTP method for the request; the \c arg argument should have a list of acceptable HTTP methods for this request
        */
        private abstract hash<RestRequestServerInfo> parseRequestImpl(string method, string path, *data http_body, reference<hash> headers);

        #! processes a REST response with a serialized message body, validates any response data against schema definitions if possible
        /** @param method the HTTP method of the original request
            @param path the URI path of the original request (without query arguments)
            @param code the HTTP response code
            @param response_body the response body data (if any)
            @param headers HTTP headers to include in the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown; if this argument is not present, then json is preferred over yaml

            @return an HttpResponseInfo hash for the response

            @throw ACCEPT-ERROR the response body could not be serialized because the client does not accept a supported type
            @throw SERIALIZATION-ERROR the response body could not be serialized due to an error

            @note <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>RFC 2616 section 14</a>: If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.  To ensure this happens, if
            an Accept error of this nature occurs in this call, an \c "ACCEPT-ERROR" must be thrown
        */
        private abstract hash<HttpResponseInfo> processResponseImpl(string method, string path, int code, any response_body, *hash<auto> headers, *softlist<string> content_types);

        #! parses and validates the response from the server and returns a hash of the processed info
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the original request (without any query arguments)
            @param code the HTTP response code
            @param response_body the HTTP response body data (if any)
            @param hdr as hash of HTTP headers received

            @throw DESERIALIZATION-ERROR the request body could not be deserialized or had an invalid \c Content-Type
        */
        private abstract hash<RestResponseClientInfo> parseResponseImpl(string method, string path, int code, *data response_body, hash<auto> hdr);

        #! returns a hash of URI paths as keys with values as lists of supported HTTP methods
        /** @return a hash of URI paths as keys with values as lists of supported HTTP methods
        */
        private abstract hash<string, list<string>> getPathOperationHashImpl();

        #! returns the base path prefix for all requests in this schema
        /** @return the base path prefix for all requests in this schema
        */
        private abstract string getBasePathImpl();

        #! overrides the basePath value
        /** @param basePath the new base path value; use an empty string here to clear the basePath
        */
        private abstract setBasePathImpl(string basePath);

        #! returns a hash of example Qore code for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given request message
        */
        private abstract hash<RestQoreExampleCodeInfo> getQoreExampleRequestImpl(string method, string path);

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestExampleRequestInfo of example message information for the given request
        */
        private abstract hash<RestExampleRequestInfo> getExampleRequestImpl(string method, string path, *softlist<string> content_types);

        #! returns example Qore code for the given response
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given response message
        */
        private abstract hash<RestQoreExampleCodeInfo> getQoreExampleResponseImpl(string method, string path, int code);

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestSchemaValidator::RestExampleResponseInfo "RestExampleResponseInfo" hash giving example response message info
        */
        private abstract hash<RestExampleResponseInfo> getExampleResponseImpl(string method, string path, int code, *softlist<string> content_types);
    }

    #! null REST validator; no schema is used but default serialization and deserialization is performed
    public class NullRestSchemaValidator inherits AbstractRestSchemaValidator {
        public {
            #! Data serialization support mapping codes to MIME types and de/serialization functions
            const DataSerializationSupport = {
%ifndef NoJson
                MimeTypeJson: \make_json(),
%endif
%ifndef NoYaml
                MimeTypeYamlRpc: \make_yaml(),
                MimeTypeYaml: \make_yaml(),
%endif
%ifndef NoXml
                MimeTypeXml: \make_xmlrpc_value(),
                MimeTypeXmlApp: string sub (auto v) {
                    switch (v.typeCode()) {
                        case NT_LIST: return make_xml(("list": ("element": v)));
                        case NT_HASH: return v.size() == 1 && v.firstValue().lsize() == 1 ? make_xml(v) : make_xml(("value": v));
                    }
                    return make_xml(("value": v));
                },
%endif
                MimeTypeFormUrlEncoded: string sub (auto v) {
                    if (v.typeCode() == NT_HASH)
                        return mime_get_form_urlencoded_string(v);
                    throw "FORMURLENCODING-ERROR", sprintf("form URL encoding can only encode hashes; type %y requested", v.type());
                },
                MimeTypeText: data sub (auto s) {
                    switch (s.typeCode()) {
                        case NT_STRING:
                        case NT_BINARY:
                            return s;
                        default:
                            # issue #3547: send as a YAML-serialized string if possible to catch unserialiable data
%ifndef NoYaml
                            return make_yaml(s);
%else
                            throw "TEXT-SERIALIZATION-ERROR", sprintf("cannot serialize type %y without YAML support", s.type());
%endif
                    }
                },
                MimeTypeOctetStream: binary sub (auto s) {
                    switch (s.typeCode()) {
                        case NT_STRING:
                            return binary(s);
                        case NT_BINARY:
                            return s;
                        default:
                            # issue #3547: send as a YAML-serialized string if possible to catch unserialiable data
%ifndef NoYaml
                            return binary(make_yaml(s));
%else
                            throw "BINARY-SERIALIZATION-ERROR", sprintf("cannot serialize type %y without YAML support", s.type());
%endif
                    }
                },
            };

            const DataSerializationSupportList = keys DataSerializationSupport;

%ifndef NoYaml
            const DeserializeYaml = (
                "code": "yaml",
                "in": \parse_yaml(),
            );
%endif
%ifndef NoXml
            const DeserializeXml = (
                "code": "xml",
                "arg": True,
                "in": auto sub (string xml, reference<string> type) {
                    try {
                        on_success type = "xml";
                        return parse_xmlrpc_value(xml);
                    } catch (hash<ExceptionInfo> ex) {
                        try {
                            on_success type = "rawxml";
                            return parse_xml(xml);
                        } catch () {
                        }
                        rethrow;
                    }
                },
            );
%endif

            #! Data deserialization support MIME types to codes and de/serialization functions
            const DataDeserializationSupport = {
                MimeTypeFormUrlEncoded: (
                    "code": "url",
                    "in": \mime_parse_form_urlencoded_string(),
                ),
%ifndef NoJson
                MimeTypeJson: (
                    "code": "json",
                    "in": \parse_json(),
                ),
%endif
%ifndef NoYaml
                MimeTypeYamlRpc: DeserializeYaml,
                MimeTypeYaml: DeserializeYaml,
%endif
%ifndef NoXml
                MimeTypeXml: DeserializeXml,
                MimeTypeXmlApp: DeserializeXml,
%endif
                MimeTypeText: (
                    "code": "text",
                    "in": data sub (data s) { return s; },
                ),

                MimeTypeOctetStream: {
                    "code": "bin",
                    "in": binary sub (data s) {
                        return s.typeCode() == NT_BINARY ? s : binary(s);
                    },
                },
            };

            #! a unique hash for the null schema
            /** @since RestSchemaValidator 2.0
            */
            const NullSchemaHashStr = "<null rest schema>";
        }

        #! returns a unique hash for the schema that can be used to compare schemas
        /** @return a unique hash for the schema that can be used to compare schemas

            @since RestSchemaValidator 2.0
        */
        private string getHashImpl() {
            return NullSchemaHashStr;
        }

        #! returns the target URL for the schema
        /** @return the target URL for the schema

            @throws MISSING-TARGET-URL no target URL provided for the schema
        */
        private string getTargetUrlImpl() {
            throw "MISSING-TARGET-URL", "no target URL provided";
        }

        #! processes a client-side REST request and returns a hash that can be used to make the outgoing client-side HTTP request
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param body the unserialized message body data
            @param headers any headers to include in the request; note that the \c Content-Type header should not be sent here as it will be overridden when the message is serialized
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestRequestClientInfo hash with information about the request

            @throws SERIALIZATION-ERROR unsupported message body MIME type requested or missing serialization module
        */
        private hash<RestRequestClientInfo> processRequestImpl(string method, string path, auto body, *hash<auto> headers, *softlist<string> content_types) {
            string ct = content_types[0] ?? DataSerializationSupportList[0];
            return cast<hash<RestRequestClientInfo>>((
                "uri_path": path,
                "content": ct,
                "body": exists body ? DataSerializationSupport{ct}(body) : NOTHING,
            ));
        }

        #! processes and parses a client request and returns the deserialized message body (if any)
        /** @param method the HTTP method (case-insensitive)
            @param path the URI path with any query arguments
            @param http_body the serialized message body
            @param headers a reference to the hash of HTTP headers received; any default header values to be assumed by the server for the request will be added here

            @return a @ref RestRequestServerInfo hash of request information

            @throw DESERIALIZATION-ERROR the request body could not be deserialized, results in a <tt>400 Bad Request</tt> response returned to the caller
            @throw SCHEMA-VALIDATION-ERROR this exception should be thrown if there is a validation error in the request so that a <tt>400 Bad Request</tt> response can be returned to the caller
            @throw INVALID-METHOD invalid HTTP method for the request; the \c arg argument should have a list of acceptable HTTP methods for this request
        */
        private hash<RestRequestServerInfo> parseRequestImpl(string method, string path, *data http_body, reference<hash> headers) {
            hash<UriQueryInfo> h = parse_uri_query(path);

            hash<RestRequestServerInfo> rv((
                "path": h.method,
                "query": h.params,
            ));

            if (exists http_body) {
                *hash<auto> dh = DataDeserializationSupport.(headers."content-type");
                if (!dh)
                    throw "DESERIALIZATION-ERROR", sprintf("cannot deserialize request body; content-type is: %y; "
                        "types supported: %y; response body: %y", headers."content-type",
                        keys DataDeserializationSupport, http_body);

                string ds_code = dh.code;
                rv.body = dh.arg
                    ? dh.in(http_body, \ds_code)
                    : dh.in(http_body);

                rv.info.code = ds_code;
            }

            return rv;
        }

        #! processes a REST response with a serialized message body, validates any response data against schema definitions if possible
        /** @param method the HTTP method of the original request
            @param path the URI path of the original request (without query arguments)
            @param code the HTTP response code
            @param response_body the response body data (if any)
            @param headers HTTP headers to include in the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown; if this argument is not present, then json is preferred over yaml

            @return an HttpResponseInfo hash for the response

            @throw ACCEPT-ERROR the response body could not be serialized because the client does not accept a supported type
            @throw SERIALIZATION-ERROR the response body could not be serialized due to an error

            @note <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>RFC 2616 section 14</a>: If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.  To ensure this happens, if
            an Accept error of this nature occurs in this call, an \c "ACCEPT-ERROR" must be thrown
        */
        private hash<HttpResponseInfo> processResponseImpl(string method, string path, int code, auto response_body, *hash<auto> headers, *softlist<string> content_types) {
            hash<HttpResponseInfo> rv((
                "code": code,
                "hdr": headers,
            ));

            if (exists response_body) {
                if (checkResponseContentTypeHeader(\rv, response_body, headers, content_types)) {
                    return rv;
                }

                list<string> ctl = !content_types
                    ? keys DataSerializationSupport
                    : map $1, content_types, DataSerializationSupport{$1};

                if (!ctl) {
                    throw "ACCEPT-ERROR", sprintf("cannot serialize response; you claim to accept only: %y; types supported: %y; discarding response: %y", content_types, keys DataSerializationSupport, response_body), ("types": keys DataSerializationSupport);
                }
                bool ok;
                hash<ExceptionInfo> ex;
                foreach string ct in (ctl) {
                    try {
                        response_body = DataSerializationSupport{ct}(response_body);
                        headers."Content-Type" = ct;
                        ok = True;
                        break;
                    } catch (hash<ExceptionInfo> ex1) {
                        # ignore serialization exceptions
                        ex = ex1;
                    }
                }
                # rethrow last exception if the response cannot be serialized
                if (!ok) {
                    throw ex.err, ex.desc, ex.arg;
                }
            }

            rv.body = response_body;
            rv.hdr = headers;
            return rv;
        }

        #! parses and validates the response from the server and returns a hash of the processed info
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the original request (without any query arguments)
            @param code the HTTP response code
            @param response_body the HTTP response body data (if any)
            @param hdr as hash of HTTP headers received

            @throw DESERIALIZATION-ERROR the request body could not be deserialized or had an invalid \c Content-Type
        */
        private hash<RestResponseClientInfo> parseResponseImpl(string method, string path, int code, *data response_body, hash<auto> hdr) {
            hash<RestResponseClientInfo> rv((
                "code": code,
                "hdr": hdr,
            ));

            if (response_body.val()) {
                string ct = (hdr."content-type".typeCode() == NT_LIST
                    ? hdr."content-type"[0]
                    : hdr."content-type");
                *hash<auto> dh = DataDeserializationSupport{ct};
                if (!dh) {
                    throw "DESERIALIZATION-ERROR", sprintf("cannot deserialize response body; content-type is: %y; "
                        "types supported: %y; response body: %y", hdr."content-type",
                        keys DataDeserializationSupport, response_body);
                }

                if (response_body.typeCode() != NT_STRING) {
                    throw "DESERIALIZATION-ERROR", sprintf("cannot deserialize response body; content-type is: %y but "
                        "body type is %y", ct, response_body.type());
                }

                string ds_code = dh.code;
                rv.body = dh.arg
                    ? dh.in(response_body, \ds_code)
                    : dh.in(response_body);

                rv.info.code = ds_code;
            }

            return rv;
        }

        #! Check if the headers contain a content-type header which is accepted and if so, modify the response hash.
        /** @param resp response hash
            @param body response body data (if any)
            @param headers HTTP headers to include in the response
            @param content_types the accepted MIME types in order of preference

            @return whether the headers contained a \c Content-Type header and the rv was modified

            @note if there are more \c Content-Type headers, then @ref False is returned and response is not modified
        */
        private:internal bool checkResponseContentTypeHeader(reference<hash<HttpResponseInfo>> resp, auto body, *hash<auto> headers, *softlist<string> content_types) {
            # quickly return if body is not in data format
            if (body.typeCode() != NT_BINARY && body.typeCode() != NT_STRING)
                return False;

            # try to find \c Content-Type header
            *list ct = map $1, keys headers, $1 =~ /content-type/i;

            # if found and it is accepted, use it and don't serialize the body
            if (ct && ct.size() == 1) {
                if (!content_types) { # no content types means */* is accepted
                    resp.body = body;
                    resp.hdr = resp.hdr + ("Content-Type": remove resp.hdr{ct[0]});
                    return True;
                }
                string contentType = headers{ct[0]};
                foreach string accepted in (content_types) {
                    accepted =~ s/\*/.*/;
                    if (contentType.regex(accepted)) {
                        resp.body = body;
                        resp.hdr = resp.hdr + ("Content-Type": remove resp.hdr{ct[0]});
                        return True;
                    }
                }
            }
            return False;
        }

        #! returns a hash of URI paths as keys with values as lists of supported HTTP methods
        /** @return a hash of URI paths as keys with values as lists of supported HTTP methods
        */
        private hash<string, list<string>> getPathOperationHashImpl() {
            return new hash<string, list<string>>();
        }

        #! returns the base path prefix for all requests in this schema
        /** @return the base path prefix for all requests in this schema
        */
        private string getBasePathImpl() {
            return "";
        }

        #! overrides the basePath value
        /** @param basePath the new base path value; use an empty string here to clear the basePath
        */
        private setBasePathImpl(string basePath) {
            throw "UNSUPPORTED-OPERATION", sprintf("the basePath cannot be overridden in the NullRestSchemaValidator class");
        }

        #! returns a hash of example Qore code for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given request message
        */
        private hash<RestQoreExampleCodeInfo> getQoreExampleRequestImpl(string method, string path) {
            return new hash<RestQoreExampleCodeInfo>();
        }

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method (case insensitive)
            @param path the URI path of the request
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestExampleRequestInfo of example message information for the given request
        */
        private hash<RestExampleRequestInfo> getExampleRequestImpl(string method, string path, *softlist<string> content_types) {
            return new hash<RestExampleRequestInfo>();
        }

        #! returns example Qore code for the given response
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response

            @return a @ref RestSchemaValidator::RestQoreExampleCodeInfo "RestQoreExampleCodeInfo" hash giving example Qore code to generate the given response message
        */
        private hash<RestQoreExampleCodeInfo> getQoreExampleResponseImpl(string method, string path, int code) {
            return new hash<RestQoreExampleCodeInfo>();
        }

        #! returns a hash of example message information for the given request
        /** @param method the HTTP method of the original request (case insensitive)
            @param path the URI path of the original request
            @param code the HTTP response code of the response
            @param content_types the desired MIME types for serialization in order of preference; if none are usable then an exception is thrown

            @return a @ref RestSchemaValidator::RestExampleResponseInfo "RestExampleResponseInfo" hash giving example response message info
        */
        private hash<RestExampleResponseInfo> getExampleResponseImpl(string method, string path, int code, *softlist<string> content_types) {
            return new hash<RestExampleResponseInfo>();
        }
    }
}