# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file CdsRestClient.qm Qore user module for calling Microsoft Common Data Service REST services

/*  CdsRestClient.qm Copyright (C) 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum qore version
%requires qore >= 2.0

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# don't use "$" for vars, members, and methods, assume local variable scope
%new-style

# do not ignore argument errors
%strict-args

%requires(reexport) Mime >= 1.3
%requires(reexport) RestClient >= 1.3.1
%requires(reexport) ConnectionProvider >= 1.4

module CdsRestClient {
    version = "2.0";
    desc = "user module for calling Microsoft Dynamics 365 Common Data Service REST services";
    author = "David Nichols <david@qore.org>";
    url = "https://qore.org";
    license = "MIT";
    init = sub () {
        ConnectionSchemeCache::registerScheme("cdsrests", CdsRestConnection::ConnectionScheme);
        ConnectionSchemeCache::registerScheme("dynamics", DynamicsRestConnection::ConnectionScheme);
    };
}

/** @mainpage CdsRestClient Module

    @tableofcontents

    @section cdsrestclientintro CdsRestClient Introduction

    The %CdsRestClient module provides an API for calling Microsoft Dynamics 365 Common Data Service REST services.

    To use this module, use \c "%requires CdsRestClient" in your code.

    All the public symbols in the module are defined in the CdsRestClient namespace.

    The main classes are:
    - @ref CdsRestClient::CdsRestClient "CdsRestClient":
      this class provides the REST client API for communuication with the Microsoft Dynamics 365 Common Data Service REST
      API; it also automates authentication and authorization to the target
    - @ref CdsRestClient::CdsRestConnection "CdsRestConnection":
      provides a REST connection object to a Microsoft Dynamics 365 Common Data Service server (based on the
      @ref connectionproviderintro "ConnectionProvider" module)

    @par Example:
    @code{.py}
#!/usr/bin/env qore

%new-style
%strict-args
%require-types
%enable-all-warnings

%requires CdsRestClient

hash<auto> opts = {
    "url": "https://my-instance.crm2.dynamics.com",
    "client_id": "30e61334-15db-4171-a752-b7c70dca1ebb",
    "client_secret": "M09tfOc&NoEP(XCEKkT:T&V<lKR%+=h9hw",
    "tenant": "bef147c4-8dd3-4e18-9af8-9573d86d3738",
};

CdsRestClient rest(opts);
hash<auto> ans = rest.get("...");
printf("%N\n", ans.body);
    @endcode

    @section cdsrestclientrelnotes Release Notes

    @subsection cdsrestclientv2_0 CdsRestClient v2.0
    - updated to use the OAuth2 infrastructure

    @subsection cdsrestclientv1_0 CdsRestClient v1.0
    - the initial version of the %CdsRestClient module
*/

#! the CdsRestClient namespace contains all the objects in the CdsRestClient module
public namespace CdsRestClient {
#! this class provides the REST client API for communication with Microsoft Dynamics 365 Common Data Service servers
/** This class requires the following options for Microsoft Dynamics 365 Common Data Service authentication and
    authorization to the target server:
    - \c client_id: the OAuth2 client ID
    - \c client_secret: the OAuth2 client secret
    - \c tenant: the tenant ID

    Errors returned from Dynamics will have the following format:
    - \c err: will be the hex error code from Dynamics (ex: \c 0x8006088a)
    - \c desc: the exception message (ex: <tt>Resource not found for the segment 'WhoAmi'.</tt>)
    - \c arg: the error hash from the server plus a \c decoded_body argument with any decoded message body
*/
public class CdsRestClient inherits RestClient::RestClient {
    public {
        #! OAuth2 auth URL
        const OAuth2BaseUrl = "https://login.microsoftonline.com/";

        #! OAuth2 auth URI path suffix
        const OAuth2AuthUriPathSuffix = "/oauth2/v2.0/authorize";

        #! OAuth2 token URI path suffix
        const OAuth2TokenUriPathSuffix = "/oauth2/v2.0/token";

        #! Default API version
        const DefaultApiVersion = "9.2";

        #! Request URI path prefix
        const RequestUriPathPrefix = "/api/data/v";

        #! Default Dynamics 365 base URI
        const DefaultBusinessCentralBaseUri = "https://api.businesscentral.dynamics.com/";

        #! Default Dynamics ping method
        const DefaultDynamicsPingMethod = "GET";

        #! Default Dynamics ping path
        const DefaultDynamicsPingPath = "{api_uri_path}/systemusers?$top=1&$select=identityid";

        #! Default Dynamics ping headers
        const DefaultDynamicsPingHeaders = {
            "Accept": MimeTypeJson,
        };

        #! API profiles
        const ApiProfiles = {
            "none": {},
            "dynamics": {
                "oauth2_scopes": (
                    "offline_access",
                    "{url}.default",
                ),
                "ping_method": DefaultDynamicsPingMethod,
                "ping_path": DefaultDynamicsPingPath,
                "ping_headers": DefaultDynamicsPingHeaders,
            },
            "dynamics-business-central": {
                "url": DefaultBusinessCentralBaseUri,
                "oauth2_scopes": (
                    "offline_access",
                    "{url}.default",
                ),
            },
        };
    }

    private:internal {
        string api;
        string tenant;
        string uri_path_pfx;
    }

    #! creates the object with the given options
    /**
        @par Example:
        @code{.py}
CdsRestClient rest({
    "url": "https://my-instance.crm2.dynamics.com",
    "client_id": client_id,
    "client_secret": client_secret,
    "tenant": "bef147c4-8dd3-4e18-9af8-9573d86d3738",
    "oauth2_grant_type": "client_credentials",
});
        @endcode

        @param opts valid options are the same as @ref RestClient::RestClient "RestClient" with the following
        differences:
        - \c api: the API version for CDS
        - \c api_profile: one of:
          - \c none (no options set)
          - \c dynamics (set client options for the MS Dynamics 365 API)
        - \c data: see @ref RestClient::RestClient::DataSerializationOptions "DataSerializationOptions" for possible
        values; the default is \c "json"
        - \c scope: the OAuth2 scope for the login; the default depends on the \c "api_profile" option
        - \c tenant: (required) the tenant ID
        @param do_not_connect if \c False (the default), then a connection will be immediately established to the
        remote server

        @throw RESTCLIENT-ERROR invalid option passed to constructor, unsupported data serialization, etc
        @throw CDSRESTCLIENT-ERROR missing or invalid required option for REST
        authentication or communication
    */
    constructor(hash<auto> opts, *softbool do_not_connect) : RestClient(CdsRestClient::getOptions(opts), True) {
        # check for the OAuth2 client id/secret options
        if (!oauth2_client_id || !oauth2_client_secret) {
            raiseError("missing the \"client_id\" and \"client_secret\" options");
        }
        if (opts.tenant) {
            tenant = getString(opts, "tenant");
        } else {
            raiseError("missing the \"tenant\" option");
        }

        if (oauth2_token_url == "auto") {
            oauth2_token_url = OAuth2BaseUrl + tenant + OAuth2TokenUriPathSuffix;
        }
        if (oauth2_auth_url == "auto") {
            oauth2_auth_url = OAuth2BaseUrl + tenant + OAuth2AuthUriPathSuffix;
        }

        string version;
        if (opts.api) {
            version = getString(opts, "api");
        }
        api = version ?? DefaultApiVersion;
        uri_path_pfx = RequestUriPathPrefix + api;

        setConnectionPath(uri_path_pfx);

        if (!do_not_connect) {
            if (!token) {
                loginIntern();
            } else {
                connect();
            }
        }
    }

    #! returns the CDS REST API version currently in use
    string getApi() {
        return api;
    }

    #! gets a string option
    static string getString(hash<auto> opts, string key) {
        auto v = opts{key};
        if (!exists v || v == "") {
            CdsRestClient::raiseError("missing required option %y in option argument", key);
        }
        if (v.typeCode() != NT_STRING) {
            CdsRestClient::raiseError("required option %y was passed as a %s (%y); expecting \"string\"", key,
                v.type(), v);
        }
        return v;
    }

    #! throws an exception due to an error
    static raiseError(string fmt, ...) {
        throw "CDSRESTCLIENT-ERROR", vsprintf(fmt, argv);
    }

    #! returns options for the @ref CdsRestClient::CdsRestClient::constructor()
    static hash<auto> getOptions(hash<auto> opts) {
        if (opts.url !~ /\/$/) {
            opts.url += "/";
        }
        if (*string prof = opts.api_profile) {
            *hash<auto> conf = ApiProfiles{prof};
            if (!exists conf) {
                throw "CDS-RESTCLIENT-ERROR", sprintf("api_profile %y is unknown; known API profiles: %y", prof,
                    keys ApiProfiles);
            }
            # set ping options
            map opts{$1.key} = $1.value, conf.pairIterator(), !opts.hasKey($1.key);

            # process scopes; substitute "{url}" with the connection URL
            opts.oauth2_scopes = map replace($1, "{url}", opts.url), opts.oauth2_scopes;
        }
        opts.url += opts.tenant;
        return opts + {
            "data": "json",
        } + ((opts.client_id && opts.client_secret)
            ? {
                "oauth2_auth_url": opts.oauth2_auth_url ?? "auto",
                "oauth2_token_url": opts.oauth2_token_url ?? "auto",
                "oauth2_grant_type": opts.oauth2_grant_type ?? "authorization_code",
                "oauth2_client_id": opts.client_id,
                "oauth2_client_secret": opts.client_secret,
            }
            : NOTHING
        );
    }

    #! sends the outgoing HTTP message and recodes the response to data
    private hash<auto> sendAndDecodeResponse(*data body, string m, string path, hash<auto> hdr,
            *reference<hash<auto>> info, *softbool decode_errors) {
        try {
            return RestClient::sendAndDecodeResponse(body, m, path, hdr, \info, decode_errors);
        } catch (hash<ExceptionInfo> ex) {
            # throw an exception for the CDS error
            if (info."response-body".error && info."response-body".size() == 1
                && info."response-body".error."code".typeCode() == NT_STRING
                && info."response-body".error.message.typeCode() == NT_STRING) {
                hash<auto> error = info."response-body".error;
                string errcode = remove error."code";
                string msg = remove error.message;
                throw errcode, msg, error + ex.arg + {"decoded_body": info."response-body"};
            }
            rethrow;
        }
    }
}

#! class for Microsoft Common Data Service REST connections; returns @ref CdsRestClient objects
/** supports options as in @ref RestClient::RestClient with the following differences:
    - \c "api": the API version for CDS
    - \c "api_profile": one of:
      - \c none (no options set)
      - \c dynamics (set client options for the MS Dynamics 365 API)
    - \c "client_id": (required) the Microsoft Common Data Service OAuth2 client ID (instead of \c oauth2_client_id)
    - \c "client_secret": (required) the Microsoft Common Data Service OAuth2 client secret (instead of
      \c oauth2_client_secret)
    - \c "data": see @ref RestClient::RestClient::DataSerializationOptions "DataSerializationOptions" for possible
      values; the default is \c "json"
    - \c "scope": the OAuth2 scope for the login; the default depends on the \c "api_profile" option
    - \c "tenant": (required) the tenant ID

    @see @ref CdsRestClient::CdsRestClient::constructor() for more information on the above options
*/
public class CdsRestConnection inherits RestClient::RestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "cls": Class::forName("CdsRestConnection"),
            "options": RestConnection::ConnectionScheme.options - (keys OAuth2DifferentOptionMap) + {
                "api": <ConnectionOptionInfo>{
                    "type": "string",
                    "desc": "the API version for CDS",
                    "default_value": CdsRestClient::DefaultApiVersion,
                },
                "api_profile": <ConnectionOptionInfo>{
                    "type": "string",
                    "desc": "the API profile according to the CDS API in use; this option will set the REST "
                        "options if they are not already set (`oauth2_scopes`, `ping_body`, `ping_headers`, and "
                        "`ping_method`); valid "
                        "values:\n"
                        "- `none`: no options configured (default)\n"
                        "- `dynamics`: set options for the Dynamics 365 API",
                    "default_value": "none",
                    "allowed_values": (
                        <AllowedValueInfo>{
                            "desc": "No options are set",
                            "value": "none",
                        },
                        <AllowedValueInfo>{
                            "desc": "Set REST client options for the Dynamics 365 API",
                            "value": "dynamics",
                        },
                        /*
                        <AllowedValueInfo>{
                            "desc": "Set REST client options for the Dynamics 365 API",
                            "value": "dynamics-business-central",
                        },
                        */
                    ),
                },
                "client_id": RestConnection::ConnectionScheme.options.oauth2_client_id + <ConnectionOptionInfo>{
                    "desc": "the Microsoft Common Data Service OAuth2 client ID",
                },
                "client_secret": RestConnection::ConnectionScheme.options.oauth2_client_secret + <ConnectionOptionInfo>{
                    "desc": "the Microsoft Common Data Service OAuth2 client secret",
                    "sensitive": True,
                },
                "data": RestConnection::ConnectionScheme.options."data" + <ConnectionOptionInfo>{
                    "default_value": "json",
                },
                "oauth2_auth_url": RestConnection::ConnectionScheme.options.oauth2_auth_url + <ConnectionOptionInfo>{
                    "default_value": "auto",
                },
                "oauth2_grant_type": RestConnection::ConnectionScheme.options.oauth2_grant_type + <ConnectionOptionInfo>{
                    "default_value": "authorization_code",
                },
                "oauth2_token_url": RestConnection::ConnectionScheme.options.oauth2_token_url + <ConnectionOptionInfo>{
                    "default_value": "auto",
                },
                "tenant": <ConnectionOptionInfo>{
                    "type": "string",
                    "desc": "the tenant ID",
                },
            },
            "required_options": "client_id,client_secret,tenant",
        };

        #! options required to support the OAuth2 authorization code grant flow
        const OAuth2AuthRequestOptions = (
            "client_id",
            "client_secret",
            "oauth2_auth_url",
            "oauth2_token_url",
            "oauth2_redirect_url",
        );

        #! Maps CDS REST options to standard options
        const OAuth2Options = {
            "oauth2_auto_refresh": "oauth2_auto_refresh",
            "oauth2_auth_args": "oauth2_auth_args",
            "oauth2_auth_url": "oauth2_auth_url",
            "client_id": "oauth2_client_id",
            "client_secret": "oauth2_client_secret",
            "oauth2_redirect_url": "oauth2_redirect_url",
            "oauth2_refresh_token": "oauth2_refresh_token",
            "oauth2_scopes": "oauth2_scopes",
            "oauth2_token_url": "oauth2_token_url",
            "password": "password",
            "username": "username",
        };

        #! Maps standard option names to CDS REST option names
        const OAuth2StandardToCdsOptionMap = map {$1.value: $1.key}, OAuth2Options.pairIterator();

        #! Different OAuth2 option map; standard name => our name
        const OAuth2DifferentOptionMap = map {$1.value: $1.key}, OAuth2Options.pairIterator(), $1.key != $1.value;
    }

    #! creates the CdsRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url connection URL (potentially with password info)
        @param attributes various attributes. See below
        @param options see the class documentation for valid options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url,
            hash<auto> attributes = {}, hash<auto> options = {})
            : RestConnection(name, description, url, attributes, CdsRestConnection::getOptions(url, options)) {
        real_opts = {
            "url": real_url,
        } + urlh{"username", "password"} + self.opts;
    }

    #! returns \c "cdsrest"
    string getType() {
        return "cdsrest";
    }

    #! returns @ref True as this connection returns a data provider with the @ref getDataProvider() method
    /** @return @ref True as this connection returns a data provider with the @ref getDataProvider() method

        @see @ref getDataProvider()
    */
    bool hasDataProvider() {
        return True;
    }

    #! returns a data provider object for this connection
    /** @param constructor_options any additional constructor options for the data provider

        @return a data provider object for this connection
    */
    DataProvider::AbstractDataProvider getDataProvider(*hash<auto> constructor_options) {
        # to avoid circular dependencies, this object loads the CdsRestDataProvider and creates the data provider
        # object dynamically
        load_module("CdsRestDataProvider");
        return create_object("CdsRestDataProvider", get());
    }

    #! Returns a URI for an authorization code request
    /** The \c oauth2_grant_type must be \c authorization_code, and \c oauth2_client_id, \c oauth2_auth_url,
        \c oauth2_redirect_url must set if the \c redirect_uri option is not used

        @param info context information for the authorization code request

        @since %CdsRestClient 2.0
    */
    string getAuthorizationCodeRequest(hash<AuthCodeInfo> info = <AuthCodeInfo>{}) {
        return RestConnection::getAuthorizationCodeRequest(info) + "&response_mode=query";
    }

    #! Returns the OAuth2 option name for this connection
    /** @since %CdsRestClient 2.0
    */
    string getOAuth2OptionName(string opt) {
        return OAuth2StandardToCdsOptionMap{opt} ?? opt;
    }

    #! Returns OAuth2 options in a standard format
    /** @since %CdsRestClient 2.0
    */
    hash<auto> getOAuth2Options() {
        hash<auto> rv;
        foreach hash<auto> i in (OAuth2Options.pairIterator()) {
            rv{i.value} = real_opts{i.key};
        }
        return rv;
    }

    #! Returns the OAuth2 auth URL or throws an exception if not set
    /*  @param allow_relative if @ref True then a relative URL (path only) can be returned; the default (@ref False)
        is to return a full URL

        @since %CdsRestClient 2.0
    */
    string getAuthUrl(*bool allow_relative) {
        *string rv = opts.oauth2_auth_url;
        if (!rv.val()) {
            throw "OAUTH2-ERROR", sprintf("connection %y has no \"oauth2_auth_url\" option set", name);
        }
        if (rv == "auto") {
            rv = CdsRestClient::OAuth2BaseUrl + opts.tenant + CdsRestClient::OAuth2AuthUriPathSuffix;
        } else if (!allow_relative && rv !~ /^http/) {
            string url = real_url;
            if (url !~ /\/$/) {
                url += "/";
            }
            if (rv =~ /^\//) {
                rv = rv[1..];
            }
            rv = url + rv;
        }
        return rv;
    }

    #! Returns the OAuth2 token URL or throws an exception if not set
    /*  @param allow_relative if @ref True then a relative URL (path only) can be returned; the default (@ref False)
        is to return a full URL

        @since %CdsRestClient 2.0
    */
    string getTokenUrl(*bool allow_relative) {
        *string rv = opts.oauth2_token_url;
        if (!rv.val()) {
            throw "OAUTH2-ERROR", sprintf("connection %y has no \"oauth2_token_url\" option set", name);
        }
        if (rv == "auto") {
            rv = CdsRestClient::OAuth2BaseUrl + opts.tenant + CdsRestClient::OAuth2TokenUriPathSuffix;
        } else if (!allow_relative && rv !~ /^http/) {
            string url = real_url;
            if (url !~ /\/$/) {
                url += "/";
            }
            rv = url + rv;
        }
        return rv;
    }

    #! Sets the auth code feature if supported
    private checkAuthCodeFeature() {
        if (opts{OAuth2AuthRequestOptions}.size() == OAuth2AuthRequestOptions.size()) {
            features{RCF_OAUTH2_AUTH_CODE} = True;
        }
    }

    #! Sets child data provider capabilities
    private setChildCapabilities() {
        children_can_support_records = True;
    }

    #! returns a @ref CdsRestClient object
    /** @param connect if @ref True "True", then the connection is returned already connected
        @param rtopts this connection type does not accept any runtime options, so this parameter is ignored

        @return a @ref CdsRestClient object
    */
    private CdsRestClient getImpl(bool connect = True, *hash<auto> rtopts) {
        return new CdsRestClient(getConnectionOptions(), !connect);
    }

    #! Returns the ConnectionSchemeInfo hash for this object
    private hash<ConnectionSchemeInfo> getConnectionSchemeInfoImpl() {
        return ConnectionScheme;
    }

    #! returns options for @ref GoogleRestConnection::constructor()
    private static hash<auto> getOptions(string url, hash<auto> orig_opts) {
        # to enusure opts are hash<auto>
        hash<auto> opts += orig_opts;

        if (*string prof = opts.api_profile) {
            *hash<auto> conf = (CdsRestClient::ApiProfiles{prof} - ("encode_chars",));
            if (!exists conf) {
                throw "CDS-RESTCLIENT-ERROR", sprintf("api_profile %y is unknown; known API profiles: %y", prof,
                    keys CdsRestClient::ApiProfiles);
            }
            # set ping options
            map opts{$1.key} = $1.value, conf.pairIterator(), !opts.hasKey($1.key);

            if (opts.url) {
                url = remove opts.url;
            } else {
                url =~ s/^cdsrest/http/;
            }
            if (url !~ /\/$/) {
                url += "/";
            }
            # process scopes; substitute "{url}" with the connection URL
            opts.oauth2_scopes = map replace($1, "{url}", url), opts.oauth2_scopes;

            if (opts.ping_path) {
                opts.ping_path = replace(opts.ping_path, "{api_uri_path}", CdsRestClient::RequestUriPathPrefix +
                    (opts.api ?? CdsRestClient::DefaultApiVersion));
            }
        } else if (opts.url) {
            remove opts.url;
        }

        return opts;
    }
}

class DynamicsRestConnection inherits CdsRestConnection {
    public {
        #! Connection entry info
        const ConnectionScheme = <ConnectionSchemeInfo>{
            "cls": Class::forName("DynamicsRestConnection"),
            "options": CdsRestConnection::ConnectionScheme.options - "api_profile",
        };
    }

    #! creates the GoogleRestConnection object
    /** @param name the name of the connection
        @param description connection description
        @param url this aargument is ignored; the default Google API is always used
        @param attributes various attributes. See below
        @param options connection options

        See @ref ConnectionProvider::AbstractConnection::constructor() for \c attributes and \c options reference.

        @throw CONNECTION-OPTION-ERROR missing or invalid connection option
    */
    constructor(string name, string description, string url, hash<auto> attributes = {}, hash<auto> options = {})
            : CdsRestConnection(name, description, url, attributes,
                CdsRestConnection::getOptions(url, options + {"api_profile": "dynamics"})) {
    }

    #! returns \c "dynamics"
    string getType() {
        return "dynamics";
    }
}
}
