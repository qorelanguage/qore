# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file PgsqlSqlUtil.qm Qore user module for working with PostgreSQL SQL data

/*  PgsqlSqlUtil.qm Copyright (C) 2013 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# minimum required Qore version
%requires qore >= 1.14

# requires the SqlUtil module
%requires SqlUtil >= 1.9

# don't use "$" signs for variables and class members, assume local variable scope
%new-style

# require type definitions everywhere
%require-types

# enable all warnings
%enable-all-warnings

# the implementation is in PgsqlSqlUtilBase
%requires PgsqlSqlUtilBase

module PgsqlSqlUtil {
    version = "1.8";
    desc = "user module for working with PostgreSQL SQL data";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
}

# version history is included below in the docs

/** @mainpage PgsqlSqlUtil Module

    @tableofcontents

    @section pgsqlsqlutilintro PgsqlSqlUtil Module Introduction

    The %PgsqlSqlUtil module provides a high level API for working with PostgreSQL database objects using the %Qore
    native \c pgsql driver.

    Usually this module is loaded on demand from the SqlUtil module, however to use this module
    directly, use \c "%requires PgsqlSqlUtil" in your code.

    All the public symbols in the module are defined in the PgsqlSqlUtil namespace

    @note This module requires the <a href="https://github.com/qorelanguage/module-pgsql">pgsql</a> binary module for
    communication with PostgreSQL databases

    @see @ref pgsqlsqlutilbaseintro for implementation information about this module

    @section pgsql_relnotes Release Notes

    @subsection pgsqlsqlutilv18 PgsqlSqlUtil v1.8
    - updated to use the @ref pgsqlsqlutilbaseintro module for the base implementation

    @subsection pgsqlsqlutilv171 PgsqlSqlUtil v1.7.1
    - fixed bugs handling table objects in schemas other than \c public
      (<a href="https://github.com/qorelanguage/qore/issues/4602">issue 4602</a>)

    @subsection pgsqlsqlutilv17 PgsqlSqlUtil v1.7
    - implemented support for generating queries based on generic expressions using the DataProvider module's generic
      expression support
      (<a href="https://github.com/qorelanguage/qore/issues/4538">issue 4538</a>)

    @subsection pgsqlsqlutilv16 PgsqlSqlUtil v1.6
    - added supoport for the \c XML, \c JSON, and \c JSONB types
      (<a href="https://github.com/qorelanguage/qore/issues/4448">issue 4448</a>)

    @subsection pgsqlsqlutilv151 PgsqlSqlUtil v1.5.3
    - fixed handling column names that use reserved words
      (<a href="https://github.com/qorelanguage/qore/issues/4348">issue 4348</a>)

    @subsection pgsqlsqlutilv151 PgsqlSqlUtil v1.5.2
    - added APIs to enable duplicate record creation errors to be detected
      (<a href="https://github.com/qorelanguage/qore/issues/4308">issue 4308</a>)

    @subsection pgsqlsqlutilv151 PgsqlSqlUtil v1.5.1
    - fixed bugs dropping foreign constraints and indices when aligning tables
      (<a href="https://github.com/qorelanguage/qore/issues/4246">issue 4246</a>)

    @subsection pgsqlsqlutilv15 PgsqlSqlUtil v1.5
    - implemented atomic merge support
      (<a href="https://github.com/qorelanguage/qore/issues/3963">issue 3963</a>)

    @subsection pgsqlsqlutilv141 PgsqlSqlUtil v1.4.1
    - fixed a bug generating literal date/time values for SQL queries
      (<a href="https://github.com/qorelanguage/qore/issues/3948">issue 3948</a>)

    @subsection pgsqlsqlutilv14 PgsqlSqlUtil v1.4
    - added support for the DataProvider module
      (<a href="https://github.com/qorelanguage/qore/issues/3545">issue 3545</a>)

    @subsection pgsqlsqlutilv131 PgsqlSqlUtil v1.3.1
    - fixed compatibility with PostgreSQL 12
      (<a href="https://github.com/qorelanguage/qore/issues/3589">issue 3589</a>)
    - fixed comparison of triggers with column restrictions with table alignment
      (<a href="https://github.com/qorelanguage/qore/issues/3466">issue 3466</a>)
    - fixed quoting of reserved words in column names in table alignment
      (<a href="https://github.com/qorelanguage/qore/issues/3400">issue 3400</a>)

    @subsection pgsqlsqlutilv13 PgsqlSqlUtil v1.3
    - added support for serializing and deserializing @ref SqlUtil::AbstractTable "AbstractTable" objects
      (<a href="https://github.com/qorelanguage/qore/issues/2663">issue 2663</a>)

    @subsection pgsqlsqlutilv121 PgsqlSqlUtil v1.2.1
    - implemented support for custom column operators
      (<a href="https://github.com/qorelanguage/qore/issues/2314">issue 2314</a>)
    - fixed a bug where default column values were compared incorrectly leading to false positives when comparing and
      aligning DB schemas
      (<a href="https://github.com/qorelanguage/qore/issues/2527">issue 2527</a>)

    @subsection pgsqlsqlutilv12 PgsqlSqlUtil v1.2
    - updated for complex types

    @subsection pgsqlsqlutilv112 PgsqlSqlUtil v1.1.2
    - fixed a bug in setting a \c comment for a table column
      (<a href="https://github.com/qorelanguage/qore/issues/1886">issue 1886</a>)
    - implemented @ref cop_trunc_date() operator
      (<a href="https://github.com/qorelanguage/qore/issues/2032">issue 2032</a>)

    @subsection pgsqlsqlutilv111 PgsqlSqlUtil v1.1.1
    - implemented the \a force option (i.e. cascade) for dropping code objects
      (<a href="https://github.com/qorelanguage/qore/issues/1314">issue 1314</a>)

    @subsection pgsqlsqlutilv11 PgsqlSqlUtil v1.1
    - added support for \c cop_cast operator
      (<a href="https://github.com/qorelanguage/qore/issues/535">feature 535</a>)
    - added support for the following datatypes and aliases: bool, float, int, timetz, timestamptz, varbit
    - fixed support for the following datatypes and aliases: bit, bit varying, char, character, character varying,
      char varying, oid, varchar
    - fixed bugs handling "bigint" and "double precision" column types with schema alignments
    - fixed a bug with PgsqlTable::tryInsertImpl(); added an explicit "begin" call to make the savepoint work with
      PostgreSQL 9.3+ servers
    - fixed a bug retrieving foreign constraints; columns were not guaranteed to be returned in declaration order
    - implemented support for the \c "returning" clause as an insert option
    - fixed a bug handling tablespaces in unique constraints
    - fixed bugs in @ref SqlUtil::cop_seq() and @ref SqlUtil::cop_seq_currval()
      (<a href="https://github.com/qorelanguage/qore/issues/624">issue 624</a>)
    - added support for listing PostgreSQL types and materialized views
      (<a href="https://github.com/qorelanguage/qore/issues/699">issue 699</a>)

    @subsection pgsqlsqlutilv10 PgsqlSqlUtil v1.0
    - initial release
*/

#! the PgsqlSqlUtil namespace contains all the objects in the PgsqlSqlUtil module
public namespace PgsqlSqlUtil {
    #! returns a PgsqlTable object corresponding to the arguments
    public PgsqlTable sub get_table(AbstractDatasource nds, string nname, *hash<auto> opts) {
        return new PgsqlTable(nds, nname, opts);
    }

    #! returns a PgsqlDatabase object corresponding to the arguments
    public PgsqlDatabase sub get_database(AbstractDatasource nds, *hash<auto> opts) {
        return new PgsqlDatabase(nds, opts);
    }
}
