/** @page qore_modules Module Description

    @tableofcontents

    @section mod_overview Module Overview

    %Qore modules allow the %Qore language to be extended at run-time.

    To load a module at parse time (normally required for most modules), use the @ref requires "%requires" or @ref try-module "%try-module" parse directive. If the named feature is not already present in %Qore, %Qore will try to load the module from its list of module directories (module path). This list contains the following directories:\n
    -# directories listed in the environment variable \c QORE_MODULE_DIR (see @ref environment_variables)
    -# \c USER_MODULE_VER_DIR - build variable set to directory where Qore user modules of the specific Qore version should be installed (ex: \c /usr/share/qore-modules/0.8.12)
    -# \c MODULE_VER_DIR - build variable set to directory where Qore binary modules of the specific Qore version should be installed (ex: \c /usr/lib/x86_64-linux-gnu/qore-modules/0.8.12)
    -# \c USER_MODULE_DIR - build variable set to directory where user modules of external binary modules should be installed (ex: \c /usr/share/qore-modules)
    -# \c MODULE_DIR - build variable set to directory where external binary modules should be installed (ex: \c /usr/lib/x86_64-linux-gnu/qore-modules)
    -# directories added using @ref append-module-path "%append-module-path"

    Modules can also be loaded directly by using a path relative to the Qore script or module requiring them when using @ref requires "%requires" or @ref try-module "%try-module" parse directives:
    @code{.py}
%requires ../../directory/Module.qm
    @endcode \n

    Module implementation could be separated to multiple files and stored as a directory named with the same name as the module. To require them use @ref requires "%requires ModuleName" without ".qm" extension. All files with the extenstion *qc, *ql (e.g. functions and classes) inside the directory will be automatically included at program parse time.

    Examlpe of such separated module:
    @code{.py}
ModuleName/
    |-ModuleName.qm         # typical "qore" module file with the exception that implementation of classes and functions that it is used is stored separately
    |-SomeModuleClass.qc
    |-SomeModuleFunction.ql
    @endcode \n

    Use the load_module() function to load %Qore modules at run-time; however, note that any module providing parse support (classes, constants, functions, etc) must be loaded at parse time using the @ref requires "%requires" or @ref try-module "%try-module" parse directive.

    From %Qore 0.7.1 onwards, you can specify a comparison operator (one of < <=, =, >=, or >) and version information after the module name as well. Version numbers are compared via integer comparisons of each element, where elements are separated by a '.'. If one of the versions does not have as many elements as another, the missing elements are assumed to be '0' (i.e. version \c "1.0" compared with version \c "1.0.1" will be extended to \c "1.0.0").

    Also note that DBI drivers are loaded on demand by the @ref Qore::SQL::Datasource and @ref Qore::SQL::DatasourcePool classes.

    There are two types of modules: @ref binary_modules and @ref user_modules.

    At the time of writing this documentation, the following modules exist for %Qore:

    <b>Modules Provided With %Qore</b>
    |!Type|!Module|!Description
    |binary|<a href="../../modules/astparser/html/index.html">astparser</a>|Provides a language parser API to %Qore
    |user|<a href="../../modules/AwsRestClient/html/index.html">AwsRestClient</a>|Provides a REST API for AWS services
    |user|<a href="../../modules/BillwerkRestClient/html/index.html">BillwerkRestClient</a>|providing APIs for \
        communicating with <a href="http://billwerk.com">billwerk.com</a>'s REST API
    |user|<a href="../../modules/BulkSqlUtil/html/index.html">BulkSqlUtil</a>|Provides APIs based on \
        <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> for executing bulk DML operations
    |user|<a href="../../modules/CdsRestClient/html/index.html">CdsRestClient</a>|providing APIs for communicating \
        with the Microsoft Common Data Service REST API
    |user|<a href="../../modules/CdsRestDataProvider/html/index.html">CdsRestDataProvider</a>|Provides a \
        <a href="../../modules/DataProvider/html/index.html">data provider</a> API for the Microsoft Common Data \
        Service REST API
    |user|<a href="../../modules/ConnectionProvider/html/index.html">ConnectionProvider</a>|Provides an API for \
        pluggable connection and URL providers
    |user|<a href="../../modules/CsvUtil/html/index.html">CsvUtil</a>|Provides code to help parse CSV or other \
        structured text files and also to easily generate such files
    |user|<a href="../../modules/DataProvider/html/index.html">DataProvider</a>|Provides a generic API for data \
        providers
    |user|<a href="../../modules/DatasourceProvider/html/index.html">DatasourceProvider</a>|Provides an API to \
        translate datasource identifiers to datasource connection strings
    |user|<a href="../../modules/DbDataProvider/html/index.html">DbDataProvider</a>|Provides a \
        <a href="../../modules/DataProvider/html/index.html">data provider</a> API for databases
    |user|<a href="../../modules/DebugCmdLine/html/index.html">DebugCmdLine</a>|Provides an API to develop command \
        line debugger clients
    |user|<a href="../../modules/DebugLinenoiseCmdLine/html/index.html">DebugLinenoiseCmdLine</a>|Provides an API \
        for command line debugger clients based on the \
        <a href="https://github.com/qorelanguage/module-linenoise">linenoise</a> module
    |user|<a href="../../modules/DebugProgramControl/html/index.html">DebugProgramControl</a>|Provides an API to \
        develop debug server
    |user|<a href="../../modules/DebugHandler/html/index.html">DebugHandler</a>|Provides a websocket for debug server
    |user|<a href="../../modules/DebugUtil/html/index.html">DebugUtil</a>|Provides a general stuff for debugger
    |user|<a href="../../modules/FileLocationHandler/html/index.html">FileLocationHandler</a>|Provides an API for \
        retrieving file data based on a URL-like location string
    |user|<a href="../../modules/FilePoller/html/index.html">FilePoller</a>|Provides an API for polling files on the \
        filesystem
    |user|<a href="../../modules/FixedLengthUtil/html/index.html">FixedLengthUtil</a>|Provides code to help parse \
        data in format of fixed length lines records
    |user|<a href="../../modules/FreetdsSqlUtil/html/index.html">FreetdsSqlUtil</a>|Provides a high-level \
        DB-independent API for working with MS SQL Server and Sybase database objects; loaded automatically by the \
        <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> module when working with the \
        <a href="https://github.com/qorelanguage/module-sybase">freetds DBI driver</a> for automated schema \
        management, programmatic DB access, schema and data synchronization, and more
    |user|<a href="../../modules/FsUtil/html/index.html">FsUtil</a>|Provides a high level API for working with the \
        filesystem
    |user|<a href="../../modules/FtpPoller/html/index.html">FtpPoller</a>|Provides an API for polling files from a \
        remote directory with the FTP protocol
    |user|<a href="../../modules/FtpPollerUtil/html/index.html">FtpPollerUtil</a>|Provides definitions for the \
        <a href="../../modules/FtpPoller/html/index.html">FtpPoller</a> module
    |user|<a href="../../modules/HttpServer/html/index.html">HttpServer</a>|Provides a multi-threaded HTTP server \
        and request handler APIs; provides the infrastructure for server-side HTTP services
    |user|<a href="../../modules/HttpServerUtil/html/index.html">HttpServerUtil</a>|Provides base definitions for \
        handler classes integrating with the <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module
    |user|<a href="../../modules/Logger/html/index.html">Logger</a>|Provides a flexible logging API (aka "log4q")
    |user|<a href="../../modules/MailMessage/html/index.html">MailMessage</a>|Provides supporting classes for the \
        <a href="../../modules/Pop3Client/html/index.html">Pop3Client</a> and \
        <a href="../../modules/SmtpClient/html/index.html">SmtpClient</a> modules; mail message serialization and \
        deserialization, attachment handling
    |user|<a href="../../modules/Mapper/html/index.html">Mapper</a>|Provides data mapping classes and iterators
    |user|<a href="../../modules/MapperUtil/html/index.html">MapperUtil</a>|Provides common definitions for data \
        mapping APIs
    |user|<a href="../../modules/Mime/html/index.html">Mime</a>|Provides MIME definitions and functions; MIME type \
        lookups, MIME encoding and decoding functions, MIME multipart handling, etc
    |user|<a href="../../modules/MysqlSqlUtil/html/index.html">MysqlSqlUtil</a>|Provides a high-level DB-independent \
        API for working with MySQL database objects; loaded automatically by the \
        <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> module when working with MySQL databases for \
        automated schema management, programmatic DB access, schema and data synchronization, and more
    |user|<a href="../../modules/OracleSqlUtil/html/index.html">OracleSqlUtil</a>|Provides a high-level \
        DB-independent API for working with Oracle database objects; loaded automatically by the \
        <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> module when working with Oracle databases for \
        automated schema management, programmatic DB access, schema and data synchronization, and more
    |user|<a href="../../modules/Pop3Client/html/index.html">Pop3Client</a>|Provides POP3 client functionality; \
        provides an API to retrieve email messages from a POP3 server
    |user|<a href="../../modules/PgsqlSqlUtil/html/index.html">PgsqlSqlUtil</a>|Provides a high-level DB-independent \
        API for working with PostgreSQL database objects; loaded automatically by the \
        <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> module when working with PostgreSQL databases \
        for automated schema management, programmatic DB access, schema and data synchronization, and more
    |user|<a href="../../modules/Qdx/html/index.html">Qdx</a>|Provides support for documentation generation with \
        doxygen from %Qore sources
    |user|<a href="../../modules/Qorize/html/index.html">Qorize</a>|Provides basic support for \
        automatically-generating %Qore code from data
    |user|<a href="../../modules/QUnit/html/index.html">QUnit</a>|Provides an API for defining and executing tests \
        and reporting results in various formats
    |binary|<a href="../../modules/reflection/html/index.html">reflection</a>|Provides a reflection API to %Qore
    |user|<a href="../../modules/RestClient/html/index.html">RestClient</a>|Provides a simple API for communicating \
        with HTTP servers implementing \
        <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> services
    |user|<a href="../../modules/RestHandler/html/index.html">RestHandler</a>|Provides an easy to use interface to \
        the %Qore <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module for implementing \
        server-side <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> services
    |user|<a href="../../modules/RestSchemaValidator/html/index.html">RestSchemaValidator</a>|Provides a \
        <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> schema validation API
    |user|<a href="../../modules/SalesforceRestClient/html/index.html">SalesforceRestClient</a>|Provides an API for \
        communicating with <a href="https://www.salesforce.com">Salesforce.com</a> \
        <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> services (extends and \
        reexports functionality provided by the <a href="../../modules/RestClient/html/index.html">RestClient</a> module)
    |user|<a href="../../modules/SalesforceRestDataProvider/html/index.html">SalesforceRestDataProvider</a>|Provides \
        a <a href="../../modules/DataProvider/html/index.html">data provider</a> API for Salesforce REST connections
    |user|<a href="../../modules/Sap4HanaRestClient/html/index.html">Sap4HanaRestClient</a>|providing APIs for \
        communicating with <a href="https://sap.com">SAP S/4 Hana</a>'s REST API
    |user|<a href="../../modules/Schema/html/index.html">Schema</a>|Provides automatic schema management \
        functionality as a meta-layer for <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a>'s medium and \
        low-level schema management functionality
    |user|<a href="../../modules/ServiceNowRestClient/html/index.html">ServiceNowRestClient</a>|providing APIs for \
        communicating with the ServiceNow REST API
    |user|<a href="../../modules/ServiceNowRestDataProvider/html/index.html">ServiceNowRestDataProvider</a>|Provides a \
        <a href="../../modules/DataProvider/html/index.html">data provider</a> API for the ServiceNow REST API
    |user|<a href="../../modules/SewioRestClient/html/index.html">SewioRestClient</a>|providing APIs for \
        communicating with <a href="http://www.sewio.net">Sewio.net</a>'s RTLS Studio REST API
    |user|<a href="../../modules/SewioWebSocketClient/html/index.html">SewioWebSocketClient</a>|providing APIs for \
        communicating with <a href="http://www.sewio.net">Sewio.net</a>'s RTLS Studio WebSocket API
    |user|<a href="../../modules/SmtpClient/html/index.html">SmtpClient</a>|Provides SMTP client functionality; \
        provides an API for sending emails via an SMTP server
    |user|<a href="../../modules/SqlUtil/html/index.html">SqlUtil</a>|Provides a high-level DB-independent API for \
        working with databases; for automated schema management, programmatic DB access, schema and data \
        synchronization, and more
    |user|<a href="../../modules/Swagger/html/index.html">Swagger</a>|Provides a \
        <a href="https://swagger.io/">Swagger 2.0 REST API validation API</a>
    |user|<a href="../../modules/SwaggerDataProvider/html/index.html">SwaggerDataProvider</a>|Provides a \
        <a href="../../modules/DataProvider/html/index.html">data provider</a> API for \
        <a href="https://swagger.io/">Swagger</a> schemas
    |user|<a href="../../modules/TableMapper/html/index.html">TableMapper</a>|Provides a data mapping functionality \
        and iterator support using <a href="../../modules/SqlUtil/html/index.html">SqlUtil</a> and \
        <a href="../../modules/Mapper/html/index.html">Mapper</a> to map arbitrary data to an SQL table target
    |user|<a href="../../modules/TelnetClient/html/index.html">TelnetClient</a>|Provides Telnet client functionality
    |user|<a href="../../modules/TextWrap/html/index.html">TextWrap</a>|Provides text wrapping and filling \
        functionality
    |user|<a href="../../modules/Util/html/index.html">Util</a>|Provides a some miscellaneous generally useful \
        routines; often used by other user modules for example
    |user|<a href="../../modules/WebSocketClient/html/index.html">WebSocketClient</a>|Provides an event-driven \
        client API for connecting to WebSocket servers
    |user|<a href="../../modules/WebSocketHandler/html/index.html">WebSocketHandler</a>|Provides an interface to the \
        %Qore <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module for implementing server-side \
        WebSocket services
    |user|<a href="../../modules/WebSocketUtil/html/index.html">WebSocketUtil</a>|Provides common client and server \
        code for implementing WebSocket protocol services in %Qore
    |user|<a href="../../modules/WebUtil/html/index.html">WebUtil</a>|Provides higher-level classes for implementing \
        more complex web services in %Qore; works with the \
        <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module
    |user|<a href="../../modules/ZeyosRestClient/html/index.html">ZeyosRestClient</a>|providing APIs for \
        communicating with <a href="http://www.zeyos.com">Zeyos.com</a>'s REST API

    <b>Modules Provided Separately</b>
    |!Type|!Module|!Description
    |binary|<a href="https://github.com/qorelanguage/module-sybase">freetds</a>|Provides a FreeTDS-based DBI driver for communicating with Sybase and MS SQL Server databases
    |binary|<a href="https://github.com/qorelanguage/module-fsevent">fsevent</a>|Provides an event-driven filesystem event API
    |binary|<a href="https://github.com/qorelanguage/module-jni">jni</a>|Provides access to Java APIs in %Qore
    |binary|<a href="https://github.com/qorelanguage/module-json">json</a>|Provides JSON and JSON-RPC client functionality, also provides the following user modules:\n- <a href="http://www.qore.org/manual/modules/json/current/JsonRpcHandler/html/index.html">JsonRpcHandler</a>: provides infrastructure for implementing JSON-RPC server-side services using the <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module
    |binary|<a href="https://github.com/qorelanguage/module-linenoise">linenoise</a>|Provides a readline-like API to %Qore under a permissive license
    |binary|<a href="https://github.com/qorelanguage/module-msgpack">msgpack</a>|Provides APIs for efficient data serialization in %Qore using the <a href="https://msgpack.org/index.html">MessagePack</a> format
    |binary|<a href="https://github.com/qorelanguage/module-mysql">mysql</a>|Provides a MySQL / MariaDB / Percona DBI driver
    |binary|<a href="https://github.com/qorelanguage/module-odbc">odbc</a>|Provides an ODBC DBI driver to %Qore
    |binary|<a href="https://github.com/qorelanguage/module-oracle">oracle</a>|Provides an Oracle DBI driver, providing many advanced features such as support for named types and collections, advanced queuing, etc, also provides the following user modules:\n- <a href="http://docs.qore.org/modules/oracle/current/OracleExtensions/html/index.html">OracleExtensions</a>: provides infrastructure for SQL tracing
    |binary|<a href="https://github.com/qorelanguage/module-openldap">openldap</a>|Provides an OpenLDAP API to %Qore
    |binary|<a href="https://github.com/qorelanguage/module-pgsql">pgsql</a>|Provides a PostgreSQL DBI driver
    |binary|<a href="https://github.com/qorelanguage/module-process">process</a>|Provides an API for controlling external processes
    |binary|<a href="https://github.com/qorelanguage/module-sqlite3">sqlite3</a>|Provides an SQLite3 DBI driver
    |binary|<a href="https://github.com/qorelanguage/module-ssh2">ssh2</a>|Provides SSH2 and SFTP functionality, also provides the following user module:\n- <a href="http://docs.qore.org/modules/ssh2/current/SftpPoller/html/index.html">SftpPoller</a>: provides event-driven support for polling an SFTP server for new data
    |binary|<a href="https://github.com/qorelanguage/module-sybase">sybase</a>|Provides a Sybase DBI driver
    |binary|<a href="https://github.com/qorelanguage/module-sysconf">sysconf</a>|Provides sysconf, pathconf, and confstr APIs
    |binary|<a href="https://github.com/qorelanguage/module-tibae">tibae</a>|Provides TIBCO ActiveEnterprise(TM) (TIBCO, Inc) functionality
    |binary|<a href="https://github.com/qorelanguage/module-tibrv">tibrv</a>|Provides TIBCO Rendezvous(R) (TIBCO, Inc) functionality
    |binary|<a href="https://github.com/qorelanguage/module-uuid">uuid</a>|Provices an API for generating UUIDs
    |binary|<a href="https://github.com/qorelanguage/module-xml">xml</a>|Provides XML (SAX and DOM parsers), XPath, XML-RPC, SOAP client and server, etc functionality, also provides the following user modules:\n- <a href="http://docs.qore.org/modules/xml/current/SoapClient/html/index.html">SoapClient</a>: provides an easy to use API for making requests to SOAP servers\n- <a href="http://docs.qore.org/modules/xml/current/SalesforceSoapClient/html/index.html">SalesforceSoapClient</a>: provides an easy to use API for making requests to Salesforce.com SOAP servers\n- <a href="http://docs.qore.org/modules/xml/current/SoapHandler/html/index.html">SoapHandler</a>: provides infrastructure for implementing SOAP server-side services using the <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module\n- <a href="http://docs.qore.org/modules/xml/current/WSDL/html/index.html">WSDL</a>: provides underlying web service/WSDL support for the <a href="http://docs.qore.org/modules/xml/current/SoapClient/html/index.html">SoapClient</a> and <a href="http://docs.qore.org/modules/xml/current/SoapHandler/html/index.html">SoapHandler</a> modules\n- <a href="http://docs.qore.org/modules/xml/current/XmlRpcHandler/html/index.html">XmlRpcHandler</a>: provides infrastructure for implementing XML-RPC server-side services using the <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module
    |binary|<a href="https://github.com/qorelanguage/module-xmlsec">xmlsec</a>|Provides xmldsig and xmlenc functionality
    |binary|<a href="https://github.com/qorelanguage/module-yaml">yaml</a>|Provides YAML functionality, also provides the following user modules:\n- <a href="http://docs.qore.org/modules/yaml/current/DataStreamClient/html/index.html">DataStreamClient</a>: provides a DataStream client API extending the RestClient\n- <a href="http://docs.qore.org/modules/yaml/current/DataStreamRequestHandler/html/index.html">DataStreamRequestHandler</a>: provides a DataStream server-side handler API extending the RestHandler\n- <a href="http://docs.qore.org/modules/yaml/current/DataStreamUtil/html/index.html">DataStreamUtil</a>: provides underlying DataStream client and server protocol support\n- <a href="http://docs.qore.org/modules/yaml/current/YamlRpcClient/html/index.html">YamlRpcClient</a>: provides an API for easily making YAML-RPC calls over the network\n- <a href="http://docs.qore.org/modules/yaml/current/YamlRpcHandler/html/index.html">YamlRpcHandler</a>: provides infrastructure for implementing YAML-RPC server-side services using the <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module
    |binary|<a href="https://github.com/qorelanguage/module-zmq">zmq</a>|Provides <a href="https://zeromq.org/">ZeroMQ</a> distributed queue and clustering API support

    @section binary_modules Binary Modules

    Binary modules are written in C++ and delivered in binary form. They must conform to the %Qore Module API and have the file extension \c "*.qmod". Binary modules normally depend on other shared libraries and therefore can only be loaded if the libraries they require are present on the system and can be found in the library path.

    Binary modules are merged into @ref Qore::Program "Program" objects in the same way as the static system namespace objects are imported.  It is possible to import a binary module and be able to use only part of its functionality, for example, if the importing @ref Qore::Program "Program" cannot access the filesystem, and the module has functions that access the filesystem, only the functions that access the filesystem will not be available.  In user modules, the functional domain is set on the module level and not on the individual function or method level as with builtin objects, so user modules are either completely imported or not at all.

    Please note that as of version 0.7.0 onwards, the source code for binary modules has been split from the main %Qore library source code into separate projects; see <a href="http://www.qore.org">%Qore's home page</a> for more information.

    @section user_modules User Modules

    User modules are written in %Qore and delivered in source form. They must have the extension \c "*.qm".

    User modules will have their own dedicated @ref Qore::Program "Program" object; the @ref Qore::Program "Program" object is created automatically when the module is loaded and initialized.  The module's @ref Qore::Program "Program" object is created with locked parse options as follows:
    - @ref Qore::PO_NO_TOP_LEVEL_STATEMENTS "PO_NO_TOP_LEVEL_STATEMENTS": modules provide API services and are not designed to be executed at the top-level.  Put any initialization code in the module's \c init closure
    - @ref Qore::PO_REQUIRE_PROTOTYPES "PO_REQUIRE_PROTOTYPES": to ensure that module's APIs are transparent, all method and function declarations must include parameter and return types
    - @ref Qore::PO_REQUIRE_OUR "PO_REQUIRE_OUR": this parse option is meant to ensure that typos in variable names are caught at parse time and to ensure transparency of variable types in the module's source code
    - @ref Qore::PO_IN_MODULE "PO_IN_MODULE": this parse option is set so that module code is recognized by the system when parsing modules

    When parsing module code, the default warning mask is set to @ref Qore::WARN_MODULES "WARN_MODULES", and any warnings are treated as errors.   Furthermore, any restrictions that the importing @ref Qore::Program "Program" object has will be added to the module's @ref Qore::Program "Program" object.

    Any @ref qore_namespaces "namespaces", @ref qore_classes "classes", @ref constants "constants", @ref qore_functions "functions", and @ref global_variables "global variables" declared as @ref mod_public "public" will be exported into the importing @ref Qore::Program "Program" object; all other declarations will be private to the module's @ref Qore::Program "Program" object.

    @note The root namespace of a module @ref Qore::Program "Program" is always @ref mod_public "public" by default, however
    declarations in the root namespace must be marked @ref mod_public "public" to be exported to importing @ref Qore::Program "Program" objects.

    If a user module imports other modules with the <tt>%requires(reexport)</tt> form of the @ref requires "%requires" parse directive, then any loaded definitions will also be loaded into the importing @ref Qore::Program "Program".

    Note that global variables exported from a module's @ref Qore::Program "Program" object are exported as references; each global variable declared in a module is unique, and they reside in the module's @ref Qore::Program "Program" object.

    Furthermore, when using an environment with multiple @ref Qore::Program "Program" objects, if a user module has already been loaded and initialized, then it's functional domain mask is compared against any importing @ref Qore::Program "Program" object's restrictions; if the module uses functionality that is not allowed in the importing @ref Qore::Program "Program" object, then an exception is raised and the module is not imported.

    Also note that the @ref Qore::Program::constructor() applies a mask to the parse option mask option when @ref Qore::Program "Program" objects are created in a user module; in this case the parse options passed to the child @ref Qore::Program "Program" object are masked with the current parse options in the user module, and they are locked so that they cannot be made less restrictive.  This is to prevent user modules from circumventing functional restrictions imposed by parse options.

    @subsection user_module_declarations User Module Declarations

    User modules are declared with a special syntax in %Qore:

    <b>User Module Declaration Syntax</b>\n
    &nbsp;&nbsp;&nbsp;&nbsp;<b><tt>module</tt></b> <i>name</i> <tt>{</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt><b>version</b> = &quot;</tt><i>version string</i><tt>&quot;;</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt><b>desc</b> = &quot;</tt><i>description string</i><tt>&quot;;</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt><b>author</b> = &quot;</tt><i>author string</i><tt>&quot;;</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>[<b>url</b> = &quot;</tt><i>URL string</i><tt>&quot;;]</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>[<b>license</b> = &quot;</tt><i>license string</i><tt>&quot;;]</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>[<b>init</b> = </tt><i>@ref closure "initialization closure"</i><tt>;]</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<tt>[<b>del</b> = </tt><i>@ref closure "deletion closure"</i><tt>;]</tt>\n
    &nbsp;&nbsp;&nbsp;&nbsp;<tt>}</tt>

    Module properties are as follows:
    - \c version: (required) must be assigned to a string giving the version of the module
    - \c desc: (required) must be assigned to a string giving a text description of the module
    - \c author: (required) must be assigned to a string giving the module's author's name
    - \c url: (optional) if present, must be a string giving the URL of the module
    - \c license: (optional) if present, must be a string giving the license of the module
    - \c init: (optional) if present, must be a closure that will be executed when the module is loaded; this can be used to initialize the module, for example
    - \c del: (optional) if present, must be a closure that will be executed when the module is unloaded; this can be used to stop running services or free resources managed and still allocated by the module, for example

    @note
    - any unhandled exceptions in the \c init closure will cause the module to fail to load
    - unhandled exceptions in the \c init and \c del closures are displayed on @ref Qore::stdout "stdout"

    @subsection mod_public The "public" Keyword

    Only objects defined with the <b><tt>public</tt></b> keyword are made available in @ref Qore::Program "Program" objects importing the user module.  All other declarations and definitions are private to the module.

    The <b><tt>public</tt></b> keyword also affects inheritance in child @ref Qore::Program "Program" objects as well as controlling exported symbols from user modules.

    The <b><tt>public</tt></b> keyword must be used with the following declarations in the module to export them:
    - @ref qore_namespaces "namespaces": namespaces themselves must be declared <b><tt>public</tt></b> in order for any of their contents also to be exported (it is an error to try to declare public members of a module-private namespace). ex: @code{.py}
public namespace MyNamespace { ... }@endcode
    - @ref qore_classes "classes": classes not declared <b><tt>public</tt></b> will not be exported; there is no way to export part of a class; either the entire class is exported or it is not. ex: @code{.py}
public MyNamespace {
    public MyClass { ... }
}@endcode
    - @ref constants "constants": constants must be declared <b><tt>public</tt></b> to be exported; ex: @code{.py}
public namespace MyNamespace {
    public const MyConst = 100;
}@endcode
    - @ref qore_functions "functions": function variants must be declared <b><tt>public</tt></b> in order to be exported. ex: @code{.py}
public MyNamespace {
    public int sub my_func() { ... }
}@endcode
    - @ref global_variables "global variables": only global variables declared <b><tt>public</tt></b> will be exported. ex: @code{.py}
public namespace MyNamespace {
    public our int OurInt;
}@endcode

    @note Global variable declarations in a namespace declaration cannot be initialized at the point they are declared, also, since @ref Qore::PO_NO_TOP_LEVEL_STATEMENTS is set for user module @ref Qore::Program "Program" objects, global variables also cannot be initialized at the top-level.  Use the \c init closure to initialize the module and any global variables requiring initialization.

    User modules are only imported into a @ref Qore::Program "Program" if the importing @ref Qore::Program "Program" can use all of the capabilities used in the user module.  It is not possible to partially import a user module (in contrast with @ref binary_modules "binary modules", which can be imported even if they expose functionality not allowed in the importing @ref Qore::Program "Program", however that functionality will not be available in that case).  User module @ref Qore::Program "Program" objects have a functional domain attribute set on the @ref Qore::Program "Program" level, so either a user module is imported in its entirety or not at all.

    @subsection User Module Example

    Here is an example declaring user module \c "foo" version \c "1.0":
    @code{.py}
module foo {
    version = "1.0";
    desc = "test module";
    author = "Foobar Industries, inc";
    url = "http://example.com";
    license = "MIT";

    init = sub () {
        Foo::initialized = True;
	Bar::OurBool = False;
    };

    del = sub () {
        print("goodbye, cruel world!\n");
    }
}

# do not use "$", assume local scope for variables
%new-style

# nothing in namespace ::Foo is exported
namespace Foo {
    # inline global variable declarations cannot be initialized when declared
    our bool initialized;

    class SuperClass {
    }
    class NotSoGreatClass {
    }
    class UnstableClass {
    }
}

# public members of namespace ::Bar are exported
public namespace Bar {
    # Bar::SomeClass is exported
    public class SomeClass {
    }

    # Bar::add(int, int) is exported
    public int sub add(int x, int y) { return x + y; }

    # Bar::OurBool is exported
    public our bool OurBool;

    # Bar::PrivateClass is not exported
    class PrivateClass {
    }
}@endcode

    @since %Qore 0.8.4 user modules are supported

    @since %Qore 0.9.0 user modules implementation could be separated to multiple files

    @subsection user_module_program_scope Program Scope in Object-Oriented Programs Using User Modules Providing Their Own Threads

    When using the @ref exec-class "%exec-class" parse directive, the application object will go out of scope as soon as the
    constructor terminates (unless there are valid scope-extending references to the application object, such as making an
    assignment of <tt>self</tt> to a global variable in the contructor).

    Therefore when using a module that provides services in its own threads (such as, for example, the
    <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module), it's important to make sure that the application
    object does not go out of scope while non-static method call references to the application object are needed by active threads
    in the user module (for example, non-static method call references passed as callbacks to the
    <a href="../../modules/HttpServer/html/index.html">HttpServer</a> module, etc).

    This also applies to call references to non-static methods passed to set_signal_handler().

    If a module thread tries to use a callback or closure in a @ref Qore::Program "Program" that has already gone out of scope,
    an \c OBJECT-ALREADY-DELETED exception (\c "attempt to access member of an already-deleted object") is thrown.

    Therefore in such cases it's best to wait for all threads in any modules to terminate before allowing the application object's
    constructor to terminate.

    For an example of this, see the example program <tt>examples/httpserver.q</tt> where the main @ref Qore::Program "Program"
    calls HttpServer::waitStop() before exiting the application object's constructor for this reason.
*/
