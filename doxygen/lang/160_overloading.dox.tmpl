/** @page overloading Overloading

    Functions and methods can be overloaded if parameter types are declared as in the following example:

    @code{.py}
int sub example(int i) {
    printf("i=%d\n", i);
    return i + 1;
}

string sub example(string str) {
    printf("str=%s\n", str);
    return str + "foo";
}
    @endcode

    In this case, the first version (<tt>example(int)</tt>) will be executed if called with an integer argument, and the second (<tt>example(string)</tt>) if called with a string argument.

    Class methods may also be overloaded, but note that @ref destructors "destructor()", @ref copy_methods "copy()", @ref methodGate_methods "methodGate()", @ref memberGate_methods "memberGate()", and @ref memberNotification_methods "memberNotification()" methods may not be overloaded (see @ref qore_classes for more information).
*/
