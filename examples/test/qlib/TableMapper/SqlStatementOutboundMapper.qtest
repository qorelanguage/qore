#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/SqlUtil.qm
%requires ../../../../qlib/Mapper.qm
%requires ../../../../qlib/TableMapper.qm

%exec-class Main

# unused, but required for "select hash" argument
const SELECT_HASH = (
    "columns": ("a", "b"),
    "where": ("a": 1),
    );

const MAPV = (
    "mapped_a": "a",
    "mapped_b": "b",
    "created_c": ("code": *string sub (*any v, hash rec) { return sprintf("%n - %n", rec.a, rec.b); }),
    "constant_d": ("constant" : 1),
    "runtime": ("runtime": "rt"),
    );

const INPUT = (
    ("a": 1, "b": 1),
    ("a": 1, "b": 2),
    );

const OUTPUT = (
    ("mapped_a": 1, "mapped_b": 1, "created_c": "1 - 1", "constant_d": 1, "runtime": "rtv"),
    ("mapped_a": 1, "mapped_b": 2, "created_c": "1 - 2", "constant_d": 1, "runtime": "rtv"),
    );

# just return INPUTs as it would be returned by SQLStatement
class FakeSQLStatement inherits Qore::AbstractIterator {
    private {
        int m_ix = 0;
    }

    bool next() {
        return m_ix < 2;
    }

    bool valid() { return True; }

    any getValue() {
        hash ret = INPUT[m_ix];
        m_ix++;
        return ret;
    }

    private list getAdvancePtr(int rows) {
        list l = INPUT;

        if (m_ix)
            splice l, 0, m_ix;

        if (rows >= 0)
            splice l, rows;

        m_ix += l.size();

        return l;
    }

    list fetchRows(softint rows = -1) {
        return getAdvancePtr(rows);
    }

    hash fetchColumns(softint rows = -1) {
        hash h = map {$1: ()}, INPUT[0].keyIterator();
        map (map h{$1.key} += $1.value, $1.pairIterator()), getAdvancePtr(rows);
        return h;
    }

    bindArgs(softlist vargs) {}

    commit() {}
    rollback() {}

    prepare(string s) {}
    execArgs(list l) {}
    getOutput() {}
    getSQL() {}

    *hash describe() {
    }
}

# dummy datasource-like class for FakeAbstractTable
class FakeDatasource inherits Qore::SQL::AbstractDatasource {
    *string getPassword() {}
    *string getOSEncoding() {}
    *string getDBName() {}
    any selectRows(string sql) {}
    bool inTransaction() { return False;}
    any getClientVersion() {}
    any exec(string sql) {}
    *int getPort() {}
    any execRaw(string sql) {}
    any getServerVersion() {}
    *string getHostName() {}
    string getDriverName() { return ""; }
    any select(string sql) {}
    string getDBEncoding() { return ""; }
    any vselect(string sql, softlist vargs) {}
    string getConfigString() { return ""; }
    any vselectRows(string sql, softlist vargs) {}
    nothing beginTransaction() {}
    nothing rollback() {}
    any selectRow(string sql) {}
    hash getConfigHash() {}
    nothing commit() {}
    any vselectRow(string sql, softlist vargs) {}
    any vexec(string sql, softlist vargs) {}
    *string getUserName() {}
    bool currentThreadInTransaction() { return False; }
}

# Actually we don't need real table. Just a FakeSQLStatement returned from getRowIterator()
class FakeAbstractTable inherits SqlUtil::AbstractTable {
    public {
        FakeDatasource fds();
    }
    constructor() : SqlUtil::AbstractTable(fds, "foo_table") {}
    AbstractIterator getRowIterator(hash h, *reference sql) { return new FakeSQLStatement(); }

    string getRenameSqlImpl(string new_name)  {}
    AbstractPrimaryKey getPrimaryKeyImpl(any a)  {}
    Constraints getConstraintsImpl(any a)  { return new Constraints(); }
    AbstractCheckConstraint addCheckConstraintImpl(string cname, string src, *hash opt)  {}
    nothing setupTableImpl(hash desc, *hash opt)  {}
    bool uniqueIndexCreatesConstraintImpl(any a)  {}
    ForeignConstraints getForeignConstraintsImpl(*hash opt)  {}
    bool checkExistenceImpl(any a)  {}
    AbstractPrimaryKey addPrimaryKeyImpl(string cname, hash ch, *hash opt)  {}
    AbstractColumn addColumnImpl(string cname, hash opt, bool nullable = True)  {}
    Indexes getIndexesImpl(any a)  {}
    AbstractForeignConstraint addForeignConstraintImpl(string cname, hash ch, string table, hash tch, *hash opt)  {}
    Columns describeImpl(any a)  {}
    AbstractTrigger addTriggerImpl(string tname, string src, *hash opt)  {}
    AbstractIndex addIndexImpl(string iname, bool enabled, hash ch, *hash opt)  {}
    *list getAlignSqlImpl(AbstractTable t, *hash opt)  {}
    Triggers getTriggersImpl(any a)  {}
    string getCreateTableSqlImpl(*hash opt)  {}
    bool tryInsertImpl(string sql, hash row)  {}
    bool supportsTablespacesImpl(any a)  {}
    *string getSqlValueImpl(any v)  {}
    AbstractUniqueConstraint addUniqueConstraintImpl(string cname, hash ch, *hash opt)  {}
    hash getQoreTypeMapImpl(any a)  {}
    *hash doReturningImpl(hash opt, reference sql, list args)  {}
    hash getTypeMapImpl(any a)  {}
    bool constraintsLinkedToIndexesImpl(any a)  {}
    bool emptyImpl(any a)  {}
    *list getCreateMiscSqlImpl(*hash opt, bool cache)  {}
    string getCreateSqlImpl(list l)  {}
    bool hasArrayBind(any a)  {}
    nothing doSelectLimitOnlyUnlockedImpl(reference sql, reference args, *hash qh)  {}
    nothing copyImpl(AbstractTable old)  {}
    nothing doSelectOrderByWithOffsetSqlUnlockedImpl(reference sql, reference args, *hash qh, *hash jch, *hash ch, *hash psch, list coll) {}
}


class Main inherits QUnit::DependencyInjectedTest {

    constructor() : DependencyInjectedTest("SqlStatementOutboundMapper", "1.0") {
        addTestCase("SqlStatementOutboundMapper iterator", \testIterator());
        addTestCase("SqlStatementOutboundMapper hash rows", \testHashRows());
        addTestCase("SqlStatementOutboundMapper context", \testContext());

        setScriptPath(get_script_path());
        set_return_value(main());
    }

    performModuleInjections() {
        injectIntoModule("../../../../qlib/TableMapper.qm");
    }

    performInjections(Program p) {
        p.importClass("FakeSQLStatement", "Qore::SQL::SQLStatement", True);
    }

    private testIterator() {
        FakeAbstractTable t();
        SqlStatementOutboundMapper m(t, SELECT_HASH, MAPV, ("runtime": ("rt": "rtv")));
        AbstractIterator it = m.iterator();

        int i = 0;
        while (it.next()) {
            hash row = it.getValue();
            testAssertion(sprintf("Row verification: %d", i), \equals(), (row, OUTPUT[i]));
            i++;
        }
    }

    private testHashRows() {
        FakeAbstractTable t();
        SqlStatementOutboundMapper m(t, SELECT_HASH, MAPV, ("runtime": ("rt": "rtv")));
        list l = ();
        while (*list tl = m.getDataRows()) {
            l += tl;
        }
        assertEq(OUTPUT, l, "getDataRows()");
    }

    private testContext() {
        FakeAbstractTable t();
        SqlStatementOutboundMapper m(t, SELECT_HASH, MAPV, ("runtime": ("rt": "rtv")));
        list l = ();
        while (*hash th = m.getData()) {
            map l += $1, th.contextIterator();
        }
        assertEq(OUTPUT, l, "getData()");
    }
}
