#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/Logger.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/EmpathicBuildingDataProvider

%try-module json >= 1.5
%define NoJson
%endtry

%exec-class Main

public class Main inherits QUnit::Test {
    private {
        EmpathicBuildingRestConnection ebrc;
        Logger logger;

        # command-line options
        const MyOpts = Opts + {
            "conn": "c,connection=s",
        };

        const OptionColumn = 22;
    }

    constructor() : Test("EmpathicBuildingDataProviderTest", "1.0", \ARGV, MyOpts) {
        addTestCase("data provider tests", \dataProviderTest());
        addTestCase("connection tests", \connectionTest());
        addTestCase("poll tests", \pollTest());

        try {
            setupConnection();
        } catch (hash<ExceptionInfo> ex) {
            if (m_options.verbose > 2) {
                printf("%s\n", get_exception_string(ex));
            } else if (m_options.verbose) {
                printf("%s: %s\n", ex.err, ex.desc);
            }
        }

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    setUp() {
        Logger logger("test", LoggerLevel::getLevelInfo());
        if (m_options.verbose > 2) {
            logger.addAppender(new StdoutAppender());
        }
    }

    tearDown() {
    }

    checkModule() {
%ifdef NoJson
        testSkip("no json module");
%endif
    }

    dataProviderTest() {
        if (!ebrc) {
            testSkip("no connection");
        }

        AbstractDataProvider prov = ebrc.getDataProvider();
        assertEq("empathicbuilding", prov.getName());
        prov = prov.getChildProviderPath("measurements/create");
        assertEq("create", prov.getName());
    }

    connectionTest() {
        checkModule();
        {
            EmpathicBuildingRestConnection rc({
                "name": "test",
                "desc": "test",
                "url": "https://localhost",
            });
            assertEq(True, rc instanceof EmpathicBuildingRestConnection);

            RestClient client = rc.get(False);
            # issue #3321: check default timeouts
            assertEq(45000, client.getTimeout());
            assertEq(45000, client.getConnectTimeout());
        }
    }

    pollTest() {
        if (!ebrc) {
            testSkip("no connection");
        }

        {
            # first test a standard ping
            hash<PingInfo> ping = ebrc.ping(True);
            assertTrue(ping.ok);
            assertEq("OK", ping.info);

            TestPollingConnectionMonitor monitor(logger);
            on_exit delete monitor;

            monitor.add(ebrc);
            hash<auto> info = monitor.waitForResult();
            on_error if (info.ex) {
                printf("%s\n", get_exception_string(info.ex));
            }
            assertEq("OK", info.result);
        }
    }

    private error(string fmt) {
        throw "OPTION-ERROR", sprintf("%s: ERROR: %s", get_script_name(), vsprintf(fmt, argv));
    }

    private setupConnection() {
        *string conn_name = m_options.conn ?? ENV.HUE_CONNECTION;
        if (conn_name.val()) {
            AbstractConnection conn = get_connection(conn_name);
            if (!(conn instanceof EmpathicBuildingRestConnection)) {
                error("connection %y is type %y; expecting \"EmpathicBuildingRestConnection\"", conn_name,
                    conn.className());
            }
            ebrc = cast<EmpathicBuildingRestConnection>(conn);
        } else {
            ebrc = new EmpathicBuildingRestConnection({
                "name": "eb",
                "desc": "eb",
                "url": "ebrests://staging-api.empathicbuilding.com",
                "opts": {
                    "token": "fake-token",
                },
            });
        }
    }
}

class TestPollingConnectionMonitor inherits PollingConnectionMonitor {
    private {
        Queue msgq();
    }

    constructor(*Logger logger) : PollingConnectionMonitor(logger) {
        ping_timeout = 5s;
    }

    hash<auto> waitForResult() {
        return msgq.get();
    }

    private handlePingSuccess(string name, date delta, *bool oldok) {
        PollingConnectionMonitor::handlePingSuccess(name, delta, oldok);
        msgq.push({"name": name, "result": "OK"});
    }

    private handlePingFailed(string name, date delta, hash<ExceptionInfo> ex) {
        PollingConnectionMonitor::handlePingFailed(name, delta, ex);
        msgq.push({"name": name, "result": "error", "ex": ex});
    }

    private handlePingTimeout(string name, date delta) {
        PollingConnectionMonitor::handlePingTimeout(name, delta);
        msgq.push({"name": name, "result": "timeout"});
    }
}
