#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/HttpServer.qm
%requires ../../../../qlib/WebSocketUtil.qm
%requires ../../../../qlib/WebSocketHandler.qm
%requires ../../../../qlib/WebSocketClient.qm

%exec-class WebSocketClientTest

class MyWsConnection inherits WebSocketConnection {
    constructor(WebSocketHandler handler) : WebSocketConnection(handler) {
        map send($1), WebSocketClientTest::Data;
    }

    gotMessage(string msg) {
        send("RESPONSE:" + msg);
        #printf("GOT MSG: %y\n", msg);
    }
}

class MyWsHandler inherits WebSocketHandler {
    public {
        bool debug = False;
    }

    WebSocketConnection getConnectionImpl(hash cx, hash hdr, string cid) {
        return new MyWsConnection(self);
    }

    logError(string fmt) {
        if (debug) {
            vprintf("ERROR " + fmt + "\n", argv);
        }
    }

    logInfo(string fmt) {
        if (debug) {
            vprintf("INFO " + fmt + "\n", argv);
        }
    }

    logDebug(string fmt) {
        if (debug) {
            vprintf("DEBUG " + fmt + "\n", argv);
        }
    }
}

class WebSocketClientTest inherits QUnit::Test {
    public {
        HttpServer mServer;
        MyWsHandler wsHandler();
        int port;
        int responseSize;

        const Data = (
            "test1",
            <beeffeed>,
            "test3",
        );
    }

    constructor() : Test("WebSocketClientTest", "1.0") {
        addTestCase("WebSocketClient tests", \webSocketClientTests());
        addTestCase("connection tests", \connectionTests());

        mServer = new HttpServer(\log(), \log());
        mServer.setHandler("ws-handler", "", NOTHING, wsHandler);
        mServer.setDefaultHandler("ws-handler", wsHandler);
        port = mServer.addListener(<HttpListenerOptionInfo>{"service": 0}).port;

        set_return_value(main());

        mServer.stop();
    }

    webSocketClientTests() {
        list<auto> l = ();
        Counter c(1);
        code cb = sub (*data msg) {
            #printf("RECEIVED: %y\n", msg);
            if (exists msg) {
                l += msg;
                if (l.size() == responseSize)
                    c.dec();
            }
        };
        responseSize = Data.size();
        code log = code sub (string str) {
            return sub (string fmt) {
                #vprintf("CLIENT " + str + ": " + fmt + "\n", argv);
                remove argv;
            };
        };
        hash<auto> opts = {
            "url": "ws://localhost:" + port,
            "log": log("INFO"),
            "errlog": log("ERROR"),
            "debuglog": log("DEBUG"),
        };
        WebSocketClient wsc(cb, opts);
        wsc.connect();
        c.waitForZero();
        assertEq(Data, l);
        c.inc();
        l = ();
        responseSize = 1;
        # issue #2566: send a unidirectional PONG to make sure that the WebSocketHandler can handle it
        # https://tools.ietf.org/html/rfc6455#section-5.5.3: unsolicited PONG messages must be ignored
        wsc.pong();
        wsc.send("REQUEST");
        c.waitForZero();
        assertEq(list("RESPONSE:REQUEST"), l);
        wsc.disconnect();
        delete wsc;
    }

    connectionTests() {
        string url = "ws://localhost:8099";
        WebSocketConnectionObject conn("test", "test", url);
        WebSocketClient client = conn.get(False);
        assertEq(url, client.getUrl());

        conn = new WebSocketConnectionObject("test", "test", url, {"monitor": False});
        client = conn.get(False);
        assertEq(url, client.getUrl());
    }

    private log(string str) {
        if (m_options.verbose > 2)
            vprintf(str + "\n", argv);
    }
}
