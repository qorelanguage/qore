#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/HttpServer.qm
%requires ../../../../qlib/WebSocketUtil.qm
%requires ../../../../qlib/WebSocketHandler.qm
%requires ../../../../qlib/WebSocketClient.qm

%exec-class WebSocketClientTest

class MyWsConnection inherits WebSocketConnection {
    constructor(WebSocketHandler handler) : WebSocketConnection(handler) {
        map send($1), WebSocketClientTest::Data;
    }

    gotMessage(string msg) {
        send("RESPONSE:"+msg);
        #printf("GOT MSG: %y\n", msg);
    }
}

class MyWsHandler inherits WebSocketHandler {
    WebSocketConnection getConnectionImpl(hash cx, hash hdr, string cid) {
        return new MyWsConnection(self);
    }
}

class WebSocketClientTest inherits QUnit::Test {
    public {
        HttpServer mServer;
        MyWsHandler wsHandler();
        int port;
        int responseSize;

        const Data = (
            "test1",
            <beeffeed>,
            "test3",
            );
    }

    constructor() : Test("WebSocketClientTest", "1.0") {
        addTestCase("WebSocketClient tests", \webSocketClientTests());
        addTestCase("connection tests", \connectionTests());

        mServer = new HttpServer(\log(), \log());
        mServer.setHandler("ws-handler", "", NOTHING, wsHandler);
        mServer.setDefaultHandler("ws-handler", wsHandler);
        port = mServer.addListener(0).port;

        set_return_value(main());

        mServer.stop();
    }

    webSocketClientTests() {
        list l = ();
        Counter c(1);
        code cb = sub (*data msg) {
            #printf("RECEIVED: %y\n", msg);
            if (exists msg) {
                l += msg;
                if (l.size() == responseSize)
                    c.dec();
            }
        };
        responseSize = Data.size();
        WebSocketClient wsc(cb, ("url": "ws://localhost:" + port));
        wsc.connect();
        c.waitForZero();
        assertEq(Data, l);
        c.inc();
        l = ();
        responseSize = 1;
        # issue #2566: send a unidirectional PONG to make sure that the WebSocketHandler can handle it
        # https://tools.ietf.org/html/rfc6455#section-5.5.3: unsolicited PONG messages must be ignored
        wsc.pong();
        wsc.send("REQUEST");
        c.waitForZero();
        assertEq(list("RESPONSE:REQUEST"), l);
        wsc.disconnect();
        delete wsc;
    }

    connectionTests() {
        string url = "ws://localhost:8099";
        WebSocketConnectionObject conn("test", "test", url, False, NOTHING, parse_url(url));
        WebSocketClient client = conn.get(False);
        assertEq(url, client.getUrl());

        hash<ConnectionConstructorInfo> info = conn.getConstructorInfo();
        assertEq("WebSocketClient", info.module);
        assertEq("WebSocketClient", info.class_name);
        assertEq(url, info.args[0].url);
        assertEq(45s, info.args[0].timeout);
        assertEq(45s, info.args[0].connect_timeout);
        checkPreAndPostProcessing(info);
    }

    private checkPreAndPostProcessing(hash<ConnectionConstructorInfo> info) {
        if (info.pre_processing) {
            Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
            if (info.module)
                p.loadModule(info.module);
            string pre_processing = sprintf("sub pre_processing(reference<*softlist<auto>> args, bool connect, *hash rtopts) { %s }", info.pre_processing);
            # ensure that the pre processing code can be parsed
            p.parse(pre_processing, "pre processing");
            assertTrue(True, "pre processing: " + info.class_name);
        }
        if (info.post_processing) {
            Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
            if (info.module)
                p.loadModule(info.module);
            string post_processing = sprintf("sub post_processing(%s obj, bool connect, *hash rtopts) { %s }", info.class_name, info.post_processing);
            # ensure that the post processing code can be parsed
            p.parse(post_processing, "post processing");
            assertTrue(True, "post processing: " + info.class_name);
        }
    }

    private log(string str) {
        if (m_options.verbose > 2)
            vprintf(str + "\n", argv);
    }
}
