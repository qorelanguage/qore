#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/FixedLengthUtil.qm

%exec-class Test

class Test inherits QUnit::Test {
    public {
        const StrData = "11111bb  \ncddd31122014\n22222gggg\n";
        const StrData2 = "00001aaaa\n00002bbbb\n00001cccc\n99999dddd\n";

        const Specs = (
            "type1" : (
                "col1" : (
                    "length" : 5,
                    "type"   : "int",
                ),
                "col2" : (
                    "length" : 4,
                    "type"   : "string",
                ),
            ),
            "type2" : (
                "col3" : (
                    "length" : 1,
                    "type"   : "string",
                ),
                "col4" : (
                    "length" : 3,
                    "type"   : "string",
                ),
                "col5" : (
                    "length"   : 8,
                    "type"     : "date",
                    "format"   : "DDMMYYYY",
                    # "timezone" : "UTC", # use global if omitted
                ),
            ),
            );

        # Incorrect use
        const RedundantSpecs = (
            "type1" : (
                "col1" : (
                    "length" : 5,
                    "type"   : "int",
                ),
                "col2" : (
                    "length" : 4,
                    "type"   : "string",
                ),
            ),
            "type2" : (
                "col1" : (
                    "length" : 5,
                    "type"   : "int",
                ),
                "col2" : (
                    "length" : 4,
                    "type"   : "string",
                ),
            ),
            );

        # test default value
        const SpecsWithDefault = (
            "type1" : (
                "col1" : (
                    "length" : 5,
                    "type"   : "int",
                    "default"  : "00001",
                ),
                "col2" : (
                    "length" : 4,
                    "type"   : "string",
                ),
            ),
            "type2" : (
                "col1" : (
                    "length" : 5,
                    "type"   : "int",
                    "default"  : "00002",
                ),
                "col2" : (
                    "length" : 4,
                    "type"   : "string",
                ),
            ),
        );

        const HashData = (
            ("type": "type1", "record": ("col1": 11111, "col2": "bb")),
            ("type": "type2", "record": ("col3": "c", "col4": "ddd", "col5": 2014-12-31Z)),
            ("type": "type1", "record": ("col1": 22222, "col2": "gggg")),
            );

        const HashData2 = (
            ("type": "type1", "record": ("col2": "aaaa")),
            ("type": "type2", "record": ("col2": "bbbb")),
            ("type": "type1", "record": ("col2": "cccc")),
            ("type": "type1", "record": ("col1": "99999", "col2": "dddd")),
            );

        const GlobalOptions = (
            "encoding"     : "UTF-8",
            "eol"          : "\n",
            "ignore_empty" : True,
            "timezone"     : "UTC", # used if not in some date column specification
            );

        # Writer
        const GlobalWriterOptions = (
            "eol" : "\n",
            );

        # padding tests
        const PADDING_SPEC = (
            "r1" : (
                "c1": ( "length": 5, "type": "string", "padding_char": "X"),
                "c2": ( "length": 5, "type": "string", "padding": "left", "padding_char": "0"),
                "c3": ( "length": 5, "type": "string", "padding": "right", "padding_char": "0"),
                "c4": ( "length": 5, "type": "string", "padding": "left", "padding_char": " "),
                ),
            "r2" : (
                "c1": ( "length": 5, "type": "int"),
                "c2": ( "length": 5, "type": "int", "padding_char": "0"),
                "c3": ( "length": 5, "type": "int", "padding_char": "0"),
                ),
            "r3" : (
                "c1": ( "length": 6, "type": "float"),
                "c2": ( "length": 6, "type": "float", "padding_char": "0"),
                "c3": ( "length": 6, "type": "float", "padding_char": "0"),
                "c4": ( "length": 8, "type": "float", "padding_char": "0"),
                ),
            );

        const PADDING_DATA1 = (
            ("type": "r1", "record": ("c1": "a", "c2": "a", "c3": "a", "c4": "a")));
        const PADDING_DATA2 = (
            ("type": "r2", "record": ("c1": -1, "c2": +1, "c3": -1)));
        const PADDING_DATA3 = (
            ("type": "r3", "record": ("c1": -1.2, "c2": 1.2, "c3": -1.2, "c4": -2e-34)));

        const PADDING_OUTPUT1 = "aXXXX0000aa0000    a\n";
        const PADDING_OUTPUT2 = "   -100001-0001\n";
        const PADDING_OUTPUT3 = "  -1.20001.2-001.2-002e-34\n";
    }

    constructor() : QUnit::Test("FixedLengthUtil", "1.0", \ARGV) {
        addTestCase("FixedLengthUtil basic tests", \basicTests());
        addTestCase("FixedLengthUtil padding test #1", \test_padding_1());
        addTestCase("FixedLengthUtil padding test #2", \test_padding_2());
        addTestCase("FixedLengthUtil padding test #3", \test_padding_3());
        set_return_value(main());
    }

    basicTests() {
        FixedLengthAbstractIterator i = new FixedLengthDataIterator(StrData, Specs, GlobalOptions);
        testAssertionValue("line 1 present", i.next(), True);
        testAssertionValue("line 1 content check", i.getValue(), HashData[0]);
        testAssertionValue("line 2 present", i.next(), True);
        testAssertionValue("line 2 content check", i.getValue(), HashData[1]);
        testAssertionValue("line 3 present", i.next(), True);
        testAssertionValue("line 3 content check", i.getValue(), HashData[2]);
        testAssertionValue("line 4 is not there", i.next(), False);

        i = new FixedLengthDataIterator(StrData, RedundantSpecs, GlobalOptions);

        code test_closure = sub () {
            i.next();
            i.getValue();
        };
        testAssertion("Line with byte length", test_closure, NOTHING, new TestResultExceptionType("FIXED-LENGTH-UTIL-NON-MATCHING-TYPE"));

        FixedLengthDataWriter w(Specs, GlobalWriterOptions);
        testAssertionValue("file content check", w.write(HashData), StrData);

        w = new FixedLengthDataWriter(SpecsWithDefault, GlobalWriterOptions);
        testAssertionValue("file content check", w.write(HashData2), StrData2);

        StringOutputStream output();
        FixedLengthWriter writer(output, Specs, GlobalWriterOptions);
        writer.write(HashData);
        assertEq(StrData, output.getData());

        writer = new FixedLengthWriter(output, SpecsWithDefault, GlobalWriterOptions);
        writer.write(HashData2);
        assertEq(StrData2, output.getData());
    }

    test_padding_1() {
        FixedLengthDataWriter pw1(PADDING_SPEC);
        testAssertionValue("file content check - padding of strings", pw1.write(PADDING_DATA1), PADDING_OUTPUT1);
    }

    test_padding_2() {
        FixedLengthDataWriter pw2(PADDING_SPEC);
        testAssertionValue("file content check - padding of integers", pw2.write(PADDING_DATA2), PADDING_OUTPUT2);
    }

    test_padding_3() {
        FixedLengthDataWriter pw3(PADDING_SPEC);
        testAssertionValue("file content check - padding of floats", pw3.write(PADDING_DATA3), PADDING_OUTPUT3);
    }
}
