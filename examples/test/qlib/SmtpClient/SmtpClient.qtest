#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

# purposely test deprecated functionality
%disable-warning deprecated

%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/SmtpClient.qm
%requires ../../../../qlib/QUnit.qm

%exec-class SmtpClientTest

public class SmtpClientTest inherits QUnit::Test {
    constructor() : Test("SmtpClientTest", "1.0") {
        addTestCase("SmtpClient tests", \smtpClientTests());
        addTestCase("connection tests", \connectionTests());
        set_return_value(main());
    }

    smtpClientTests() {
        SmtpClient smtp("smtp://user:pass@host.com");
        assertEq("host.com:25", smtp.getTarget());
        smtp = new SmtpClient("user:pass@x:23");
        assertEq("x:23", smtp.getTarget());
        smtp = new SmtpClient("smtp://user:pass@x1:23");
        assertEq("x1:23", smtp.getTarget());
        smtp = new SmtpClient("smtp://user:pass@x1");
        assertEq("x1:25", smtp.getTarget());
        smtp = new SmtpClient("smtp://user:pass@socket=%2Ftmp%2Fsock");
        assertEq("/tmp/sock", smtp.getTarget());
        assertThrows("SMTPCLIENT-UNKNOWN-PROTOCOL", sub () { new SmtpClient("smtpx://host:23");});
        assertThrows("SMTPCLIENT-UNKNOWN-PROTOCOL", sub () { new SmtpClient("scheme://host");});
    }

    connectionTests() {
        string url = "smtps://user:pass@localhost:8099";
        SmtpConnection conn("test", "test", url, False, NOTHING, parse_url(url));
        SmtpClient client = conn.get(False);
        assertEq("localhost:8099", client.getTarget());

        # issue #3696: test connection serialization
        SmtpConnection conn2 = Serializable::deserialize(conn.serialize());
        assertEq(conn.url, conn2.url);

        conn = new SmtpConnection("test", "test", url, {"monitor": False});
        client = conn.get(False);
        assertEq("localhost:8099", client.getTarget());

        hash<ConnectionConstructorInfo> info = conn.getConstructorInfo();
        assertEq("SmtpClient", info.module);
        assertEq("SmtpClient", info.class_name);
        assertEq(url, info.args[0]);
        checkPreAndPostProcessing(info);
    }

    private checkPreAndPostProcessing(hash<ConnectionConstructorInfo> info) {
        if (info.pre_processing) {
            Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
            if (info.module)
                p.loadModule(info.module);
            string pre_processing = sprintf("sub pre_processing(reference<*softlist<auto>> args, bool connect, *hash rtopts) { %s }", info.pre_processing);
            # ensure that the pre processing code can be parsed
            p.parse(pre_processing, "pre processing");
            assertTrue(True, "pre processing: " + info.class_name);
        }
        if (info.post_processing) {
            Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
            if (info.module)
                p.loadModule(info.module);
            string post_processing = sprintf("sub post_processing(%s obj, bool connect, *hash rtopts) { %s }", info.class_name, info.post_processing);
            # ensure that the post processing code can be parsed
            p.parse(post_processing, "post processing");
            assertTrue(True, "post processing: " + info.class_name);
        }
    }
}
