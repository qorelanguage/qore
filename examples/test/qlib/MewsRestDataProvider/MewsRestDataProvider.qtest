#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Logger.qm
%requires ../../../../qlib/DataProvider
%requires ../../../../qlib/MewsRestClient.qm
%requires ../../../../qlib/SwaggerDataProvider
%requires ../../../../qlib/MewsRestDataProvider

%exec-class MewsRestClientDataProviderTest

public class MewsRestClientDataProviderTest inherits QUnit::Test {
    private {
        MewsRestConnection mrc;
        MewsRestDataProvider mews;
        Logger logger;

        # command-line options
        const MyOpts = Opts + {
            "conn": "c,connection=s",
        };

        const OptionColumn = 22;
    }

    constructor() : Test("MewsRestClientDataProvider Test", "1.0", \ARGV, MyOpts) {
        addTestCase("test", \mainTest());
        addTestCase("action", \actionTest());

        try {
            setupConnection();
        } catch (hash<ExceptionInfo> ex) {
            if (m_options.verbose > 2) {
                printf("%s\n", get_exception_string(ex));
            } else if (m_options.verbose) {
                printf("%s: %s\n", ex.err, ex.desc);
            }
        }

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    setUp() {
        Logger logger("test", m_options.verbose > 3 ? LoggerLevel::getLevelDebug() : LoggerLevel::getLevelInfo());
        if (m_options.verbose > 2) {
            logger.addAppender(new StdoutAppender());
        }
        if (mews) {
            mews.setLogger(logger);
        }
    }

    mainTest() {
        if (!mews) {
            testSkip("no connection");
        }

        assertEq("mewsrest", mews.getName());

        AbstractDataProvider orderitems = mews.getChildProviderPath("tables/orderitems");
        assertEq("orderitems", orderitems.getName());

        # test retrieving a single order items
        hash<DataProviderExpression> where_cond = <DataProviderExpression>{
            "exp": DP_SEARCH_OP_GE,
            "args": (
                <DataProviderFieldReference>{"field": "ClosedUtc"},
                2021-11-01,
            ),
        };
        *hash<auto> rec = orderitems.searchSingleRecord(where_cond, {"limit": 1});
        assertEq(Type::Hash, rec.type());

        AbstractDataProviderBulkRecordInterface i = orderitems.searchRecordsBulk(1000, where_cond, {"limit": 1});
        hash<auto> q = i.getValue();
        assertEq(Type::List, q.firstValue().type());
        assertEq(1, q.firstValue().lsize());
        assertNothing(i.getValue());
    }

    actionTest() {
        if (!mews) {
            testSkip("no connection");
        }

        hash<DataProviderActionInfo> action = DataProviderActionCatalog::getAppAction("Mews", "get-order-items");
        AbstractDataProvider prov = mews.getChildProviderPath(action.path[1..]);
        assertEq("orderitems", prov.getName());

        *hash<auto> rec = prov.searchSingleRecord({"ClosedUtcStart": 2021-11-01}, {"limit": 1});
        assertEq(Type::Hash, rec.type());

        action = DataProviderActionCatalog::getAppAction("Mews", "get-payments");
        prov = mews.getChildProviderPath(action.path[1..]);
        assertEq("payments", prov.getName());

        rec = prov.searchSingleRecord({"ClosedUtcStart": 2021-11-01}, {"limit": 1});
        assertEq(Type::Hash, rec.type());

        action = DataProviderActionCatalog::getAppAction("Mews", "get-customers");
        prov = mews.getChildProviderPath(action.path[1..]);
        assertEq("customers", prov.getName());

        *list<auto> recs = map $1, prov.searchRecords({"CreatedUtcStart": 2021-11-01}, {
            "limit": 2,
        });
        assertEq(2, recs.size());
    }

    private usageIntern() {
        TestReporter::usageIntern(OptionColumn);
        printOption("-c,--conn=ARG", "set Mews connection name", OptionColumn);
    }

    private error(string fmt) {
        throw "OPTION-ERROR", sprintf("%s: ERROR: %s", get_script_name(), vsprintf(fmt, argv));
    }

    private setupConnection() {
        *string conn_name = m_options.conn ?? ENV.MEWS_CONNECTION;
        if (conn_name.val()) {
            AbstractConnection conn = get_connection(conn_name);
            if (!(conn instanceof MewsRestConnection)) {
                error("connection %y is type %y; expecting \"MewsRestConnection\"", conn_name, conn.className());
            }
            mrc = conn;
        } else {
            mrc = new MewsRestConnection({
                "url": "https://api.mews-demo.com",
                "name": "demo",
                "desc": "Connection to demo environment",
                "opts": {
                    "access_token": "C66EF7B239D24632943D115EDE9CB810-EA00F8FD8294692C940F6B5A8F9453D",
                    "client_token": "E0D439EE522F44368DC78E1BFB03710C-D24FB11DBE31D4621C4817E028D9E1D",
                },
            });
        }

        mews = new MewsRestDataProvider(mrc.get());
    }
}
