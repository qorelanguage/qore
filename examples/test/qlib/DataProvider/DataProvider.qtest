#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/DataProvider

%requires reflection

%exec-class DataProviderTest

public class DataProviderTest inherits QUnit::Test {
    constructor() : Test("DataProvider Test", "1.0") {
        addTestCase("type cache test", \typeCacheTest());
        addTestCase("test", \dataProviderTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    typeCacheTest() {
        HashDataType h1();
        HashDataType h2();
        HashDataType h3();
        DataProviderTypeCache type_cache();
        assertEq(0, type_cache.size());
        assertTrue(type_cache.empty());

        type_cache.registerType("test/one", h1);
        assertEq(1, type_cache.size());
        assertFalse(type_cache.empty());
        assertThrows("TYPE-ERROR", \type_cache.registerType(), ("test/one", h2));
        hash<DataProviderTypeEntryInfo> type_info = type_cache.getTypeInfo("test/one");
        assertEq("one", type_info.name);
        assertEq("/test/one", type_info.path);
        assertFalse(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);
        type_info = type_cache.getTypeInfo("/test/one");
        assertEq("one", type_info.name);
        assertEq("/test/one", type_info.path);
        assertFalse(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);

        type_cache.registerType("test/two", h2);
        assertEq(2, type_cache.size());
        assertThrows("TYPE-ERROR", \type_cache.registerType(), ("test/two", h1));
        type_info = type_cache.getTypeInfo("test/two");
        assertEq("two", type_info.name);
        assertEq("/test/two", type_info.path);
        assertFalse(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);
        type_info = type_cache.getTypeInfo("/test/two");
        assertEq("two", type_info.name);
        assertEq("/test/two", type_info.path);
        assertFalse(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);

        type_cache.registerType("test/three", h3, True);
        assertEq(3, type_cache.size());
        assertThrows("TYPE-ERROR", \type_cache.registerType(), ("test/three", h1));
        assertEq(("/test/one", "/test/two", "/test/three"), type_cache.listTypes());
        assertEq(h1, type_cache.getType("test/one"));
        assertEq(h1, type_cache.getType("/test/one"));
        assertEq(h2, type_cache.getType("test/two"));
        assertEq(h3, type_cache.getType("test/three"));
        assertNothing(type_cache.getType("test/xxx"));
        assertNothing(type_cache.getType("/test/xxx"));
        assertThrows("PROVIDER-ERROR", \type_cache.getTypeEx(), ("test/xxx"));
        assertThrows("PROVIDER-ERROR", \type_cache.getTypeEx(), ("/test/xxx"));
        type_info = type_cache.getTypeInfo("test/three");
        assertEq("three", type_info.name);
        assertEq("/test/three", type_info.path);
        assertTrue(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);
        type_info = type_cache.getTypeInfo("/test/three");
        assertEq("three", type_info.name);
        assertEq("/test/three", type_info.path);
        assertTrue(type_info.locked);
        assertTrue(type_info.has_type);
        assertNothing(type_info.children);

        HashDataType h2bis();
        assertTrue(type_cache.registerOrReplaceType("test/two", h2bis));
        assertEq(3, type_cache.size());
        assertEq(h2bis, type_cache.getType("test/two"));
        assertEq(h2bis, type_cache.removeType("test/two"));
        assertEq(2, type_cache.size());
        assertNothing(type_cache.getType("test/two"));
        assertNothing(type_cache.getType("/test/two"));
        assertThrows("PROVIDER-ERROR", \type_cache.getTypeEx(), ("test/two"));
        assertThrows("PROVIDER-ERROR", \type_cache.getTypeEx(), ("/test/two"));
        assertEq(("/test/one", "/test/three"), type_cache.listTypes());
        assertEq(h1, type_cache.getType("test/one"));
        assertEq(h1, type_cache.getType("/test/one"));
        assertEq(h3, type_cache.getType("test/three"));
        assertEq(h3, type_cache.getType("/test/three"));
        assertFalse(type_cache.registerOrReplaceType("test/one", h1));
        assertFalse(type_cache.registerOrReplaceType("/test/one", h1));
        type_cache.registerType("test/one", h1);
        type_cache.registerType("/test/one", h1);
        assertEq(2, type_cache.size());
        type_cache.clear();
        assertEq(2, type_cache.size());
        assertEq(("/test/three",), type_cache.listTypes());

        DataProviderTypeCache t2 = Serializable::deserialize(type_cache.serialize());
        assertEq(2, t2.size());
    }

    dataProviderTest() {
        {
            assertEq("hash<auto>", AbstractDataProviderType::get("hash<auto>").getName());
            assertEq("hash<string, bool>", AbstractDataProviderType::get("hash<string, bool>").getName());
            assertEq("*hash<auto>", AbstractDataProviderType::get("*hash<auto>").getName());
            assertEq("*hash<string, bool>", AbstractDataProviderType::get("*hash<string, bool>").getName());
            assertThrows("UNKNOWN-TYPE", "xyz", \AbstractDataProviderType::get(), "xyz");
            assertThrows("UNKNOWN-TYPE", "hash<string>", \AbstractDataProviderType::get(), "hash<string>");
        }

        {
            AbstractDataProviderType type = DataProvider::getType("/qore/ftp/event");
            assertEq(AutoHashType, type.getValueType());
            type = DataProvider::getType("qore/ftp/event");
            {
                AbstractDataProviderType t = Serializable::deserialize(type.serialize());
                assertEq("FtpPollerFileEventInfoDataType", t.className());
                assertEq("data", t.getField("data").getType().getValueType().getName());
            }
            assertEq(AutoHashType, type.getValueType());
            assertNothing(DataProvider::getType("xxx"));
            assertThrows("PROVIDER-ERROR", \DataProvider::getTypeEx(), "xxx");
            type = DataProvider::getType("/qore/ftp/event/filepath");
            assertEq("string", type.getName());
            type = DataProvider::getType("qore/ftp/event/filepath");
            assertEq("string", type.getName());
            assertThrows("PROVIDER-ERROR", \DataProvider::getTypeEx(), "/qore/ftp/event/xxx");
            assertThrows("PROVIDER-ERROR", \DataProvider::getTypeEx(), "qore/ftp/event/xxx");
        }

        {
            Type type("hash<StatInfo>");
            AbstractDataProviderType datatype = AbstractDataProviderType::get(type);
            assertEq("hash<StatInfo>", datatype.getName());
            assertTrue(datatype.isAssignableFrom(HashType));
            assertTrue(IntType.isEqual(datatype.getField("size").getType().getValueType()));
        }

        {
            QoreNumberDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NOTHING);
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NULL);

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("softnumber", type1.getName());
            assertEq(1n, type1.acceptsValue("1"));
            assertEq(1234.56n, type1.acceptsValue("1234.56"));
        }

        {
            QoreNumberOrNothingDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("*softnumber", type1.getName());
            assertEq(1n, type1.acceptsValue("1"));
            assertEq(1234.56n, type1.acceptsValue("1234.56"));
            assertNothing(type1.acceptsValue());
            assertNothing(type1.acceptsValue(NULL));
        }

        {
            QoreSoftNumberDataType num1({"number.format": ".,"});
            assertEq(1234.56n, num1.acceptsValue("1.234,56"));
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());
            assertEq(0n, num1.acceptsValue(NULL));
        }

        {
            QoreSoftNumberDataType num1({"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue(), NULL);
        }

        {
            QoreSoftNumberOrNothingDataType num2({"number.format": ".,"});
            assertEq(1234.56n, num2.acceptsValue("1.234,56"));
            assertEq(NOTHING, num2.acceptsValue());
            assertEq(NOTHING, num2.acceptsValue(NULL));
        }

        {
            QoreIntDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NOTHING);
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NULL);

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("softint", type1.getName());
            assertEq(1, type1.acceptsValue("1"));
            assertEq(1234, type1.acceptsValue("1234"));
        }

        {
            QoreIntOrNothingDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("*softint", type1.getName());
            assertEq(1, type1.acceptsValue("1"));
            assertEq(1234, type1.acceptsValue("1234"));
            assertNothing(type1.acceptsValue());
            assertNothing(type1.acceptsValue(NULL));
        }

        {
            QoreSoftIntDataType int1();
            assertEq(1234, int1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());
            assertEq(0, int1.acceptsValue(NULL));
        }

        {
            QoreSoftIntDataType int1({"qore.no_null": True});
            assertEq(1234, int1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue(), NULL);
        }

        {
            QoreSoftIntOrNothingDataType int2();
            assertEq(1234, int2.acceptsValue("1234"));
            assertEq(NOTHING, int2.acceptsValue());
            assertEq(NOTHING, int2.acceptsValue(NULL));
        }

        {
            QoreBoolDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NOTHING);
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NULL);

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("softbool", type1.getName());
            assertEq(True, type1.acceptsValue("1"));
            assertEq(True, type1.acceptsValue("1234"));
        }

        {
            QoreBoolOrNothingDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("*softbool", type1.getName());
            assertEq(True, type1.acceptsValue("1"));
            assertEq(True, type1.acceptsValue("1234"));
            assertNothing(type1.acceptsValue());
            assertNothing(type1.acceptsValue(NULL));
        }

        {
            QoreBoolDataType bool1();
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), "1");
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), NOTHING);
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), NULL);
        }

        {
            QoreSoftBoolDataType bool1();
            assertEq(True, bool1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue());
            assertEq(False, bool1.acceptsValue(NULL));
        }

        {
            QoreSoftBoolDataType bool1({"qore.no_null": True});
            assertEq(True, bool1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), NULL);
        }

        {
            QoreSoftBoolOrNothingDataType bool1();
            assertEq(True, bool1.acceptsValue("1234"));
            assertEq(NOTHING, bool1.acceptsValue());
            assertEq(NOTHING, bool1.acceptsValue(NULL));
        }

        {
            QoreFloatDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NOTHING);
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NULL);

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("softfloat", type1.getName());
            assertEq(1.0, type1.acceptsValue("1"));
            assertEq(1234.1, type1.acceptsValue("1234.1"));
        }

        {
            QoreFloatOrNothingDataType type();
            assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");

            AbstractDataProviderType type1 = type.getSoftType();
            assertEq("*softfloat", type1.getName());
            assertEq(1.0, type1.acceptsValue("1"));
            assertEq(1234.1, type1.acceptsValue("1234.1"));
            assertNothing(type1.acceptsValue());
            assertNothing(type1.acceptsValue(NULL));
        }

        {
            QoreSoftFloatDataType float1();
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue());
            assertEq(0.0, float1.acceptsValue(NULL));
        }

        {
            QoreSoftFloatDataType float1({"qore.no_null": True});
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue(), NULL);
        }

        {
            QoreSoftFloatOrNothingDataType float1();
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertEq(NOTHING, float1.acceptsValue());
            assertEq(NOTHING, float1.acceptsValue(NULL));
        }

        {
            hash<auto> date_opts({
                "date.format": "DD.MM.YYYY",
                "date.input_timezone": new TimeZone("America/Chicago"),
                "date.output_timezone": new TimeZone("UTC"),
            });

            {
                QoreDateDataType type();
                assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");
                assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NOTHING);
                assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), NULL);

                AbstractDataProviderType type1 = type.getSoftType();
                assertEq("softdate", type1.getName());
                assertEq(2019-11-09, type1.acceptsValue("2019-11-09"));
            }

            {
                QoreDateOrNothingDataType type();
                assertThrows("RUNTIME-TYPE-ERROR", \type.acceptsValue(), "1");

                AbstractDataProviderType type1 = type.getSoftType();
                assertEq("*softdate", type1.getName());
                assertEq(2019-11-09, type1.acceptsValue("2019-11-09"));
                assertNothing(type1.acceptsValue());
                assertNothing(type1.acceptsValue(NULL));
            }

            {
                QoreSoftDateDataType date1(date_opts);
                assertEq(2019-09-13T05:00:00Z, date1.acceptsValue("13.09.2019"));
                assertEq(1970-01-01Z, date1.acceptsValue(0));
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());
                assertEq(1970-01-01, date1.acceptsValue(NULL));
            }

            {
                QoreSoftDateDataType date1({"qore.no_null": True});
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue(), NULL);
            }

            {
                QoreSoftDateOrNothingDataType date2(date_opts);
                assertEq(2019-09-13T05:00:00Z, date2.acceptsValue("13.09.2019"));
                assertEq(NOTHING, date2.acceptsValue());
                assertEq(NOTHING, date2.acceptsValue(NULL));
            }
        }

        {
            QoreSoftStringDataType str1();
            assertEq("123", str1.acceptsValue(123));
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue());
            assertEq("", str1.acceptsValue(NULL));
        }

        {
            QoreSoftStringDataType str({"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", \str.acceptsValue(), NULL);
        }

        {
            QoreSoftStringDataType str({"string.encoding": "iso-8859-1"});
            assertEq("ISO-8859-1", str.acceptsValue("hi").encoding());
            assertEq("", str.acceptsValue(""));
            assertThrows("RUNTIME-TYPE-ERROR", \str.acceptsValue());
        }

        {
            QoreStringDataType str1();
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue(), 123);
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue(), NULL);

            AbstractDataProviderType type1 = str1.getSoftType();
            assertEq("softstring", type1.getName());
            assertEq("123", type1.acceptsValue(123));
        }

        {
            QoreStringOrNothingDataType str2();
            assertThrows("RUNTIME-TYPE-ERROR", \str2.acceptsValue(), 123);
            assertEq(NOTHING, str2.acceptsValue());
            assertEq(NOTHING, str2.acceptsValue(NULL));

            AbstractDataProviderType type1 = str2.getSoftType();
            assertEq("*softstring", type1.getName());
            assertEq("123", type1.acceptsValue(123));
            assertNothing(type1.acceptsValue());
            assertNothing(type1.acceptsValue(NULL));
        }

        {
            QoreStringOrNothingDataType str({"string.empty_to_nothing": True});
            assertEq("UTF-8", str.acceptsValue("hi").encoding());
            assertNothing(str.acceptsValue(""));
        }

        {
            QoreSoftStringOrNothingDataType str2();
            assertEq("123", str2.acceptsValue(123));
            assertEq(NOTHING, str2.acceptsValue());
            assertEq(NOTHING, str2.acceptsValue(NULL));
        }

        {
            QoreHashDataType hash1(new Type("hash<string, bool>"));
            assertEq({"a": True}, hash1.acceptsValue({"a": True}));
            assertTrue(BoolType.isEqual(hash1.getFieldType("xxx").getValueType()));
            assertThrows("RUNTIME-TYPE-ERROR", \hash1.acceptsValue(), {"a": 1});
            assertThrows("RUNTIME-TYPE-ERROR", \hash1.acceptsValue());
        }

        {
            QoreHashDataType hash2(new Type("*hash<string, bool>"));
            assertTrue(BoolType.isEqual(hash2.getFieldType("xxx").getValueType()));
            assertThrows("RUNTIME-TYPE-ERROR", \hash2.acceptsValue(), {"a": 1});
            assertEq(NOTHING, hash2.acceptsValue());
            assertEq(NOTHING, hash2.acceptsValue(NULL));

            hash<DataTypeInfo> info = hash2.getInfo();
            assertEq("*hash<string, bool>", info.name);
            assertTrue(info.hasKey("supported_options"));
            assertTrue(info.hasKey("options"));
            assertNothing(info.supported_options);
            assertNothing(info.options);
            assertEq(3, info.types_accepted.size());
            assertEq(2, info.types_returned.size());

            info = hash2.getInputInfo();
            assertEq("*hash<string, bool>", info.name);
            assertFalse(info.hasKey("supported_options"));
            assertFalse(info.hasKey("options"));
            assertFalse(info.hasKey("types_accepted"));
            assertEq(2, info.types_returned.size());
        }

        {
            HashDataType fields();
            fields.addField(new QoreDataField("key1", "desc1", StringType));
            assertTrue(fields.getFields().key1 instanceof QoreDataField);
            assertEq("key1", fields.getFields().key1.getName());
            assertEq("desc1", fields.getFields().key1.getDescription());
            assertEq("key1", fields.getFields().key1.getInputInfo().name);
            assertEq("string", fields.getFields().key1.getInputInfo().type.name);
            assertEq("key1", fields.getFields().key1.getInfo().name);
            assertEq("string", fields.getFields().key1.getInfo().type.name);
            assertThrows("RUNTIME-TYPE-ERROR", \fields.getFields().key1.acceptsValue(), 1);

            HashDataType type1 = fields.getSoftType();
            assertTrue(type1.getFields().key1 instanceof QoreDataField);
            assertEq("key1", type1.getFields().key1.getName());
            assertEq("1", type1.getFields().key1.acceptsValue(1));
        }

        {
            HashDeclDataType type0(TypedHash::forName("StatInfo"));
            assertTrue(type0.getFields().size instanceof QoreDataField);

            AbstractDataProviderType type1 = type0.getSoftType();
            assertTrue(type1.getFields().size instanceof QoreDataField);
            assertEq("size", type1.getFields().size.getName());
            assertEq(1, type1.getFields().size.acceptsValue("1"));

            AbstractDataProviderType type2 = type0.getOrNothingType();
            assertTrue(type2.getFields().size instanceof QoreDataField);
            assertEq("size", type2.getFields().size.getName());
            assertNothing(type2.getFields().size.acceptsValue());
        }

        {
            QoreDataType t(SoftStringType);
            assertEq("", t.acceptsValue(NULL));
        }

        {
            QoreDataType t(SoftStringType, {"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", "does not accept.*NULL", \t.acceptsValue(), (NULL,));
        }

        {
            ListDataType t(IntType);
            assertThrows("RUNTIME-TYPE-ERROR", "does not accept.*integer", \t.acceptsValue(), (1,));
            assertThrows("RUNTIME-TYPE-ERROR", "does not accept.*NULL", \t.acceptsValue(), (NULL,));
            assertEq((1,), t.acceptsValue((1,)));
        }

        {
            QoreListDataType t(new Type("softlist<int>"));
            assertEq((1,), t.acceptsValue(1));
            assertThrows("RUNTIME-TYPE-ERROR", "NULL", \t.acceptsValue(), (NULL,));
            assertEq((1,), t.acceptsValue((1,)));
        }

        {
            QoreListDataType t(new Type("softlist<string>"));
            assertEq(("a",), t.acceptsValue("a"));
            assertThrows("RUNTIME-TYPE-ERROR", "NULL", \t.acceptsValue(), (NULL,));
            assertEq(("a",), t.acceptsValue(("a",)));
        }
    }
}
