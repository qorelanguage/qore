#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/DataProvider

%requires reflection

%exec-class DataProviderTest

public class DataProviderTest inherits QUnit::Test {
    constructor() : Test("DataProvider Test", "1.0") {
        addTestCase("test", \dataProviderTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    dataProviderTest() {
        {
            Type type("hash<StatInfo>");
            AbstractDataProviderType datatype = AbstractDataProviderType::get(type);
            assertEq("hash<StatInfo>", datatype.getName());
            assertTrue(datatype.isAssignableFrom(HashType));
            assertTrue(IntType.isEqual(datatype.getField("size").getType().getValueType()));
        }

        {
            QoreSoftNumberDataType num1({"number.format": ".,"});
            assertEq(1234.56n, num1.acceptsValue("1.234,56"));
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());
            assertEq(0n, num1.acceptsValue(NULL));
        }

        {
            QoreSoftNumberDataType num1({"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue(), NULL);
        }

        {
            QoreSoftNumberOrNothingDataType num2({"number.format": ".,"});
            assertEq(1234.56n, num2.acceptsValue("1.234,56"));
            assertEq(NOTHING, num2.acceptsValue());
            assertEq(NOTHING, num2.acceptsValue(NULL));
        }

        {
            QoreSoftIntDataType int1();
            assertEq(1234, int1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());
            assertEq(0, int1.acceptsValue(NULL));
        }

        {
            QoreSoftIntDataType int1({"qore.no_null": True});
            assertEq(1234, int1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue(), NULL);
        }

        {
            QoreSoftIntOrNothingDataType int2();
            assertEq(1234, int2.acceptsValue("1234"));
            assertEq(NOTHING, int2.acceptsValue());
            assertEq(NOTHING, int2.acceptsValue(NULL));
        }

        {
            QoreSoftBoolDataType bool1();
            assertEq(True, bool1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue());
            assertEq(False, bool1.acceptsValue(NULL));
        }

        {
            QoreSoftBoolDataType bool1({"qore.no_null": True});
            assertEq(True, bool1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), NULL);
        }

        {
            QoreSoftBoolOrNothingDataType bool1();
            assertEq(True, bool1.acceptsValue("1234"));
            assertEq(NOTHING, bool1.acceptsValue());
            assertEq(NOTHING, bool1.acceptsValue(NULL));
        }

        {
            QoreSoftFloatDataType float1();
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue());
            assertEq(0.0, float1.acceptsValue(NULL));
        }

        {
            QoreSoftFloatDataType float1({"qore.no_null": True});
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue(), NULL);
        }

        {
            QoreSoftFloatOrNothingDataType float1();
            assertEq(1234.0, float1.acceptsValue("1234"));
            assertEq(NOTHING, float1.acceptsValue());
            assertEq(NOTHING, float1.acceptsValue(NULL));
        }

        {
            QoreNumberDataType num1();
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \num1.acceptsValue(), NULL);
        }

        {
            QoreNumberOrNothingDataType num2();
            assertEq(NOTHING, num2.acceptsValue());
            assertEq(NOTHING, num2.acceptsValue(NULL));
        }

        {
            QoreIntDataType int1();
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \int1.acceptsValue(), NULL);
        }

        {
            QoreIntOrNothingDataType int2();
            assertEq(NOTHING, int2.acceptsValue());
            assertEq(NOTHING, int2.acceptsValue(NULL));
        }

        {
            QoreBoolDataType bool1();
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \bool1.acceptsValue(), NULL);
        }

        {
            QoreBoolOrNothingDataType bool1();
            assertEq(NOTHING, bool1.acceptsValue());
            assertEq(NOTHING, bool1.acceptsValue(NULL));
        }

        {
            QoreFloatDataType float1();
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \float1.acceptsValue(), NULL);
        }

        {
            QoreFloatOrNothingDataType float1();
            assertEq(NOTHING, float1.acceptsValue());
            assertEq(NOTHING, float1.acceptsValue(NULL));
        }

        {
            hash<auto> date_opts({
                "date.format": "DD.MM.YYYY",
                "date.input_timezone": new TimeZone("America/Chicago"),
                "date.output_timezone": new TimeZone("UTC"),
            });

            {
                QoreSoftDateDataType date1(date_opts);
                assertEq(2019-09-13T05:00:00Z, date1.acceptsValue("13.09.2019"));
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());
                assertEq(1970-01-01, date1.acceptsValue(NULL));
            }

            {
                QoreSoftDateDataType date1({"qore.no_null": True});
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue(), NULL);
            }

            {
                QoreSoftDateOrNothingDataType date2(date_opts);
                assertEq(2019-09-13T05:00:00Z, date2.acceptsValue("13.09.2019"));
                assertEq(NOTHING, date2.acceptsValue());
                assertEq(NOTHING, date2.acceptsValue(NULL));
            }

            {
                QoreDateDataType date1(date_opts);
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue());
                assertThrows("RUNTIME-TYPE-ERROR", \date1.acceptsValue(), NULL);
            }

            {
                QoreDateOrNothingDataType date2(date_opts);
                assertEq(NOTHING, date2.acceptsValue());
                assertEq(NOTHING, date2.acceptsValue(NULL));
            }
        }

        {
            QoreSoftStringDataType str1();
            assertEq("123", str1.acceptsValue(123));
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue());
            assertEq("", str1.acceptsValue(NULL));
        }

        {
            QoreSoftStringDataType str({"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", \str.acceptsValue(), NULL);
        }

        {
            QoreSoftStringDataType str({"string.encoding": "iso-8859-1"});
            assertEq("ISO-8859-1", str.acceptsValue("hi").encoding());
            assertEq("", str.acceptsValue(""));
            assertThrows("RUNTIME-TYPE-ERROR", \str.acceptsValue());
        }

        {
            QoreStringDataType str1();
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue(), 123);
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue());
            assertThrows("RUNTIME-TYPE-ERROR", \str1.acceptsValue(), NULL);
        }

        {
            QoreStringOrNothingDataType str2();
            assertThrows("RUNTIME-TYPE-ERROR", \str2.acceptsValue(), 123);
            assertEq(NOTHING, str2.acceptsValue());
            assertEq(NOTHING, str2.acceptsValue(NULL));
        }

        {
            QoreStringOrNothingDataType str({"string.empty_to_nothing": True});
            assertEq("UTF-8", str.acceptsValue("hi").encoding());
            assertNothing(str.acceptsValue(""));
        }

        {
            QoreSoftStringOrNothingDataType str2();
            assertEq("123", str2.acceptsValue(123));
            assertEq(NOTHING, str2.acceptsValue());
            assertEq(NOTHING, str2.acceptsValue(NULL));
        }

        {
            QoreHashDataType hash1(new Type("hash<string, bool>"));
            assertEq({"a": True}, hash1.acceptsValue({"a": True}));
            assertTrue(BoolType.isEqual(hash1.getFieldType("xxx").getValueType()));
            assertThrows("RUNTIME-TYPE-ERROR", \hash1.acceptsValue(), {"a": 1});
            assertThrows("RUNTIME-TYPE-ERROR", \hash1.acceptsValue());
        }

        {
            QoreHashDataType hash2(new Type("*hash<string, bool>"));
            assertTrue(BoolType.isEqual(hash2.getFieldType("xxx").getValueType()));
            assertThrows("RUNTIME-TYPE-ERROR", \hash2.acceptsValue(), {"a": 1});
            assertEq(NOTHING, hash2.acceptsValue());
            assertEq(NOTHING, hash2.acceptsValue(NULL));

            hash<DataTypeInfo> info = hash2.getInfo();
            assertEq("*hash<string, bool>", info.name);
            assertTrue(info.hasKey("supported_options"));
            assertTrue(info.hasKey("options"));
            assertNothing(info.supported_options);
            assertNothing(info.options);
            assertEq(3, info.types_accepted.size());
            assertEq(2, info.types_returned.size());

            info = hash2.getInputInfo();
            assertEq("*hash<string, bool>", info.name);
            assertFalse(info.hasKey("supported_options"));
            assertFalse(info.hasKey("options"));
            assertFalse(info.hasKey("types_accepted"));
            assertEq(2, info.types_returned.size());
        }

        {
            HashDataType fields();
            fields.addField(new QoreDataField("key1", "desc1", StringType));
            assertTrue(fields.getFields().key1 instanceof QoreDataField);
            assertEq("key1", fields.getFields().key1.getName());
            assertEq("desc1", fields.getFields().key1.getDescription());
            assertEq("key1", fields.getFields().key1.getInputInfo().name);
            assertEq("string", fields.getFields().key1.getInputInfo().type.name);
            assertEq("key1", fields.getFields().key1.getInfo().name);
            assertEq("string", fields.getFields().key1.getInfo().type.name);
        }

        {
            QoreDataType t(SoftStringType);
            assertEq("", t.acceptsValue(NULL));
        }

        {
            QoreDataType t(SoftStringType, {"qore.no_null": True});
            assertThrows("RUNTIME-TYPE-ERROR", "does not accept.*NULL", \t.acceptsValue(), (NULL,));
        }
    }
}
