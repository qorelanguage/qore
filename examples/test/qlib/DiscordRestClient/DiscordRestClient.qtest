#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/Logger.qm
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/DiscordRestClient.qm

%try-module json >= 1.5
%define NoJson
%endtry

%exec-class Main

public class Main inherits QUnit::Test {
    constructor() : Test("DiscordRestClientTest", "1.0") {
        addTestCase("discord tests", \discordTests());
        addTestCase("connection tests", \connectionTests());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    checkModule() {
%ifdef NoJson
        testSkip("no json module");
%endif
    }

    discordTests() {
        checkModule();
    }

    connectionTests() {
        checkModule();
        string url = "discord://x";
        DiscordRestConnection drc("test", "test", url, {}, {
            "oauth2_client_id": "x",
            "oauth2_client_secret": "x",
            "token": "x",
        });
        assertEq(True, drc instanceof DiscordRestConnection);

        #assertThrows("CONNECTION-OPTION-ERROR", sub () { DiscordRestConnection swsc1("test", "test", url);});

        DiscordRestClient client = drc.get(False);
        assertEq(45000, client.getTimeout());
        assertEq(45000, client.getConnectTimeout());
    }
}
