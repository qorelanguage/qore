#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/HttpServer.qm

%exec-class HttpServerTest

# we explicitly test deprecated behavior
%disable-warning deprecated

class AltHandler inherits AbstractHttpRequestHandler {
    hash handleRequest(hash cx, hash hdr, *data body) {
        return makeResponse(201, "a1, " + hdr.method + ", " + hdr.path + ", " + cx.raw_path);
    }
}

class SimpleStringHandler inherits AbstractHttpRequestHandler {
    private { string mString; }
    constructor (string str) { mString = str; }
    hash handleRequest(hash cx, hash hdr, *data body) {
        return makeResponse(200, mString);
    }
}

class ReqHandler inherits AbstractHttpRequestHandler {
    hash<HttpResponseInfo> handleRequest(hash<auto> cx, hash<auto> hdr, *data body) {
        string rpath = hdr.path;
        if (rpath =~ /^test400\//) {
            return make400("test400");
        } else if (rpath =~ /^test500\//) {
            return AbstractHttpRequestHandler::makeResponse(500, <74657374>);
        } else if (rpath =~ /^test501\//) {
            return make501("test501");
        } else if (rpath =~ /^nonexistingcode/) {
            return makeResponse(723, "test");
        } else if (rpath =~ /^test102\//) {
            return makeResponse(102, "test");
        } else if (rpath =~ /^test204\//) {
            return makeResponse(204, "test");
        } else if (rpath =~ /^test304\//) {
            return makeResponse(304, "test");
        } else if (rpath =~ /^test400close\//) {
            return makeResponse(400, new StringInputStream("test"), {"Connection": "close"});
        } else if (rpath =~ /^fileupload/) {
            string boundary = (hdr."_qore_orig_content_type" =~ x/boundary="?(.+)"?/i)[0];
            hash<MessageInfo> h = MultiPartMessage::parseBody(boundary, body, True);
            #printf("h: %N\n", h);
            return makeResponse(200, new BinaryInputStream(h.part[1].body), {"Content-Type": h.part[1].hdr."content-type"});
        }

        if (hdr.method == "POST") {
            return makeResponse(200, "POST, " + body + ", " + rpath + ", " + cx.raw_path);
        } else {
            return makeResponse(200, hdr.method + ", " + rpath + ", " + cx.raw_path);
        }
    }
}

public class HttpServerTest inherits QUnit::Test {
    private {
        HttpServer mServer;
        HTTPClient mClient;
        ReqHandler mHandler;
        int port;
        string url;

        const CertPem = "-----BEGIN CERTIFICATE-----
MIIE2jCCA8KgAwIBAgIJANryEdM1ip5eMA0GCSqGSIb3DQEBCwUAMIGrMQswCQYD
VQQGEwJDWjEPMA0GA1UECAwGUHJhZ3VlMQ8wDQYDVQQHDAZQcmFndWUxIjAgBgNV
BAoMGVFvcmUgVGVjaG5vbG9naWVzLCBzLnIuby4xIjAgBgNVBAsMGVFvcmUgVGVj
aG5vbG9naWVzLCBzLnIuby4xEjAQBgNVBAMMCWxvY2FsaG9zdDEeMBwGCSqGSIb3
DQEJARYPZW1haWxAZW1haWwuY29tMB4XDTE5MDQwNDA2MTA0OFoXDTI5MDQwMTA2
MTA0OFowgasxCzAJBgNVBAYTAkNaMQ8wDQYDVQQIDAZQcmFndWUxDzANBgNVBAcM
BlByYWd1ZTEiMCAGA1UECgwZUW9yZSBUZWNobm9sb2dpZXMsIHMuci5vLjEiMCAG
A1UECwwZUW9yZSBUZWNobm9sb2dpZXMsIHMuci5vLjESMBAGA1UEAwwJbG9jYWxo
b3N0MR4wHAYJKoZIhvcNAQkBFg9lbWFpbEBlbWFpbC5jb20wggEiMA0GCSqGSIb3
DQEBAQUAA4IBDwAwggEKAoIBAQCuLji+iZqOKoaCs5SOTnA7LTrAQ4n3EOsJwsgO
IDCyRh+YCqQxKjS02DPQVf10O6ChX4c063ekEoARUkJy/2sWGekh2uCeVs5RJsDu
DEVYVwjzqHP3AyZi4d1IXPToqHLA+nT/3G+FByncwWLnK3h9HXgsgr6eK9rM8N3B
2eD+kv1uOQM3W1q9KHqRuyA8Ahh3eelf+jlFzybuaCTpkpqV2cW/IveMMVELn83S
J0V0aC8TaDDVctC9kgQuh88DxnZpVoZncl7A10BoFSCevNMe5/+jm1KBgBvHy35o
c0QMfoTJA9LA4BFwLglMhJkL3q11mEqypY0hOGXcNPmqEe6/AgMBAAGjgf4wgfsw
gcoGA1UdIwSBwjCBv6GBsaSBrjCBqzELMAkGA1UEBhMCQ1oxDzANBgNVBAgMBlBy
YWd1ZTEPMA0GA1UEBwwGUHJhZ3VlMSIwIAYDVQQKDBlRb3JlIFRlY2hub2xvZ2ll
cywgcy5yLm8uMSIwIAYDVQQLDBlRb3JlIFRlY2hub2xvZ2llcywgcy5yLm8uMRIw
EAYDVQQDDAlsb2NhbGhvc3QxHjAcBgkqhkiG9w0BCQEWD2VtYWlsQGVtYWlsLmNv
bYIJAKXWmzP5c0ClMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgTwMBQGA1UdEQQNMAuC
CWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEASjKU4RfG5Jrw1zLCVxkZtkqt
AeMFqtd/z3xdzPHk41Zn06nIN7jiEZfIMBqQQjv4ksvyIQvMYQoza8PGYPaudrWJ
nktRCT+RASCA3YfvmxZZPykMBP+o8SM3BZZMN7cFXgIzKeo+6MXno60yZH2SryrU
dduAJ1yfHoGXNOZiDR4qhq3OPFFCUL7mV2B8VUlhAyaHALwFZw/pQrfIt6XQmNoO
F5zjFeWIP+8vw1/WLUD8yUr3uaFq7ptPvd4K3B1NmruJeNZR/JWyuYHIUE3vlST6
/gfhTh/VV4d5GnhnHv62qR5DyT1iTrR2ZTcUt+uWp/bEopM2vO7y/gadqQpBnA==
-----END CERTIFICATE-----";

        const BinImage = <89504e470d0a1a0a0000000d4948445200000010000000100403000000eddde25200000018504c5445ffffff6b6b6b8c8c8cc0c0c0ef5a5a846331efd63900000089492ed30000000474524e53ffffff00402aa9f400000001624b474407166188eb0000004b4944415408d7633086020610615a0c65a8ba4319a1e55046581184619e1a0c61288119060c0ce6e94c5046312394c100661828194318020c0c688c40410506a8628888912010881a1b0300fcbe1520c136ff8b0000000049454e44ae426082>;
    }

    constructor() : Test("HttpServerTest", "1.0") {
        addTestCase("issue 3397", \issue3397());
        addTestCase("issue 3116", \issue3116());
        addTestCase("issue 2805", \issue2805());
        addTestCase("Test basics", \basicTest());
        addTestCase("Test routing", \routingTest());
        addTestCase("Test status codes", \testStatusCodes());
        addTestCase("misc", \misc());
        addTestCase("2nd wildcard listener", \secondWildcardListener());
        addTestCase("bug 2936 multipart form-data binary file upload", \multipartFormDataBinaryFileTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    log(string fmt) {
        if (m_options.verbose > 2) {
            vprintf("HTTP: " + fmt + "\n", argv);
        }
    }

    globalSetUp() {
        mServer = new HttpServer(\log(), \log());
        mHandler = new ReqHandler();
        mServer.setHandler("my-handler", "", MimeTypeHtml, mHandler);
        mServer.setHandler("alt-handler", "/alt1", MimeTypeHtml, new AltHandler());
        mServer.setHandler("/route/a/c", "/route/a/c", MimeTypeHtml, new SimpleStringHandler("/route/a/c"));
        mServer.setHandler("/route/a", "/route/a", MimeTypeHtml, new SimpleStringHandler("/route/a"));
        mServer.setHandler("/route/b", "/route/b", MimeTypeHtml, new SimpleStringHandler("/route/b"));
        mServer.setHandler("/route", "/route", MimeTypeHtml, new SimpleStringHandler("/route"));
        mServer.setDefaultHandler("my-handler", mHandler);
        port = mServer.addListener(<HttpListenerOptionInfo>{"service": 0}).port;
        url = "http://localhost:" + port;
    }

    globalTearDown() {
        delete mServer;
        delete mHandler;
    }

    setUp() {
        mClient = new HTTPClient(("url": url, "additional_methods": {"TEST": True}));
        mClient.connect();
    }

    tearDown() {
        mClient.disconnect();
        delete mClient;
    }

    issue3397() {
        # create zero-length file
        string empty_fn = tmp_location() + DirSep + get_random_string() + ".pem";
        File f();
        f.open2(empty_fn, O_CREAT | O_TRUNC | O_WRONLY);
        on_exit unlink(empty_fn);
        string invalid_fn = tmp_location() + DirSep + get_random_string() + ".pem";
        f.open2(invalid_fn, O_CREAT | O_TRUNC | O_WRONLY);
        f.write(get_random_string(256));
        on_exit unlink(invalid_fn);
        string real_fn = tmp_location() + DirSep + get_random_string() + ".pem";
        f.open2(real_fn, O_CREAT | O_TRUNC | O_WRONLY);
        f.write(CertPem);
        f.close();
        on_exit unlink(real_fn);
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "empty", \mServer.addListener(), (10132, empty_fn, empty_fn));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", \mServer.addListener(), (10132, invalid_fn, empty_fn));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "inaccessible", \mServer.addListener(), (10132, get_random_string(), empty_fn));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "empty", \mServer.addListener(), (10132, real_fn, empty_fn));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", \mServer.addListener(), (10132, real_fn, invalid_fn));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "inaccessible", \mServer.addListener(), (10132, real_fn, get_random_string()));
%ifdef Unix
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "empty", \mServer.addListener(), (10132, real_fn, "/dev/null"));
        assertThrows("HTTPSERVER-SSL-SETUP-ERROR", "empty", \mServer.addListener(), (10132, "/dev/null", "/dev/null"));
%endif
    }

    issue3116() {
        assertThrows("HTTP-CLIENT-RECEIVE-ERROR", "501", \mClient.head(), "/test501/xyz");
        assertNothing(mClient.get("/test102/xyz"));
        assertNothing(mClient.get("/test204/xyz"));
        assertThrows("HTTP-CLIENT-RECEIVE-ERROR", "304", \mClient.head(), "/test304/xyz");
        assertEq("GET, abc, /abc", mClient.get("/abc"));

        mClient.setErrorPassthru(True);
        on_exit mClient.setErrorPassthru(False);
        hash<auto> info;
        hash<auto> resp = mClient.send(NOTHING, "PUT", "/test400close/abc", NOTHING, NOTHING, \info);
        assertEq("test", resp.body);

        list<auto> http_msgs;
        code rc = sub (auto http_data) {
            http_msgs += http_data;
        };
        mClient.sendWithRecvCallback(rc, NOTHING, "PUT", "/test400close/abc", NOTHING, NOTHING, NOTHING, \info);
        assertEq("test", http_msgs[1].data);
    }

    issue2805() {
        assertThrows("HTTP-CLIENT-RECEIVE-ERROR", \mClient.send(), ("", "TEST"));
        mServer.addHttpMethod("TEST");
        assertEq("TEST, , /", mClient.send("", "TEST").body);
    }

    secondWildcardListener() {
        hash h = mServer.addListener("localhost:0");
        assertEq(Type::String, h.bind.type());
        # issue #2155 this call will fail without the fix
        h = mServer.addListener("localhost:0");
        assertEq(Type::String, h.bind.type());
    }

    basicTest() {
        assertEq("GET, abc, /abc", mClient.get("/abc"));
        assertEq("GET, abc, abc", mClient.get("abc"));
        assertEq("GET, abc/test/1/5/t, /abc/test/1/5/t", mClient.get("/abc/test/1/5/t"));
        hash resp = mClient.send("dx123", "POST", "/abc");
        assertEq(200, resp.status_code);
        assertEq("POST, dx123, abc, /abc", resp.body);

        assertEq("a1, GET, alt1, /alt1", mClient.get("/alt1"));
        assertEq("a1, POST, alt1/test, alt1/test", mClient.post("alt1/test", ""));
    }

    routingTest() {
        assertEq("/route", mClient.get("/route"));
        assertEq("/route", mClient.get("/route/something"));
        assertEq("/route/a", mClient.get("/route/a"));
        assertEq("/route/a", mClient.get("/route/a/something"));
        assertEq("/route/a/c", mClient.get("/route/a/c"));
        assertEq("/route/a/c", mClient.get("/route/a/c/something"));
        assertEq("/route/b", mClient.get("/route/b"));
        assertEq("/route/b", mClient.get("/route/b/something"));
    }

    testStatusCodes() {
        code c = sub() { mClient.get("/test400/"); };
        testAssertion("400", c, NOTHING, new QUnit::TestResultExceptionRegexp("HTTP-CLIENT-RECEIVE-ERROR", "status code 400 received"));
        c = sub() { mClient.get("/test500/abc"); };
        testAssertion("500", c, NOTHING, new QUnit::TestResultExceptionRegexp("HTTP-CLIENT-RECEIVE-ERROR", "status code 500 received"));
        c = sub() { mClient.get("/test501/xyz"); };
        testAssertion("501", c, NOTHING, new QUnit::TestResultExceptionRegexp("HTTP-CLIENT-RECEIVE-ERROR", "status code 501 received"));
        c = sub() { mClient.get("/nonexistingcode/abc"); };
        testAssertion("non-existing status code", c, NOTHING, new QUnit::TestResultExceptionRegexp("HTTP-CLIENT-RECEIVE-ERROR", "status code 500 received"));
    }

    misc() {
        assertEq(("method": "path", "params": ("a": "1", "b": "2")), parse_uri_query("path?a=1;b=2"));
        assertEq(("method": "path", "params": ("a": "1", "b": True)), parse_uri_query("path?a=1;b"));
    }

    private multipartFormDataBinaryFileTest() {
        MultiPartFormDataMessage msg();
        msg.addPart(BinImage, "image0.png", {"Content-Type": MimeTypePng});
        msg.addPart(BinImage, "image1.png", {"Content-Type": MimeTypePng});
        hash<MessageInfo> h = msg.getMsgAndHeaders();
        hash<auto> info;
        binary img = binary(mClient.post("/fileupload", h.body, h.hdr, \info));
        assertEq(200, info."response-headers".status_code);
        assertEq(MimeTypePng, info."response-headers"."content-type");
        assertEq(BinImage, img);
        assertEq("chunked", info."response-headers"."transfer-encoding");
    }
}
