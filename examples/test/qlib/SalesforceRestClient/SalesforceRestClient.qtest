#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/SalesforceRestClient.qm

%requires qore >= 0.9

%new-style
%require-types
%strict-args
%enable-all-warnings

%exec-class SalesforceTest

# we test deprecated functionality here
%disable-warning deprecated

class SalesforceTest inherits QUnit::Test {
    public {}

    private {
        SalesforceRestClient rc;

        # salesforce.com connection options
        hash sfopts;

        # command-line options
        const MyOpts = Opts + {
            "client_id":      "i,client_id=s",
            "client_secret":  "s,client_secret=s",
            "user":           "u,username=s",
            "pass":           "p,password=s",
            "timeout":        "t,timeout=i",
        };

        const OptionColumn = 22;

        const AcctNo1 = "DEL_TEST_1";
        const AcctName1 = "My Test Account 1";

        const AcctNo2 = "DEL_TEST_2";
    }

    constructor() : Test("SalesforceTest", "1.0", \ARGV, MyOpts) {
        addTestCase("Salesforce.com REST", \salesForceRestTests());
        addTestCase("connection tests", \connectionTest());

        try {
            setupConnection();
        } catch (hash<ExceptionInfo> ex) {
            if (m_options.verbose)
                printf("%s: %s\n", ex.err, ex.desc);
        }

        set_return_value(main());
    }

    private usageIntern() {
        TestReporter::usageIntern(OptionColumn);
        printOption("-i,--client_id=ARG", "set Salesforce.com consumer key", OptionColumn);
        printOption("-p,--pass=ARG", "set Salesforce.com password", OptionColumn);
        printOption("-s,--client_secret=ARG", "set Salesforce.com consumer secret", OptionColumn);
        printOption("-t,--timeout=ARG", "set Salesforce.com timeout in seconds", OptionColumn);
        printOption("-u,--user=ARG", "set Salesforce.com user name", OptionColumn);
    }

    setupConnection() {
        sfopts.client_id = m_options.client_id ?? ENV.SALESFORCE_CONSUMER_KEY;
        if (!sfopts.client_id)
            error("missing --client_id option or SALESFORCE_CONSUMER_KEY environment variable");
        sfopts.client_secret = m_options.client_secret ?? ENV.SALESFORCE_CONSUMER_SECRET;
        if (!sfopts.client_secret)
            error("missing --client_secret option or SALESFORCE_CONSUMER_SECRET environment variable");
        sfopts.username = m_options.user ?? ENV.SALESFORCE_USER;
        if (!sfopts.username)
            error("missing --username option or SALESFORCE_USER environment variable");
        sfopts.password = m_options.pass ?? ENV.SALESFORCE_PASS;
        if (!sfopts.password)
            error("missing --password option or SALESFORCE_PASS environment variable");
        if (sfopts.timeout)
            sfopts.connect_timeout = sfopts.timeout;

        rc = new SalesforceRestClient(sfopts);
    }

    error(string fmt) {
        throw "OPTION-ERROR", sprintf("%s: ERROR: %s\n", get_script_name(), vsprintf(fmt, argv));
    }

    salesForceRestTests() {
        if (!rc) testSkip("no Salesforce.com connection");

        assertEq(Type::String, rc.getApi().type());

        hash h = rc.get("sobjects");
        assertEq(Type::List, h.body.sobjects.type());

        # create a bulk job
        h = rc.bulkJobCreate(BulkJobInsert, "Account", BulkJobCsv).jobInfo;
        assertEq(Type::Hash, h.type());
        assertEq(Type::String, h.id.type());

        # close the bulk job
        hash ch = rc.bulkJobClose(h.id);
        assertEq(h.jobInfo.id, ch.id);

        rc.logout();
        assertEq(NOTHING, rc.getToken());
    }

    connectionTest() {
        string url = sprintf("http://%s:%s@localhost:8080", sfopts.username, sfopts.password);
        remove sfopts.("username", "password");
        SalesforceRestConnection swsc("test", "test", url, True, sfopts, parse_url(url));
        assertEq(True, swsc instanceof SalesforceRestConnection);

        assertThrows("CONNECTION-ERROR", sub () {
            SalesforceRestConnection swsc1("test", "test", url, {"monitor": True}, {"x": 1});
            });

        SalesforceRestClient client = swsc.get(False);
        # issue #3321: check default timeouts
        assertEq(45000, client.getTimeout());
        assertEq(45000, client.getConnectTimeout());

        hash<ConnectionConstructorInfo> info = swsc.getConstructorInfo();
        assertEq("SalesforceRestClient", info.module);
        assertEq("SalesforceRestClient", info.class_name);
        assertEq(url, info.args[0].url);
        checkPreAndPostProcessing(info);
    }

    private checkPreAndPostProcessing(hash<ConnectionConstructorInfo> info) {
        Program p(PO_NEW_STYLE | PO_STRICT_ARGS | PO_REQUIRE_TYPES);
        if (info.module)
            p.loadModule(info.module);
        if (info.pre_processing) {
            string pre_processing = sprintf("sub pre_processing(reference<*softlist<auto>> args, bool connect, *hash rtopts) { %s }", info.pre_processing);
            # ensure that the pre processing code can be parsed
            p.parse(pre_processing, "pre processing");
            assertTrue(True, "pre processing: " + info.class_name);
        }
        if (info.post_processing) {
            string post_processing = sprintf("sub post_processing(%s obj, bool connect, *hash rtopts) { %s }", info.class_name, info.post_processing);
            # ensure that the post processing code can be parsed
            p.parse(post_processing, "post processing");
            assertTrue(True, "post processing: " + info.class_name);
        }
    }
}
