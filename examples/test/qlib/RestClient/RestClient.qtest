#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/HttpServer.qm
#%requires ../../../../qlib/HttpServerUtil.qm

%try-module yaml >= 0.5
%define NoYaml
%endtry

%try-module xml >= 1.3
%define NoXml
%endtry

%try-module json >= 1.5
%define NoJson
%endtry

%exec-class Main

const TEST_PORT = 12345;

const VALUE_TEXT = (
        "input" : "Lorem Ipsum",
        "output" : "Lorem Ipsum",
    );
const VALUE_XML = (
        "input" : "<foo><bar>1</bar></foo>",
        "output" : ("foo" : ("bar" : "1")),
    );
const VALUE_XMLRPC = (
        "input" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodResponse><params><param><value><i4>1</i4></value></param></params></methodResponse>",
        "output" : ("params" : 1),
    );
const VALUE_YAML = (
        "input" : "foo:\n bar: 1",
        "output" : ("foo" : ("bar" : 1)),
    );
const VALUE_JSON = (
        "input" : "{\"foo\":{\"bar\":1}}",
        "output" : ("foo" : ("bar" : 1)),
    );

class SimpleStringHandler inherits AbstractHttpRequestHandler {
    private {
        string m_data;
        string m_mime;
    }
    constructor (string mime, string str) {
        m_mime = mime;
        m_data = str;
    }
    hash handleRequest(hash cx, hash hdr, *data body) {
        if (hdr.method == "GET") {
            return makeResponse( ("Content-Type" : m_mime), 200, m_data);
        }
        else if (hdr.method == "PUT") {
            return makeResponse( ("Content-Type" : m_mime), 200, m_data);
        }
    }
}

sub log(string str) {
    printf("", argv);
}

public class Main inherits QUnit::Test {
    private {
        HttpServer m_http;
    }

    constructor() : Test("RestClientTest", "1.0") {
        addTestCase("GET tests", \methodGetTest(), NOTHING);
        addTestCase("PUT tests", \methodPutTest(), NOTHING);

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    setUp() {
        m_http = new HttpServer(\log(), \log());
        m_http.setHandler("/api_text", "/api_text", MimeTypeText, new SimpleStringHandler(MimeTypeText, VALUE_TEXT.input));
        m_http.setHandler("/api_xml", "/api_xml", MimeTypeXml, new SimpleStringHandler(MimeTypeXml, VALUE_XML.input));
        m_http.setHandler("/api_rpc", "/api_rpc", MimeTypeXml, new SimpleStringHandler(MimeTypeXml, VALUE_XMLRPC.input));
        m_http.setHandler("/api_json", "/api_json", MimeTypeJson, new SimpleStringHandler(MimeTypeJson, VALUE_JSON.input));
        m_http.setHandler("/api_yaml", "/api_yaml", MimeTypeYaml, new SimpleStringHandler(MimeTypeYaml, VALUE_YAML.input));
        m_http.addListener(TEST_PORT);
    }

    tearDown() {
        delete m_http;
    }

    methodGetTest() {
        RestClient rest(("url" : "http://localhost:"+TEST_PORT));
        any ret;

        ret = rest.get("/api_text");
        testAssertionValue("/api_text", ret.body, VALUE_TEXT.output);

%ifndef NoXml
        ret = rest.get("/api_xml");
        testAssertionValue("/api_xml", ret.body, VALUE_XML.output);

        ret = rest.get("/api_rpc");
        testAssertionValue("/api_rpc", ret.body, VALUE_XMLRPC.output);
%endif

%ifndef NoJson
        ret = rest.get("/api_json");
        testAssertionValue("/api_json", ret.body, VALUE_JSON.output);
%endif

%ifndef NoYaml
        ret = rest.get("/api_yaml");
        testAssertionValue("/api_yaml", ret.body, VALUE_YAML.output);
%endif
    }

    methodPutTest() {
        RestClient rest(("url" : "http://localhost:"+TEST_PORT));
        any ret;

        rest.setSerialization("text");
        ret = rest.put("/api_text", VALUE_TEXT.output);
        testAssertionValue("/api_text", ret.body, VALUE_TEXT.output);

%ifndef NoXml
        rest.setSerialization("xml_raw");
        ret = rest.put("/api_xml", VALUE_XML.output);
        testAssertionValue("/api_xml", ret.body, VALUE_XML.output);

        rest.setSerialization("xml");
        ret = rest.put("/api_rpc", VALUE_XMLRPC.output);
        testAssertionValue("/api_rpc", ret.body, VALUE_XMLRPC.output);
%endif

%ifndef NoJson
        rest.setSerialization("json");
        ret = rest.put("/api_json", VALUE_JSON.output);
        testAssertionValue("/api_json", ret.body, VALUE_JSON.output);
%endif

%ifndef NoYaml
        rest.setSerialization("yaml");
        ret = rest.put("/api_yaml", VALUE_YAML.output);
        testAssertionValue("/api_yaml", ret.body, VALUE_YAML.output);
%endif
    }

} # class Main
