#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/DataProvider
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/RestSchemaValidator.qm
%requires ../../../../qlib/Swagger.qm
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/HttpServer.qm

%try-module yaml >= 0.5
%define NoYaml
%endtry

%try-module xml >= 1.3
%define NoXml
%endtry

%try-module json >= 1.5
%define NoJson
%endtry

%exec-class Main

const VALUE_TEXT = {
    "input": "Lorem Ipsum",
    "output": "Lorem Ipsum",
};
const VALUE_XML = {
    "input": "<foo><bar>1</bar></foo>",
    "output": {"foo": {"bar": "1"}},
};
const VALUE_XMLRPC = {
    "input": "<struct><member><name>foo</name><value><i4>1</i4></value></member></struct>",
    "output": {"foo": 1},
};
const VALUE_YAML = {
    "input": "foo:\n bar: 1\n other: '2017-01-01 00:00:00Z'",
    "output": {"foo": {"bar": 1, "other": 2017-01-01Z}},
};
const VALUE_JSON = {
    "input" : "{\"foo\":{\"bar\":1}}",
    "output" : {"foo" : {"bar" : 1}},
};

class SimpleStringHandler inherits AbstractHttpRequestHandler {
    private {
        *string m_data;
        string m_mime;
    }
    constructor (string mime, *string str) {
        m_mime = mime;
        m_data = str;
    }
    hash<auto> handleRequest(hash<auto> cx, hash<auto> hdr, *data body) {
        if (hdr."do-error") {
            return makeResponse(404, "test error", {"Content-Type": MimeTypeText});
        }
        if (hdr.method == "GET") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "PUT") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "PATCH") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "POST") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "DELETE") {
            return makeResponse(404, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "OPTIONS") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        }
    }
}

sub log(string str) {
    delete argv;
}

public class Main inherits QUnit::Test {
    private {
        HttpServer m_http;

        int port;
    }

    constructor() : Test("RestClientTest", "1.0") {
        addTestCase("issue 3472", \issue3472());
        addTestCase("connection tests", \connectionTests());
        addTestCase("OPTIONS tests", \methodOptionsTest());
        addTestCase("DELETE tests", \methodDeleteTest());
        addTestCase("GET tests", \methodGetTest());
        addTestCase("PUT tests", \methodPutTest());
        addTestCase("POST tests", \methodPostTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    setUp() {
        m_http = new HttpServer(\log(), \log());
        m_http.setHandler("/api_text", "/api_text", MimeTypeText, new SimpleStringHandler(MimeTypeText, VALUE_TEXT.input));
        m_http.setHandler("/api_xml", "/api_xml", MimeTypeXmlApp, new SimpleStringHandler(MimeTypeXmlApp, VALUE_XML.input));
        m_http.setHandler("/api_rpc", "/api_rpc", MimeTypeXml, new SimpleStringHandler(MimeTypeXml, VALUE_XMLRPC.input));
        m_http.setHandler("/api_json", "/api_json", MimeTypeJson, new SimpleStringHandler(MimeTypeJson, VALUE_JSON.input));
        m_http.setHandler("/api_yaml", "/api_yaml", MimeTypeYaml, new SimpleStringHandler(MimeTypeYaml, VALUE_YAML.input));
        m_http.setHandler("/api_bin", "/api_bin", MimeTypeOctetStream, new SimpleStringHandler(MimeTypeOctetStream));
        port = m_http.addListener(<HttpListenerOptionInfo>{"service": 0}).port;
    }

    tearDown() {
        delete m_http;
    }

    issue3472() {
        RestClient rest({"url": "http://localhost:"+port});
        assertThrows("REST-RESPONSE-ERROR", \rest.get(), ("/api_text", NOTHING, NOTHING, {"Do-Error": True}));
        rest.setErrorPassthru(True);
        hash<auto> msg = rest.get("/api_text", NOTHING, NOTHING, {"Do-Error": True});
        assertEq(404, msg.status_code);
        assertEq("test error", msg.body);
    }

    methodOptionsTest() {
        RestClient rest({"url": "http://localhost:" + port});
        hash<auto> info;
        rest.doRequest("OPTIONS", "/api_bin", NOTHING, \info);
        assertEq("0", info."response-headers"."content-length");
    }

    methodDeleteTest() {
        RestClient rest({"url": "http://localhost:"+port});
        hash<auto> info;
        try {
            # issue #3237: must throw an exception due to the 404 Not Found response
            rest.del("/api_text", NOTHING, \info);
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
        }
        assertEq(404, info."response-code");
    }

    methodGetTest() {
        RestClient rest(("url" : "http://localhost:"+port));
        auto ret;

        ret = rest.get("/api_text");
        testAssertionValue("/api_text", ret.body, VALUE_TEXT.output);

%ifndef NoXml
        ret = rest.get("/api_xml");
        testAssertionValue("/api_xml", ret.body, VALUE_XML.output);

        ret = rest.get("/api_rpc");
        testAssertionValue("/api_rpc", ret.body, VALUE_XMLRPC.output);
%endif

%ifndef NoJson
        ret = rest.get("/api_json");
        testAssertionValue("/api_json", ret.body, VALUE_JSON.output);
%endif

%ifndef NoYaml
        ret = rest.get("/api_yaml");
        testAssertionValue("/api_yaml", ret.body, VALUE_YAML.output);
%endif
    }

    methodPutTest() {
        RestClient rest(("url" : "http://localhost:"+port));
        auto ret;

        rest.setSerialization("text");
        ret = rest.put("/api_text", VALUE_TEXT.output);
        testAssertionValue("/api_text", ret.body, VALUE_TEXT.output);

        ret = rest.patch("/api_text", VALUE_TEXT.output);
        assertEq(VALUE_TEXT.output, ret.body);

%ifndef NoXml
        rest.setSerialization("rawxml");
        ret = rest.put("/api_xml", VALUE_XML.output);
        testAssertionValue("/api_xml", ret.body, VALUE_XML.output);

        rest.setSerialization("xml");
        ret = rest.put("/api_rpc", VALUE_XMLRPC.output);
        testAssertionValue("/api_rpc", ret.body, VALUE_XMLRPC.output);
%endif

%ifndef NoJson
        rest.setSerialization("json");
        ret = rest.put("/api_json", VALUE_JSON.output);
        testAssertionValue("/api_json", ret.body, VALUE_JSON.output);
%endif

%ifndef NoYaml
        rest.setSerialization("yaml");
        ret = rest.put("/api_yaml", VALUE_YAML.output);
        testAssertionValue("/api_yaml", ret.body, VALUE_YAML.output);
%endif
    }

    methodPostTest() {
        RestClient rest({"url": "http://localhost:" + port});
        auto ret;

        rest.setSerialization("text");
        hash<auto> info;
        #on_exit printf("info: %N\n", info);
        ret = rest.post("/api_bin", <abcd>, \info);
        #printf("ret: %y\n", ret);
        assertEq(<abcd>, binary(ret.body));
        assertEq(MimeTypeOctetStream, ret."content-type");

        rest.setSerialization("bin");
        #on_exit printf("info: %N\n", info);
        ret = rest.post("/api_bin", <abcd>, \info);
        #printf("ret: %y\n", ret);
        assertEq(<abcd>, binary(ret.body));
        assertEq(MimeTypeOctetStream, ret."content-type");
    }

    connectionTests() {
        string url = "http://localhost:8099/";
        RestConnection conn("test", "test", url);
        RestClient client = conn.get(False);
        assertEq(url, client.getURL());

        # issue #3696: test connection serialization
        RestConnection conn2 = Serializable::deserialize(conn.serialize());
        assertEq(conn.url, conn2.url);

        # issue #3321: check default timeouts
        assertEq(45000, client.getTimeout());
        assertEq(45000, client.getConnectTimeout());

        string val = get_random_string();
        hash<auto> hdr = {
            "X-Test": val,
        };
        conn = new RestConnection("test", "test", url, {"monitor": False}, {"headers": hdr});
        client = conn.get(False);
        assertEq(hdr, client.getDefaultHeaders(){"X-Test",});
        assertEq(url, client.getURL());
        assertEq(False, conn.monitor);
        assertEq(True, conn.enabled);

        conn = new RestConnection("test", "test", url, {"monitor": False}, {"headers": "X-Test=" + val});
        client = conn.get(False);
        assertEq(hdr, client.getDefaultHeaders(){"X-Test",});

        conn = new RestConnection("test", "test", url, {"monitor": False}, {"headers": "abc=2, X-Test=" + val});
        client = conn.get(False);
        assertEq({"abc": "2"} + hdr, client.getDefaultHeaders(){"abc", "X-Test",});

        assertThrows("REST-CONNECTION-ERROR", sub () {
            new RestConnection("test", "test", url, {"monitor": False}, {"headers": "1"});
        });
    }
} # class Main
