#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/SqlUtil.qm
%requires ../../../../qlib/OracleSqlUtil.qm
%requires ../../../../qlib/Schema.qm

%try-module oracle
%define NoOracle
%endtry

%exec-class OracleTest

class OracleCharByteTestSchema inherits AbstractSchema {
    public {
        const SCHEMA_NAME = "OracleCharByteTestSchema";
        const SCHEMA_VERSION = "1.0";
    }

    private {
        const COLUMN_OPTIONS = (
            "driver": (
                "oracle": ("character_semantics": True,),
            ),
        );

        const T_ORACLETESTCHARBYTE = (
            "columns": (
                "txt": c_varchar(1),
            ),
        );

        const TABLES = (
            "oracle_test_char_byte": T_ORACLETESTCHARBYTE,
            );
    }

    constructor(AbstractDatasource ds, *string dts, *string its) : AbstractSchema(ds, dts, its) {
    }

    private string getNameImpl() {
        return SCHEMA_NAME;
    }

    private string getVersionImpl() {
        return SCHEMA_VERSION;
    }

    private *hash getTablesImpl() {
        return TABLES;
    }

    private *hash getColumnOptionsImpl() {
        return COLUMN_OPTIONS;
    }
}

class OracleTest inherits QUnit::Test {
    
    private {
        const LOCAL_OPTS = Opts + (
            "connstr": "c,conn=s",
            );

        Datasource m_ds;
    }

    constructor() : QUnit::Test("OracleTest", "1.0", \ARGV, LOCAL_OPTS) {
        if (!m_options.connstr)
            m_options.connstr = ENV.QORE_DB_CONNSTR_ORACLE;
        
        m_ds = new Datasource(m_options.connstr);

        addTestCase("character sematics", \testCharacterSemantic());

        set_return_value(main());
    }

    testCharacterSemantic() {
        m_ds.exec("begin execute immediate 'drop table oracle_test_char_byte'; exception when others then null; end;");
        m_ds.exec("create table oracle_test_char_byte (txt varchar2(1 byte))");

        hash c = m_ds.selectRow("select * from user_tab_columns where table_name = %v", "ORACLE_TEST_CHAR_BYTE");
        assertEq("B", c.char_used, "original character_semantics before schema alignment");
        
        OracleCharByteTestSchema schema(m_ds);
        assertEq(True, schema.getColumnOptions().driver.oracle.character_semantics, "real character_semantics value in schema");
    
        Database db(m_ds);
        schema.align(True, m_options.verbose);

        c = m_ds.selectRow("select * from user_tab_columns where table_name = %v", "ORACLE_TEST_CHAR_BYTE");
        #printf("%N\n", c);
        # it must be C (CHAR) in case of character_semantics=True, B is for BYTE
        assertEq("C", c.char_used, "final character_semantics after schema alignment");
    }
    
    globalTearDown() {
        on_exit m_ds.commit();
        m_ds.exec("drop table oracle_test_char_byte");
    }

}
