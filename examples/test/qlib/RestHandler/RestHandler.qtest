#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Mime.qm
%requires ../../../../qlib/HttpServerUtil.qm
%requires ../../../../qlib/HttpServer.qm
%requires ../../../../qlib/RestSchemaValidator.qm
%requires ../../../../qlib/Swagger.qm
%requires ../../../../qlib/RestHandler.qm
%requires ../../../../qlib/RestClient.qm

%try-module xml >= 1.3
%define NoXml
%endtry

%try-module json
%define NoJson
%endtry

%try-module yaml
%define NoYaml
%endtry

%exec-class RestHandlerTest

class TestRestClass inherits AbstractRestClass {
    string name() {
        return "test";
    }

    hash getEcho(hash cx, *hash ah) {
        return RestHandler::makeResponse(200, cx.body);
    }

    hash putEcho(hash cx, *hash ah) {
        return RestHandler::makeResponse(200, cx.body);
    }
}

class MyRestHandler inherits RestHandler {
    constructor() {
        addClass(new TestRestClass());
    }
}

class SwaggerRestClass inherits AbstractRestClass {
    string name() {
        return "swagger";
    }

    *AbstractRestClass subClass(string arg, hash cx, *hash ah) {
        if (arg == "test")
            return new TestRestClass();
    }
}

class SwaggerRestHandler inherits RestHandler {
    constructor(AbstractRestSchemaValidator validator) : RestHandler(NOTHING, validator) {
        addClass(new SwaggerRestClass());
    }
}

public class RestHandlerTest inherits QUnit::Test {
    private {
        HttpServer mServer;
        RestClient mClient;
        MyRestHandler mHandler();
%ifndef NoJson
        SwaggerRestHandler swaggerHandler(SwaggerLoader::fromString(make_json(TestSchema)));
%endif
        int port;

        const SimpleHashValue = ("a": "1");
        const LargerHashValue = ("a": "1", "b": "2");
        const HashValue = ("a": ("1", "2"));

        const ListValue = ("1", "two", "3");

        const AllValues = ("1", "one", ListValue, SimpleHashValue, LargerHashValue, HashValue);

        const AllYamlValues = AllValues + (now_us(), <bead>);

        const DataValues = (
%ifndef NoXml
            "xml": AllValues,
%endif
            "auto": AllValues,
%ifndef NoYaml
            "yaml": AllYamlValues,
%endif
%ifndef NoJson
            "json": AllValues,
%endif
%ifndef NoXml
            "rawxml": SimpleHashValue,
%endif
            "url": (SimpleHashValue, LargerHashValue),
        );

        const TestSchema = (
            "swagger": "2.0",
            "info": (
                "title": "title",
                "version": "1.0",
            ),
            "basePath": "/swagger",
            "paths": (
                "/test": (
                    "parameters": (
                        (
                            "in": "query",
                            "name": "action",
                            "type": "string",
                        ),
                        (
                            "in": "body",
                            "name": "body",
                            "schema": (
                                "$ref": "#/definitions/Any",
                            ),
                        ),
                    ),
                    "responses": (
                        "200": (
                            "schema": (
                                "$ref": "#/definitions/Any",
                            ),
                        ),
                    ),
                ),
            ),
            "definitions": (
                "Any": (
                    "type": "object",
                    "additionalParameters": (
                        "type": "string",
                    ),
                ),
            ),
        );
    }

    public {
    }

    constructor() : Test("RestHandlerTest", "1.0") {
        addTestCase("Test direct interface", \directTest());
        addTestCase("Test external serialization", \serializationTest());
        addTestCase("Test xml", \xmlTest());
        addTestCase("Test swagger", \swaggerTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    globalSetUp() {
        mServer = new HttpServer(\log(), \log());
        mServer.setHandler("rest-handler", "/test", MimeTypeHtml, mHandler);
%ifndef NoJson
        mServer.setHandler("swagger-handler", "/swagger", MimeTypeJson, swaggerHandler);
%endif
        mServer.setDefaultHandler("rest-handler", mHandler);
        port = mServer.addListener(0).port;

        mClient = new RestClient(("url": "http://localhost:" + port));
    }

    globalTearDown() {
        mServer.stop();
        delete mServer;
    }

    directTest() {
        # test direct interface
        any val = mHandler.handleExternalRequest("GET", "test?action=echo", LargerHashValue);
        assertEq(LargerHashValue, val);
        val = mHandler.handleExternalRequest("PUT", "test?action=echo", LargerHashValue);
        assertEq(LargerHashValue, val);
        val = mHandler.handleExternalRequest("GET", "test?action=echo", HashValue);
        assertEq(HashValue, val);
        val = mHandler.handleExternalRequest("PUT", "test?action=echo", HashValue);
        assertEq(HashValue, val);
    }

    serializationTest() {
%ifdef NoYaml
%ifdef NoXml
%ifdef NoJson
        # cannot test serialization with no binary modules present
        testSkip("no xml module present");
%endif
%endif
%endif
        mClient.setSerialization("auto");

        map testSerialization($1.key, $1.value), DataValues.pairIterator();

        mClient.setSerialization("auto");

        {
            hash info;
            on_error printf("info: %N\n", info);

            hash h = mClient.get("test?action=echo", LargerHashValue, \info);
            assertEq(LargerHashValue, h.body);
            h = mClient.put("test?action=echo", LargerHashValue, \info);
            assertEq(LargerHashValue, h.body);
            h = mClient.get("test?action=echo", HashValue, \info);
            assertEq(HashValue, h.body);
            h = mClient.put("test?action=echo", "1", \info);
            assertEq("1", h.body);
            h = mClient.put("test?action=echo", ListValue, \info);
            assertEq(ListValue, h.body);
        }
    }

    xmlTest() {
%ifdef NoXml
        testSkip("no xml module present");
%endif

        # special tests for rawxml (typeless / raw XML encoding)
        mClient.setSerialization("rawxml");

        {
            hash info;
            on_error printf("info: %N\n", info);

            hash h = mClient.get("test?action=echo", LargerHashValue, \info);
            assertEq(("value": LargerHashValue), h.body);
            h = mClient.put("test?action=echo", LargerHashValue, \info);
            assertEq(("value": LargerHashValue), h.body);
            h = mClient.get("test?action=echo", HashValue, \info);
            assertEq(("value": HashValue), h.body);
            h = mClient.put("test?action=echo", HashValue, \info);
            assertEq(("value": HashValue), h.body);
            h = mClient.put("test?action=echo", "1", \info);
            assertEq(("value": "1"), h.body);
            h = mClient.put("test?action=echo", ListValue, \info);
            assertEq(("list": ("element": ListValue)), h.body);
        }
    }

    swaggerTest() {
%ifdef NoJson
        # cannot test serialization with no binary modules present
        testSkip("no json module present");
%endif

        # test direct interface
        any val = swaggerHandler.handleExternalRequest("GET", "/swagger/test?action=echo", LargerHashValue);
        assertEq(LargerHashValue, val);
        val = swaggerHandler.handleExternalRequest("PUT", "/swagger/test?action=echo", LargerHashValue);
        assertEq(LargerHashValue, val);
        val = swaggerHandler.handleExternalRequest("GET", "/swagger/test?action=echo", HashValue);
        assertEq(HashValue, val);
        val = swaggerHandler.handleExternalRequest("PUT", "/swagger/test?action=echo", HashValue);
        assertEq(HashValue, val);
    }

    urlTest() {
        # special tests for "url" (form URL encoding)
        mClient.setSerialization("url");

        hash info;
        on_error printf("info: %N\n", info);

        assertThrows("FORMURLENCODING-ERROR", \mClient.put(), ("test?action=echo", "1", \info));
        assertThrows("FORMURLENCODING-ERROR", \mClient.put(), ("test?action=echo", ListValue, \info));
        assertThrows("INVALID-VALUE", \mClient.put(), ("test?action=echo", HashValue, \info));
    }

    testSerialization(string data, softlist values) {
        mClient.setSerialization(data);

        hash info;
        on_error printf("info: %N\n", info);

        foreach any val in (values) {
            hash h = mClient.get("test?action=echo", val, \info);
            assertEq(val, h.body, sprintf("GET %s: %s", data, val.type()));
            h = mClient.put("test?action=echo", val, \info);
            assertEq(val, h.body, sprintf("PUT %s: %s", data, val.type()));
        }
    }

    log(string str) {
        delete argv;
    }
}
