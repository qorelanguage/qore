#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm

%new-style
%require-types
%enable-all-warnings

%exec-class ParseToQoreValueTest

public class ParseToQoreValueTest inherits QUnit::Test {
    constructor() : Test ("ParseToQoreValueTest", "1.0") {
        addTestCase ("Tests for parse_to_qore_value()", \parseToQoreValueTest());
        set_return_value(main());
    }

    parseToQoreValueTest() {
        assertEq(1, parse_to_qore_value("1"));
        assertEq("two", parse_to_qore_value("two"));
        assertEq("three", parse_to_qore_value("\"three\""));
        assertEq(2016-05-09, parse_to_qore_value("2016-05-09"));

        # test %STR=
        assertEq("hello, there, a=b", parse_to_qore_value("%STR=hello, there, a=b"));

        # test %EVAL=
        assertEq(("a": 1, "b": (2, 3)), parse_to_qore_value("%EVAL=('a':1, 'b': (2, 3))"));

        # test support of parentheses
        assertEq((1, 2, 3, ("a": "num", "b": "txt", "c": (1, 2, "three")), 5), parse_to_qore_value("1,2,3,(a=num, b=txt, c=(1, 2, \"three\")),5"));
        assertEq((("a": (1, 2, 3, "num"), "b": "txt", "c": (1, 2, "three")), 5), parse_to_qore_value("(a=(1,2,3,num), b=txt, c=(1, 2, \"three\")),5"));
    }
}
