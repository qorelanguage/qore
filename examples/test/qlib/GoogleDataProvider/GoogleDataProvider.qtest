#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm
%requires ../../../../qlib/Logger.qm
%requires ../../../../qlib/DataProvider
%requires ../../../../qlib/ConnectionProvider
%requires ../../../../qlib/RestClient.qm
%requires ../../../../qlib/GoogleRestClient.qm
%requires ../../../../qlib/GoogleDataProvider

%exec-class GoogleDataProviderTest

public class GoogleDataProviderTest inherits QUnit::Test {
    private {
        GoogleDataProvider gdp;

        # command-line options
        const MyOpts = Opts + {
            "conn": "c,connection=s",
        };

        const OptionColumn = 22;
    }

    constructor() : Test("GoogleDataProviderTest Test", "1.0", \ARGV, MyOpts) {
        addTestCase("test", \googleDataProviderTest());
        addTestCase("calendar test", \googleCalendarTest());

        try {
            setupConnection();
        } catch (hash<ExceptionInfo> ex) {
            if (m_options.verbose > 2) {
                printf("%s\n", get_exception_string(ex));
            } else if (m_options.verbose) {
                printf("%s: %s\n", ex.err, ex.desc);
            }
        }

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    googleDataProviderTest() {
        if (!gdp) {
            testSkip("no connection");
        }

        assertEq("google", gdp.getName());
    }

    googleCalendarTest() {
        if (!gdp) {
            testSkip("no connection");
        }

        AbstractDataProvider prov = gdp.getChildProviderEx("calendar");
        assertEq("calendar", prov.getName());
        prov = prov.getChildProviderEx("calendarList");
        assertEq("calendarList", prov.getName());
        prov = prov.getChildProviderEx("list");
        assertEq("list", prov.getName());
        hash<auto> h = prov.doRequest();
        assertEq(Type::String, h.etag.type());
    }

    private usageIntern() {
        TestReporter::usageIntern(OptionColumn);
        printOption("-c,--connection=ARG", "set connection name", OptionColumn);
    }

    private error(string fmt) {
        throw "OPTION-ERROR", sprintf("%s: ERROR: %s", get_script_name(), vsprintf(fmt, argv));
    }

    private setupConnection() {
        *string conn_name = m_options.conn ?? ENV.GOOGLE_CONNECTION;
        if (!conn_name.val()) {
            error("missing -c,--connection option or GOOGLE_CONNECTION environment variable");
        }

        AbstractConnection conn = get_connection(conn_name);
        if (!(conn instanceof GoogleRestConnection)) {
            error("connection %y is type %y; expecting \"GoogleRestConnection\"", conn_name, conn.className());
        }
        gdp = conn.getDataProvider();
    }
}
