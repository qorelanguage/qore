#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class ThreadObjectTest

class ThreadObjectTest inherits QUnit::Test {
    private {
        int threads;
        int iters;
    }
    constructor() : QUnit::Test("Thread object test", "1.0") {
        addTestCase("Test Counter", \testCounter());
        addTestCase("Test Queue", \testQueue());
        addTestCase("Test Thread", \testThread());
        set_return_value(main());
    }

    globalSetUp() {
        threads = 5;
        iters = 2000;
    }

    testCounter() {
        new CounterTest(threads, iters, self);
    }

    testQueue() {
        new QueueTest(threads, iters, self);
    }

    testThread() {
        new ThreadTest(threads, iters, self);
    }
}

class CounterTest {
    private {
        int threads;
        int iters;
        any obj;
        Counter c();
    }
    constructor(int nthreads, int niters, ThreadObjectTest t) {
        threads = nthreads;
        iters = niters;
        obj.key.500.hello = 0;

        do_threads();
        c.waitForZero();
        t.assertTrue(!obj.key.500.hello, "counter");
    }

    private do_threads() {
        while (threads--) {
            c.inc();
            background add();
            c.inc();
            background subtract();
        }
    }

    private add() {
        for (int i = 0; i < iters; i++)
            obj.key.500.hello++;
        c.dec();
    }

    private subtract() {
        for (int i = 0; i < iters; i++)
            obj.key.500.hello--;
        c.dec();
    }
}

class QueueTest {
    private {
        Queue q();
        Counter x();
    }
    constructor(int nthreads, int niters, ThreadObjectTest t) {
        for (int i; i < nthreads; i++) {
            x.inc();
            background qt(niters);
        }
        int c = nthreads * niters;
        while (c--)
            if (rand() % 2)
                q.pop();
            else
                q.get();

        x.waitForZero();
        t.assertTrue(!q.size(), "queue");
    }

    private qt(int niters) {
        for (int i; i < niters; i++)
            q.push(sprintf("tid-%d-%d", gettid(), i));
        x.dec();
    }
}

class ThreadTest inherits Mutex {
    private {
        hash data;
        int threads;
        int iters;

        RWLock drw();
        Gate g();
        Counter c();

        hash gdata;
        hash rwdata;
    }
    constructor(int nthreads, int niters, ThreadObjectTest t) {
        threads = nthreads;
        iters = niters;
        while (threads) {
            c.inc();
            background worker();
            threads--;
        }
        c.waitForZero();
        t.assertTrue(True, "thread object tests");
    }
    *hash getData(list l) {
        lock();
        on_exit unlock();
        return data{l};
    }
    setData(hash h) {
        lock();
        on_exit unlock();
        data += h;
    }
    *hash getRWData(list l) {
        drw.readLock();
        on_exit
            drw.readUnlock();
        return rwdata{l};
    }
    setRWData(hash h) {
        drw.writeLock();
        on_exit
            drw.writeUnlock();
        rwdata += h;
    }
    *hash getGateData(list l) {
        g.enter();
        on_exit g.exit();
        return gdata{l};
    }
    setGateData(hash h) {
        g.enter();
        on_exit g.exit();
        gdata+= h;
    }
    worker() {
        for (int i = 0; i < iters; i++) {
            #if (!(i % 1000))
            #    printf("TID %3d: %d/%d\n", gettid(), i, iters);
            int c = rand() % 6;
            string key1 = sprintf("key%d", rand() % 10);
            string key2 = sprintf("key%d", (rand() % 10) + 10);
            string key3 = sprintf("key%d", rand() % 20);
            if (!c) {
                hash h = (
                    key1: rand() % 10,
                    key2: rand() % 10,
                    );
                setData(h);
                continue;
            }
            if (c == 1) {
                getData((key1, key2, key3));
                continue;
            }
            if (c == 2) {
                hash h = (
                    key1: rand() % 10,
                    key2: rand() % 10,
                    );
                setRWData(h);
                continue;
            }
            if (c == 3) {
                getRWData((key1, key2, key3));
                continue;
            }
            if (c == 4) {
                hash h = (
                    key1: rand() % 10,
                    key2: rand() % 10,
                    );
                setGateData(h);
                continue;
            }
            if (c == 5) {
                getGateData((key1, key2, key3));
                continue;
            }
        }
        c.dec();
    }
}
