#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class parseUrlTest

public class parseUrlTest inherits QUnit::Test {
    constructor() : Test("parse_url test", "1.0") {
        addTestCase("slash test", \slashTest());
        addTestCase("Test 1", \test());
        addTestCase("port test", \portTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    slashTest() {
        hash<auto> h = parse_url("https://user@example.com/token:api-token@qoretechnologies.zendesk.com/api/v2/users");
        assertEq("user@example.com/token", h.username);
        assertEq("api-token", h.password);
        assertEq("qoretechnologies.zendesk.com", h.host);
        assertEq("/api/v2/users", h.path);

        h = parse_url("https://user@example.com/token:api-token@qoretechnologies.zendesk.com");
        assertEq("user@example.com/token", h.username);
        assertEq("api-token", h.password);
        assertEq("qoretechnologies.zendesk.com", h.host);
        assertNothing(h.path);

        h = parse_url("https://user@example.com:token@qoretechnologies.zendesk.com");
        assertEq("user@example.com", h.username);
        assertEq("token", h.password);
        assertEq("qoretechnologies.zendesk.com", h.host);
        assertNothing(h.path);
    }

    test() {
        # "standard" test
        assertEq(("protocol": "http", "path": "/path", "username": "user", "password": "pass", "host": "host", "port": 80), parse_url("http://user:pass@host:80/path"));

        # "standard" path
        assertEq(("protocol": "file", "path": "/tmp"), parse_url("file:///tmp"));

        # UNIX socket URL
        assertEq(("protocol": "http", "host": "/tmp/socket-file.sock"), parse_url("http://socket=%2Ftmp%2Fsocket-file.sock"));
        assertEq(("protocol": "http", "host": "/tmp/socket-file.sock", "path": "/path"), parse_url("http://socket=%2Ftmp%2Fsocket-file.sock/path"));

        # windows file paths
        assertEq(("protocol": "file", "path": "c:\\tmp"), parse_url("file://c:\\tmp"));
        assertEq(("protocol": "file", "path": "\\\\share\\dir"), parse_url("file://\\\\share\\dir"));

        # IPv6 localhost
        assertEq(("host": "::"), parse_url("::"));

        # one-character username
        assertEq(("protocol": "http", "username": "u", "password": "p", "host": "h"), parse_url("http://u:p@h"));

        # check that we can parse a UTF-16-encoded URL
        assertEq(("protocol": "http", "username": "u", "password": "p", "host": "h"), parse_url(convert_encoding("http://u:p@h", "UTF-16")));

        # empty URL
        assertThrows("PARSE-URL-ERROR", sub () { parse_url(""); } );

        # invalid characters in port
        assertThrows("PARSE-URL-ERROR", sub () { parse_url("scheme://user@host:hi/"); } );

        # corner case: a path string should be recognized and parsed into the path key
        assertEq(("path": "/tmp/file"), parse_url("/tmp/file"));

        # corner case: a UNIX socket path string with no protocol
        assertEq(("host": "/tmp/socket-file.sock"), parse_url("socket=%2Ftmp%2Fsocket-file.sock"));

        # corner case: a UNIX socket path string with no protocol but with a path
        assertEq(("host": "/tmp/socket-file.sock", "path": "/path"), parse_url("socket=%2Ftmp%2Fsocket-file.sock/path"));

        # corner case: a relative path must be parsed with just the "path" key
        assertEq(("path": "some/path"), parse_url("some/path"));

        # corner case: a hostname must be returned just in the "host" key
        assertEq(("host": "hostname"), parse_url("hostname"));

        # corner case: a single leading backslash is returned as a hostname
        assertEq(("host": "\\hostname"), parse_url("\\hostname"));

        # corner case: two leading backslashes are returned as a UNC path
        assertEq(("path": "\\\\hostname"), parse_url("\\\\hostname"));

        # issue #3287: single character hostname
        assertEq("a", parse_url("http://a").host);
        assertEq("a", parse_url("http://a/").host);
        assertEq("a", parse_url("http://a:1").host);
        assertEq("a", parse_url("http://a:1/").host);
    }

    private portTest() {
        # non num chars in port
        try {
            parse_url("http://localhost:abc");
            fail("it must throw an exception");
        }
        catch (hash ex) {
            assertEq("PARSE-URL-ERROR", ex.err);
            assertEq(True, ex.desc =~ /has an invalid non-numeric character in the port specification/, ex.desc);
        }

        # out of INT range port
        try {
            parse_url("http://localhost:999999999999999");
            fail("it must throw an exception");
        } catch (hash<ExceptionInfo> ex) {
            assertEq("PARSE-URL-ERROR", ex.err);
            assertRegex("invalid port.*between.*0.*65535", ex.desc);
        }

        # out of int16 range: 0-65535
        try {
            parse_url("http://localhost:65536");
            fail("it must throw an exception");
        } catch (hash<ExceptionInfo> ex) {
            assertEq("PARSE-URL-ERROR", ex.err);
            assertRegex("invalid port.*between.*0.*65535", ex.desc);
        }
    }
}
