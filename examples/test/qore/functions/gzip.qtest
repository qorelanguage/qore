#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class GzipTest

public class GzipTest inherits QUnit::Test {
    private {
        const str = "This is a long string xxxxxxxxxxxxxxxxxxxxxxxxxxxx";
        binary bstr;
        binary c;
    }

    constructor() : Test("GzipTest", "1.0") {
        addTestCase("What this method is testing", \gzipTest(), NOTHING);

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    setUp() {
        bstr = binary(str);
        c = compress(str);
    }

    gzipTest() {
        testAssertion("compress() and uncompress_to_string()", \uncompress_to_string(), (c,), new TestResultValue(str));
        testAssertion("compress() and uncompress_to_binary()", \uncompress_to_binary(), (c,), new TestResultValue(bstr));

        # TODO: This should test against a real gzip string
        binary gz = gzip(str);

        testAssertion("gzip() and gunzip_to_string()", \gunzip_to_string(), (gz,), new TestResultValue(str));
        testAssertion("gzip() and gunzip_to_binary()", \gunzip_to_binary(), (gz,), new TestResultValue(bstr));
    }
}
