#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%no-child-restrictions

%requires ../../../../qlib/QUnit.qm

our int calls_constructor = 0;
our int calls_destructor  = 0;
our int calls_hello  = 0;

class PrivTest {
    constructor(int i) {}
    private constructor(string str) {}
}

class Test {
    private { any data; }
    public { any a; }
    constructor(any a) {
        data = a;
        calls_constructor++;
    }
    destructor() {
        calls_destructor++;
    }
    any getData() {
        return data;
    }
    string getType() {
        return get_class_name(self);
    }
    private p1() {
    }
}

class Other {
    constructor(Parent p) {
    }
}

class Parent {
}

class Child inherits Parent, Other {
    constructor() : Other(self) {
    }
}

private Test::p2() {
    p1();
}

Test::hello() {
    p2();
    calls_hello++;
}

sub et(Test t) {
    t.a = "123";
}

const Methods = ('p2', 'getData', 'hello', 'destructor', 'getType', 'p1', 'constructor');

%exec-class ObjectTest

class ObjectTest inherits QUnit::Test {
    public {
    }

    private {
        const CreateObjectSource = "
object sub test1() { return create_object(\"Mutex\");}
object sub test2() { return create_object(\"PrivTest\", \"str\");}
object sub test3() { return create_object_args(\"PrivTest\", 1);}
";
    }

    constructor() : QUnit::Test("Object test", "1.0") {
        addTestCase("Test", \testObj());
        addTestCase("create_object", \testCreateObject());
        addTestCase("inheritance", \inheritance());
        set_return_value(main());
    }

    testObj() {
        Test t = new Test(1);

        assertEq(1, calls_constructor);
        (new Test(3)).hello();
        assertEq(2, calls_constructor);
        assertEq(1, calls_hello);
        assertEq("Test", t.getType());
        t.hello();
        assertEq(2, calls_hello);
        et(t);
        assertEq("123", t.a, "variable changed in method");

        # test fails on OSX, method return order is not guaranteed across platforms
        #unit.cmp(getMethodList(t), Methods, 'got method list');

        # test each method separately
        list ml = get_method_list(t);
        assertEq(Methods.size(), ml.size(), "method list size");
        map assertEq(True, inlist_hard($1, Methods), "method list " + $1), ml;

        # unless we explicitly delete, we get the following exception on OSX (but not on Linux):
        #   DESTRUCTOR-ERROR: illegal variable assignment after second phase of variable destruction
        delete t;
    }

    testCreateObject() {
        assertEq("Mutex", create_object("Mutex").className());
        assertEq("Mutex", create_object_args("Mutex").className());

        Program p(PO_NEW_STYLE | PO_NO_THREAD_CLASSES);
        p.importClass("PrivTest");
        p.parse(CreateObjectSource, "create-object");
        assertThrows("CREATE-OBJECT-ERROR", \p.callFunction(), "test1");
        assertThrows("RUNTIME-OVERLOAD-ERROR", \p.callFunction(), "test2");
        assertEq("PrivTest", p.callFunction("test3").className());
    }

    inheritance() {
        # causes a crash without the fix for #1169
        Child c();
    }
}
