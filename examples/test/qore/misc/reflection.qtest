#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class ReflectionTest

class ReflectionTest inherits QUnit::Test {
    constructor() : QUnit::Test("ReflectionTest", "1.0") {
        addTestCase("reflection tests", \reflectionTests());
        set_return_value(main());
    }

    reflectionTests() {
        Class c("Mutex");

        assertTrue(c.isBuiltin());
        assertFalse(c.isUser());
        assertFalse(c.isAbstract());
        assertEq("Mutex", c.getName());
        assertEq("Qore::Thread::Mutex", c.getPathName());
        assertGt(0, c.getId());
        assertEq(20, c.getHash().size());
        assertFalse(c.hasMemberGate());
        assertFalse(c.hasMethodGate());
        assertFalse(c.hasMemberNotification());
        assertEq(MC_BUILTIN, c.getModifiers());
        assertEq(("builtin",), c.getModifierList());
        assertEq(DOM_THREAD_CLASS, c.getDomain());
        assertEq(("THREAD_CLASS",), c.getDomainStringList());

        {
            auto v = c.newObject();
            assertTrue(v instanceof Mutex);
            Class c1 = v.getClass();
            assertEq(c1.getId(), c.getId());
            assertEq(c1.getHash(), c.getHash());
        }

        {
            auto v = c.newObjectArgs();
            assertTrue(v instanceof Mutex);
            Class c1 = v.getClass();
            assertEq(c1.getId(), c.getId());
            assertEq(c1.getHash(), c.getHash());
        }

        NormalMethod m = c.getMethod("lock");
        assertTrue(m.isBuiltin());
        assertFalse(m.isUser());
        assertEq("lock", m.getName());
        assertFalse(m.isInjected());

        m = c.getNormalMethod("lock");
        assertEq("normal", m.getMethodTypeName());
        assertTrue(m.isBuiltin());
        assertFalse(m.isUser());
        assertEq("lock", m.getName());

        assertThrows("METHOD-ERROR", \c.getStaticMethod(), "lock");

        Mutex mtx = c.newObject();
        m.call(mtx);
        assertTrue(mtx.lockOwner());
        mtx.unlock();

        m.callArgs(mtx);
        assertTrue(mtx.lockOwner());
        mtx.unlock();

        assertThrows("METHOD-ERROR", \m.call(), new Condition());

        ConstructorMethod con = c.getMethod("constructor");
        assertEq("constructor", con.getMethodTypeName());
        assertTrue(con.isBuiltin());
        assertFalse(con.isUser());
        assertEq("constructor", con.getName());
        {
            object o = con.call();
            assertTrue(o instanceof Mutex);
        }

        DestructorMethod des = c.getMethod("destructor");
        assertEq("destructor", des.getMethodTypeName());
        assertTrue(des.isBuiltin());
        assertFalse(des.isUser());
        assertEq("destructor", des.getName());
        {
            object o = con.call();
            assertTrue(o instanceof Mutex);
            assertEq("Mutex", o.className());
            des.call(o);
            assertThrows("OBJECT-ALREADY-DELETED", \o.lock());
        }

        {
            Class c1 = Class::forName("Mutex");
            assertEq("Mutex", c1.getName());
            assertEq(c1.getId(), c.getId());
            assertEq(c1.getHash(), c.getHash());
        }

        CopyMethod copy = c.getMethod("copy");
        assertEq("copy", copy.getMethodTypeName());
        assertTrue(copy.isBuiltin());
        assertFalse(copy.isUser());
        assertEq("copy", copy.getName());
        {
            object o = con.call();
            assertTrue(o instanceof Mutex);
            assertEq("Mutex", o.className());
            Mutex o2 = copy.call(o);
            assertTrue(o2 instanceof Mutex);
            assertEq("Mutex", o2.className());
            assertThrows("METHOD-ERROR", \copy.call(), new Condition());
        }

        {
            list<AbstractMethod> l = c.getMethods();
            assertEq(6, l.size());
        }

        {
            list<hash<ClassAccessInfo>> l = c.getParentClasses();
            assertEq(1, l.size());
            hash<ClassAccessInfo> h = l[0];
            assertEq("AbstractSmartLock", h.cls.getName());
            assertEq(AC_PUBLIC, h.access);
            assertEq("public", h.access_string);
        }

        {
            Class c1 = Class::forName("HashIterator");
            list<hash<ClassAccessInfo>> l = c1.getParentClasses();
            assertEq(1, l.size());
            hash<ClassAccessInfo> h = l[0];
            assertEq("AbstractQuantifiedBidirectionalIterator", h.cls.getName());
            assertEq(AC_PUBLIC, h.access);
            assertEq("public", h.access_string);
        }

        {
            Class c1 = Class::forName("AbstractQuantifiedBidirectionalIterator");
            list<hash<ClassAccessInfo>> l = c1.getParentClasses();
            assertEq(2, l.size());
            hash<ClassAccessInfo> h = l[0];
            assertEq("AbstractBidirectionalIterator", h.cls.getName());
            assertEq(AC_PUBLIC, h.access);
            assertEq("public", h.access_string);
            h = l[1];
            assertEq("AbstractQuantifiedIterator", h.cls.getName());
            assertEq(AC_PUBLIC, h.access);
            assertEq("public", h.access_string);

            assertThrows("ABSTRACT-CLASS-ERROR", \c1.newObject());
        }

        NormalMethodVariant v = m.getVariants()[0];
        assertEq(MC_PUBLIC | MC_BUILTIN, v.getModifiers());
        assertEq(("public", "builtin",), v.getModifierList());
        assertEq("", v.getParamString());
        assertEq("nothing", v.getReturnTypeString());
        assertEq(DOM_THREAD_CLASS, v.getDomain());
        assertEq(("THREAD_CLASS",), v.getDomainStringList());

        {
            mtx = new Mutex();
            assertNothing(v.call(mtx));
            assertTrue(mtx.lockOwner());
            mtx.unlock();
            assertThrows("CALL-WITH-TYPE-ERRORS", \v.call(), (mtx, 1));

            Condition cond();
            NormalMethodVariant v1 = cond.getClass().getMethod("wait").getVariants()[0];
            assertThrows("RUNTIME-TYPE-ERROR", \v1.call(), (cond, 1));
        }

        {
            Class c1 = Class::forName("Qore::TimeZone");
            StaticMethodVariant v1 = c1.getStaticMethod("set").getVariants()[0];
            assertThrows("RUNTIME-TYPE-ERROR", \v1.call(), (1));
        }

        {
            AbstractReflectionFunction f = v.getFunction();
            assertEq(m.getName(), f.getName());
        }

        {
            Class c1 = Class::forName("AbstractIterator");
            assertEq(MC_ABSTRACT, c1.getModifiers() & MC_ABSTRACT);
            NormalMethodVariant v1 = c1.getMethod("getValue").getVariants()[0];
            assertTrue(v1.isAbstract());
            assertTrue(v1.empty());
            assertFalse(v1.hasBody());
            assertThrows("ABSTRACT-VARIANT-ERROR", \v1.call(), (new ListIterator()));
        }

        c = Class::forName("Condition");

        v = c.getVariant("wait", Class::forName("AbstractSmartLock").getType(), TimeoutType);
        assertEq("int", v.getReturnType().getName());
        assertEq((NOTHING, 0), v.getDefaultArgs());
        assertEq(("lock", "timeout_ms"), v.getParamNames());
        assertEq("object<AbstractSmartLock> lock, timeout timeout_ms = 0", v.getParamString());
        assertEq("public int Condition::wait(object<AbstractSmartLock> lock, timeout timeout_ms = 0)", v.toString());
        assertEq(0, v.getCodeFlags());
        assertEq((), v.getCodeFlagList());

        v = Class::forName("File").getMethod("printf").getVariants()[0];
        assertEq(CF_USES_EXTRA_ARGS, v.getCodeFlags());
        assertEq(("USES_EXTRA_ARGS",), v.getCodeFlagList());

        {
            ConstructorMethodVariant conv = c.getConstructorVariant();
            Condition cond = conv.call();
            assertEq("Condition", cond.className());

            assertThrows("CALL-WITH-TYPE-ERRORS", \conv.call(), 1);

            assertThrows("METHOD-ERROR", \c.getDestructorVariant());
            assertNothing(c.getIfDestructorVariant());

            Class c1 = Class::forName("Queue");
            conv = c1.getConstructorVariant();
            Queue q = conv.call();
            assertEq("Queue", q.className());

            CopyMethodVariant copyv = c1.getCopyVariant();
            assertThrows("METHOD-ERROR", \copyv.call(), cond);
            Queue q2 = copyv.call(q);
            assertEq("Queue", q2.className());

            DestructorMethodVariant destrv = c1.getDestructorVariant();
            assertThrows("METHOD-ERROR", \destrv.call(), cond);
            destrv.call(q);
            assertFalse(q.val());

            #list<ConstructorMethodVariant>
        }
    }
}
