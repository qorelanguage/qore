#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/QUnit.qm

%exec-class ExceptionTest

class ExceptionTest inherits QUnit::Test {
    private {
        string err;
        string err2;
        string err3;
        string desc;
        string arg;
        string type;
    }

    constructor() : QUnit::Test("Exception test", "1.0") {
        addTestCase("Test simple try/catch block", \testSimpleTryCatch());
        addTestCase("Test rethrow", \testRethrow());
        addTestCase("misc tests", \miscTests());
        #addTestCase("Complex try/catch hierarchy", \testComplexHierarchy());
        set_return_value(main());
    }

    setUp() {
        err  = '';
        err2 = '';
        err3 = '';
        desc = '';
        arg  = '';
        type = '';
    }

    testSimpleTryCatch() {
        try  {
            throw "testing", "123", "test";
        }
        catch (ex) {
            err  = ex.err;
            desc = ex.desc;
            arg  = ex.arg;
        }
        assertEq("testing", err);
        assertEq("123", desc);
        assertEq("test", arg);
    }

    testRethrow() {
        try {
            try {
                throw "TEST-ERROR", "this is a test";
            }
            catch () {
                rethrow;
            }
        }
        catch (ex) {
            err  = ex.err;
            desc = ex.desc;
            type = ex.type;
        }
        assertEq("TEST-ERROR", err);
        assertEq("this is a test", desc);
        assertEq("User", type);
    }

    miscTests() {
        Program p(PO_NEW_STYLE);
        assertThrows("PARSE-EXCEPTION", \p.parse(), ("try {} catch (Exception e) {}", ""));

        int a = 1;
        try {
            throw a;
        }
        catch (hash<ExceptionInfo> ex) {
            assertEq(1, ex.err);
        }
    }

    /*testComplexHierarchy() {
        try {
            try {
                try {
                    printf("%s\n", snope.refresh());
                }
                catch (ex) {
                    err = ex.err;

                    try {
                        try {
                            context gee (gee) where (%foo == "gee")
                                printf("%s\n", sdfdas);
                        }
                        catch (ex1) {
                            desc = shift argv;
                            printf("QORE %s Exception in line %d of file %s: %s: %s\n",
                                ex1.type, ex1.line, ex1.file, ex1.err, ex1.desc);
                            throw snope.blah();
                        }
                        throw snope.sdfds();
                    }
                    catch (ex2) {
                        err2 = ex2.err;
                        throw "TEST";
                    }
                }
            }
            catch (ex) {
                err3 = ex.err;
            }
        }
        catch (ex) {
            printf("QORE %s Exception in line %d of file %s: %s: %s\n",
                ex.type, ex.line, ex.file, ex.err, ex.desc);
            context (gee) where (%whiz == "wdsf")
                printf("%s\n", %dsfdf);
        }

        assertEq("PSEUDO-METHOD-DOES-NOT-EXIST", err);
        assertEq("PSEUDO-METHOD-DOES-NOT-EXIST", err2);
        assertEq("TEST", err3);
    }*/
}
