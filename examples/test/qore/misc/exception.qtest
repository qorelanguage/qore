#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires reflection
%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm

%exec-class ExceptionTest

class ExceptionTest inherits QUnit::Test {
    private {
        hash<ExceptionInfo> ex;
    }

    constructor() : QUnit::Test("Exception test", "1.0") {
        addTestCase("return test", \returnTest());
        addTestCase("Test simple try/catch block", \testSimpleTryCatch());
        addTestCase("Test rethrow", \testRethrow());
        addTestCase("misc tests", \miscTests());
        set_return_value(main());
    }

    returnTest() {
        try {
            error();
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            # make sure that the exception refers to the line of the method missing the return statement
            # by usig reflection, we don't have to hardcode the line
            int line = Class::forName("ExceptionTest").getNormalMethod("error").getVariant().getSourceLocation().line;
            assertEq(line, ex.line);
        }
    }

    bool error() {
        if (False) {
            return True;
        }
    }

    testSimpleTryCatch() {
        try  {
            throw "testing", "123", "test";
        } catch (hash<ExceptionInfo> ex1) {
            ex = ex1;
        }
        assertEq("testing", ex.err);
        assertEq("123", ex.desc);
        assertEq("test", ex.arg);
        assertEq("Qore", ex.lang);
    }

    testRethrow() {
        try {
            try {
                throw "TEST-ERROR", "this is a test";
            } catch () {
                rethrow;
            }
        } catch (hash<ExceptionInfo> ex1) {
            ex = ex1;
        }
        assertEq("TEST-ERROR", ex.err);
        assertEq("this is a test", ex.desc);
        assertEq("User", ex.type);
        assertEq("Qore", ex.lang);
    }

    miscTests() {
        Program p(PO_NEW_STYLE);
        assertThrows("PARSE-EXCEPTION", \p.parse(), ("try {} catch (Exception e) {}", ""));

        int a = 1;
        try {
            throw a;
        } catch (hash<ExceptionInfo> ex) {
            assertEq(1, ex.err);
        }
    }
}
