#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args
%no-child-restrictions

%requires ../../../../qlib/QUnit.qm

%exec-class OverloadTest

hashdecl MyHash {
    int x = 1;
}

string sub f1_test(string x) {
    return type(x);
}

string sub f1_test(float x) {
    return type(x);
}

string sub f_test(int x) {
    return type(x);
}

string sub f_test(float x) {
    return type(x);
}

int sub f2_test(*int i) {
    return -1;
}

int sub f2_test() {
    return 0;
}

int sub f3_test(*int i, *int j) {
    return -1;
}

int sub f3_test() {
    return 0;
}

int sub f4_test() {
    delete argv;
    return -1;
}

int sub f4_test(list l) {
    return 0;
}

int sub f5_test(softlist l, *object o) {
    return -1;
}

int sub f5_test(string str) {
    return 0;
}

int sub f6(int i, *string s1, *int i1, *hash h1) {
    return 4;
}

int sub f6(int i, *string s1, *int i1) {
    return 3;
}

int sub f6(int i, *string s1) {
    return 2;
}

int sub f6(int i) {
    return 1;
}

int sub f7(hash h) {
    return 1;
}

int sub f7(hash<string, int> h) {
    return 2;
}

int sub f7(hash<MyHash> h) {
    return 3;
}

int sub f8(any i) {
    return 0;
}

int sub f8(hash h) {
    return 1;
}

int sub f8(hash<string, int> h) {
    return 2;
}

int sub f9(any x) {
    return 0;
}

int sub f9(softint i) {
    return 1;
}

int sub f10(auto x) {
    return 0;
}

int sub f10(softint i) {
    return 1;
}

public class OverloadTest inherits QUnit::Test {
    public {
        const Api = "hash sub p() { return {}; }*hash sub p(string a) {return {};}any sub p(string a, string b) { return 1; }";
    }

    constructor() : Test("Overload test", "1.0") {
        addTestCase("Values test", \testValues());
        addTestCase("Variables test", \testVariables());
        addTestCase("issue 1928", \issue1928());
        addTestCase("Overload test", \testOverload());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    issue1928() {
        Program p(PO_NEW_STYLE);
        p.parsePending(Api, "");
        p.parse("sub t() {}", "");
        p.parse("int sub t1(){string vstr = ''; string p1 = vstr + ''; any x = ''; int rv = p(x, p1); return rv;}", "");
        p.parse("hash sub t2(){any a1 = ''; any a2; hash rv = p(a1, a2); return rv;}", "");
        assertEq(1, p.callFunction("t1"));
        assertEq({}, p.callFunction("t2"));
    }

    testValues() {
        # test parse-time matching
        assertEq("integer", f_test(1));
        assertEq("float", f_test(1.1));
        assertEq("float", f1_test(1));
        assertEq("float", f1_test(1.1));
        assertEq("string", f1_test("str"));
        assertEq("string", f1_test("1.11"));

        # test runtime matching
        assertEq("integer", call_function(\f_test(), 1));
        assertEq("float", call_function(\f_test(), 1.1));
        assertEq("float", call_function(\f1_test(), 1));
        assertEq("float", call_function(\f1_test(), 1.1));
        assertEq("string", call_function(\f1_test(), "str"));
        assertEq("string", call_function(\f1_test(), "1.11"));

        assertThrows("RUNTIME-OVERLOAD-ERROR", \f1_test(), 123.456n);
    }

    testVariables() {
        int i = 1;
        float fi = 1.1;

        # test parse-time matching
        assertEq("integer", f_test(i));
        assertEq("float", f1_test(i));
        assertEq("float", f_test(fi));
        assertEq("float", f1_test(fi));

        # test runtime matching
        assertEq("integer", call_function(\f_test(), i));
        assertEq("float", call_function(\f1_test(), i));
        assertEq("float", call_function(\f_test(), fi));
        assertEq("float", call_function(\f1_test(), fi));
    }

    testOverload() {
        # test parse-time matching
        assertEq(0, f2_test());
        assertEq(0, f3_test());
        assertEq(0, f4_test(()));
        assertEq(0, f5_test("hi"));
        assertEq(1, f6(1));
        # make sure we catch and fix the behavior of corner cases
        any a;
        assertEq(2, f6(1, NOTHING));
        assertEq(2, f6(1, a));
        assertEq(2, f6(1, "hi"));
        assertEq(3, f6(1, NOTHING, 1));
        assertEq(3, f6(1, a, 1));
        assertEq(3, f6(1, NOTHING, NOTHING));
        assertEq(3, f6(1, a, 1));
        assertEq(4, f6(1, NOTHING, NOTHING, {}));
        assertEq(4, f6(1, a, a, {}));
        assertEq(4, f6(1, NOTHING, NOTHING, NOTHING));
        assertEq(4, f6(1, a, a, a));
        # check overload resolution with complex types
        assertEq(1, f7({}));
        assertEq(2, f7(("a": 1)));
        assertEq(2, f7(cast<hash<string, int>>(("a": 1))));
        assertEq(3, f7(new hash<MyHash>()));
        assertEq(0, f8());
        assertEq(1, f8({}));
        assertEq(2, f8(("a": 1)));
        assertEq(1, f8(("a": "1")));
        # check overload resolution against "any" and "auto"
        assertEq(0, f9());
        assertEq(1, f9("string"));
        assertEq(0, f10());
        assertEq(1, f10("string"));

        # test runtime matching
        assertEq(0, call_function(\f2_test()));
        assertEq(0, call_function(\f3_test()));
        assertEq(0, call_function(\f4_test(), ()));
        assertEq(0, call_function(\f5_test(), "hi"));
        assertEq(1, call_function(\f6(), 1));
        # make sure we catch and fix the behavior of corner cases
        assertEq(2, call_function(\f6(), 1, NOTHING));
        assertEq(2, call_function(\f6(), 1, a));
        assertEq(2, call_function(\f6(), 1, "hi"));
        assertEq(3, call_function(\f6(), 1, NOTHING, 1));
        assertEq(3, call_function(\f6(), 1, a, 1));
        assertEq(3, call_function(\f6(), 1, NOTHING, NOTHING));
        assertEq(3, call_function(\f6(), 1, a, a));
        assertEq(4, call_function(\f6(), 1, NOTHING, NOTHING, {}));
        assertEq(4, call_function(\f6(), 1, a, a, {}));
        assertEq(4, call_function(\f6(), 1, NOTHING, NOTHING, NOTHING));
        assertEq(4, call_function(\f6(), 1, a, a, a));
        assertEq(1, call_function(\f7(), {}));
        assertEq(2, call_function(\f7(), ("a": 1)));
        assertEq(2, call_function(\f7(), cast<hash<string, int>>(("a": 1))));
        assertEq(3, call_function(\f7(), new hash<MyHash>()));
        assertEq(0, call_function(\f8()));
        assertEq(1, call_function(\f8(), {}));
        assertEq(2, call_function(\f8(), ("a": 1)));
        assertEq(1, call_function(\f8(), ("a": "1")));
        assertEq(0, call_function(\f9()));
        assertEq(1, call_function(\f9(), "string"));
        assertEq(0, call_function(\f10()));
        assertEq(1, call_function(\f10(), "string"));
    }
}
