#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../qlib/Util.qm
%requires ../../../../qlib/QUnit.qm

%exec-class FloatTest

class FloatTest inherits QUnit::Test {
    public {
    }

    constructor() : QUnit::Test("FloatTest", "1.0") {
        addTestCase("FloatTests", \floatTests());
        addTestCase("infp test", \infpTests());
        addTestCase("nanp test", \nanpTests());
        addTestCase("format", \formatTests());
        set_return_value(main());
    }

    floatTests() {
        assertEq("-2e-34", (-2e-34).toString());
    }

    infpTests() {
        assertTrue(@inf@.infp());
        assertTrue((-@inf@).infp());
        assertTrue(nlog(@inf@).infp());
        assertFalse((1.0).infp());
        assertFalse(@nan@.infp());
    }

    nanpTests() {
        assertTrue(@nan@.nanp());
        assertFalse((1.0).nanp());
        assertFalse(@inf@.nanp());
    }

    formatTests() {
        assertEq("1001.33", 1001.3299999.format(""));
        assertEq("1,001", 1001.3299999.format(","));
        assertEq("1,001", 1001.3299999.format(",."));
        assertEq("1,001.33", 1001.3299999.format(",.2"));
        assertEq("1.001", 1001.3299999.format("."));
        assertEq("1.001", 1001.3299999.format(".,"));
        assertEq("1.001,33", 1001.3299999.format(".,2"));

        assertEq("0.5", 0.5.format(""));
        assertEq("1", 0.5.format(",.0"));
        assertEq("-0.5", (-0.5).format(""));
        assertEq("-1", (-0.5).format(",.0"));
        assertEq("-0.49", (-0.49).format(""));
        assertEq("-0.5", (-0.50).format(",.1"));
        assertEq("0", (-0.49).format(",.0"));
        assertEq("-0.5", (-0.49).format(",.1"));
        assertEq("-0.00000001", (-0.000000005).format(",.8"));
        assertEq("0.00000000", (-0.000000004).format(",.8"));

        assertEq("-48.392.093.894,235", (-48392093894.2349).format(".,3"));
        assertEq("-48.392.093.894,235", format_number(".,3", -48392093894.2349));

        assertEq("1001.329999", 1001.329999.format(SNF_AllDigits).substr(0, 11));
        assertEq("1,001", 1001.3299999.format(0, "", ","));
        assertEq("1,001", 1001.3299999.format(0, ".", ","));
        assertEq("1,001.33", 1001.3299999.format(2, NOTHING, ","));
        assertEq("1.001", 1001.3299999.format(0, "", "."));
        assertEq("1.001", 1001.3299999.format(0, ",", "."));
        assertEq("1.001,33", 1001.3299999.format(2, ",", "."));

        assertEq("0.5", 0.5.format(SNF_AllDigits));
        assertEq("1", 0.5.format(0));
        assertEq("1", 0.5.format(0, ".", ","));
        assertEq("-0.5", (-0.5).format(SNF_AllDigits));
        assertEq("-1", (-0.5).format(0, ".", ","));
        assertEq("-0.5", (-0.50).format(SNF_AllDigits, ".", ","));
        assertEq("0", (-0.49).format(0, ".", ","));
        assertEq("-0.5", (-0.49).format(1, "."));
        assertEq("-0.00000001", (-0.000000005).format(8, ".", ","));
        assertEq("0.00000000", (-0.000000004).format(8, ".", ","));

        assertEq("10", 5.0.format(-1));
        assertEq("0", 5.0.format(-2));
        assertEq("0", 5.0.format(-3));
        assertEq("450", 449.0.format(-1));
        assertEq("400", 449.0.format(-2));
        assertEq("25,400", 25449.0.format(-2, NOTHING, ","));
        assertEq("-25,400", (-25449.0).format(-2, NOTHING, ","));
        assertEq("-25,500", (-25450.0).format(-2, NOTHING, ","));
        assertEq("-1,000", (-500.0).format(-3, NOTHING, ","));

        assertEq("-48.392.093.894,235", (-48392093894.2349).format(3, ",", "."));

        assertEq("1000", 1001.0.format(-3));
        assertEq("0", 1001.0.format(-4));
        assertEq("0", 1001.0.format(-5));
    }
}
