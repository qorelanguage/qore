#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires ../../../../../qlib/Util.qm
%requires ../../../../../qlib/QUnit.qm

%exec-class SerializableTest

class Err inherits Serializable {
    public {
        Mutex m();
    }
}

class Other inherits Serializable;

class Base inherits Serializable {
    public {
        int x = 2;
    }

    private:internal {
        int i = 2;
    }

    int get() {
        return x;
    }
}

class T inherits Serializable, private:internal Base {
    public {
        int i = 1;
        float f = 1.0;
        number n = M_PIn;
        date now = now_us();
        date rel = 1s;
        hash<auto> h = {
            "a": 1,
        };
        hash<StatInfo> si();

        transient int skip = 1;

        Other o0();
        Other o1;
    }

    private {
        string str = "test";
    }

    private:internal {
        bool flag = False;
    }

    constructor() {
        o1 = o0;
    }

    int get() {
        return Base::get();
    }
}

class SerializableTest inherits QUnit::Test {
    constructor() : QUnit::Test("Serializable", "1.0") {
        addTestCase("SerializableTest", \serializableTest());
        set_return_value(main());
    }

    serializableTest() {
        {
            Err err();
            assertThrows("SERIALIZATION-ERROR", \err.serializeToData());
        }
        T t();
        hash<SerializationInfo> h = t.serializeToData();
        assertEq(2, h._index.size());
        assertEq(1, h._data.size());
        assertEq(Type::String, h._data._index.type());
        assertEq(1, h._index."1"._members.T.i);
        assertNothing(h._index."1"._members.T.skip);
        printf("%N\n", h);
    }
}
