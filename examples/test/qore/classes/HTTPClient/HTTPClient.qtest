#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires ../../../../../qlib/Util.qm
%requires ../../../../../qlib/Mime.qm
%requires ../../../../../qlib/QUnit.qm
%requires ../../../../../qlib/HttpServerUtil.qm
%requires ../../../../../qlib/HttpServer.qm

%exec-class Main

class HttpTestServer {
    public {
        int port;
        string body;

        hash hdr;

        SSLCertificate remote_cert;
    }

    private {
        Counter end(1);
        string resp;
    }

    constructor(string r) {
        resp = r;
        # start a fake server
        Socket s();
        if (s.bind(0, True))
            throw "BIND-ERROR", strerror();

        if (s.listen())
            throw "LISTEN-ERROR", strerror();

        port = s.getSocketInfo().port;

        background startListener(s);
    }

    done() {
        end.dec();
    }

    private startListener(Socket s) {
        Socket s1 = s.accept();
        hdr = s1.readHTTPHeader();
        if (hdr."content-length")
            body = s1.recv(hdr."content-length");
        else if (hdr."transfer-encoding" == "chunked")
            body = s1.readHTTPChunkedBody().body;
        s1.send(resp);
        end.waitForZero();
        s.close();
        s.shutdown();
    }

    string getBody() {
        return body;
    }

    hash getHeader() {
        return hdr;
    }
}

class TestStreamRequest inherits AbstractStreamRequest {
    private:internal {
        hash strhdr;
        string data;

        list l = ();
    }

    # setup the object and the headers for the response
    constructor(HttpListenerInterface listener, AbstractHttpRequestHandler handler, Socket s, hash cx, hash hdr, any body) : AbstractStreamRequest(listener, handler, s, cx, hdr, body) {
        strhdr."Content-Type" = hdr."content-type";
        if (hdr."transfer-encoding" == "chunked")
            strhdr."X-Was-Chunked" = "yes";
    }

    recvImpl(hash v) {
        if (v.data)
            data += v.data;
        else if (v.hdr)
            strhdr += v.hdr;
        l += v;
    }

    hash getResponseHeaderMessageImpl() {
        #printf("l: %N\n", l);
        return AbstractHttpRequestHandler::makeResponse(strhdr + ("X-Got-Chunks": l.size() - 1), 200, data ?? "OK");
    }
}

class TestDisconnectStreamRequest inherits AbstractStreamRequest {
    private:internal {
    }

    # setup the object and the headers for the response
    constructor(HttpListenerInterface listener, AbstractHttpRequestHandler handler, Socket s, hash cx, hash hdr, any body) : AbstractStreamRequest(listener, handler, s, cx, hdr, body) {
    }

    recvImpl(hash<auto> v) {
    }

    hash<auto> getResponseHeaderMessageImpl() {
        s.close();
        return {};
    }
}

class EchoHandler inherits AbstractHttpRequestHandler {
    public {
        static *SSLCertificate remote_cert;
    }

    private:internal {
    }

    # handle all requests as stream requests
    constructor() : AbstractHttpRequestHandler(NOTHING, True) {
    }

    # return the stream request handler
    AbstractStreamRequest getStreamRequestImpl(HttpListenerInterface listener, Socket s, hash cx, hash hdr, *data body) {
        remote_cert = s.getRemoteCertificate();
        if (hdr."x-test-disconnect") {
            return new TestDisconnectStreamRequest(listener, self, s, cx, hdr, body);
        }
        return new TestStreamRequest(listener, self, s, cx, hdr, body);
    }
}

class RealTestHttpServer inherits HttpServer {
    private:internal {
        EchoHandler eh();
        int port;
    }

    constructor(*string cert_path, *string key_path, *hash<HttpListenerOptionInfo> listener_opts) : HttpServer(\RealTestHttpServer::log(), \RealTestHttpServer::log()) {
        setDefaultHandler("echo-handler", eh);
        if (!listener_opts) {
            listener_opts = <HttpListenerOptionInfo>{};
        }
        if (cert_path) {
            listener_opts += http_get_ssl_objects(cert_path, key_path);
        }
        # bind on a random port
        listener_opts.service = 0;
        port = addListener(listener_opts).port;
    }

    int getPort() {
        return port;
    }

    static log(string fmt) {
        if (Main::verbose > 2) {
            vprintf("HTTP: " + fmt + "\n", argv);
        }
    }
}

class TestOutputStream inherits OutputStream {
    private:internal {
        list l = ();
        string str;
    }

    close() {
    }

    write(binary data) {
        string tstr = binary_to_string(data);
        l += tstr;
        str += tstr;
    }

    string getData() {
        return str;
    }

    list getList() {
        return l;
    }
}

class TestInputStream inherits InputStream {
    private:internal {
        list l;
    }

    constructor(list l) {
        self.l = l;
    }

    int peek() {
        return ord(l[0][0]);
    }

    *binary read(int limit) {
        if (!l)
            return;
        return binary(shift l);
    }
}

public class Main inherits QUnit::Test {
    public {
        static int verbose = 0;

        const Utf8Str = "HÃ¤t";
        const Iso88591Str = convert_encoding(Utf8Str, "iso-8859-1");

        const ErrorReply1 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Encoding: identity\r\nContent-Type: text/html\r\nDate: %s GMT\r\nContent-Length: 0\r\n\r\n",
                                    gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));
        const ErrorReply2 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Encoding: identity\r\nContent-Type: text/html\r\nDate: %s GMT\r\n\r\n",
                                    gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));
        const ChunkedReply1 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Encoding: identity\r\nContent-Type: text/plain\r\nTransfer-Encoding: chunked\r\nDate: %s GMT\r\n\r\n4\r\nTest\r\n5\r\n Mess\r\n4\r\nage.\r\n0\r\n\r\n",
                                      gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));
        const NormalReply1 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Type: text/plain\r\nContent-Length: 13\r\nDate: %s GMT\r\n\r\nTest Message.",
                                      gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));

        const ErrorReply3 = sprintf("HTTP/1.1 404 Not Found\r
Server: Qore-Test-Server/1.0\r
X-Powered-By: Qore/%s\r
Connection: Close\r
Content-Type: text/plain;charset=utf8\r
Content-Length: 20\r
\r
404 Not Found: Error",
            VersionString);

        const TestMessage = "Test Message.";
        const TestList = ("Test", " Mess", "age.");

        const TestCert = "-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDLa47sQHENJhycRfO20lgWdhSSNQKVUFsaHLtAo2N9j+xIlmIf
j8ZAH5gAPgjWpfqz4Sez/AqglNfixJqodo0i5KTUAvBKcAbh2+/t2+aKoBrvf7Yq
zC6Fbjdq0PmB1azVhn9RUsAn9YNNYiJ3yYT1FCF2yARxFcx87gsdo6diqQIDAQAB
AoGAXFNQBhhldzNSDveM2vBzPJaRVZ6rsntLLfnWX0sJD+cvte5TUMHfmCD+yzVc
q5efxt6tN3pwlFuZ9HmJPGa6PUnBoNLQRU3J6+6V9Nc2wJoS9phDzBCyNZJTWGHG
353qsQFlaAvvQHXeBa+rvQ1p4eS6PHYrYnyGZpFFYEGmTYECQQDsuAqRuyOn2xcr
mwLOnSlDVt2CokZXiMG+CohR/0Pd9t8GD0Y/AbMtXG2mRUvzGpYQZMgJtgvyrwpV
ytkxGBaZAkEA2/0vlIlUnpu/UujD7xcIsPMf8kO7qBp1HW1DiHoUVv/KPxOSQ9E3
BUnG8PHzHpcP32humrYLxKaz/44iZDMGkQJBALRZp5vOM2Uws9+CE0ptTMHETbG4
htUsGUf76E5oqEFVVCfevUtFtUiLEfNK+ol2KPzGe+2CKGo2WC5zBLS1wIkCQA2U
zfEvoUfBechWknIaS/EQsXI1eEpih8RvUHIGh2bvl77ZKHiDXBA5g8ywQ0AqN1Kl
kd5/Sq6zU/18+uaQt+ECQC71IwUFSnsvUDpvvcpL12yTpLBQAH38wJtrKRirE29s
GcOXOHjHj6wOr/fqQYEoXrNnewe18qYQd2c6HAHF2hQ=
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIICrzCCAhgCCQDaUHqCEBM1kDANBgkqhkiG9w0BAQUFADCBmzELMAkGA1UEBhMC
Q1oxDzANBgNVBAgTBlByYWd1ZTEPMA0GA1UEBxMGUHJhZ3VlMR8wHQYDVQQKExZR
b3JlIFRlY2hub2xvZ2llcywgc3JvMRYwFAYDVQQDEw1EYXZpZCBOaWNob2xzMTEw
LwYJKoZIhvcNAQkBFiJkYXZpZC5uaWNob2xzQHFvcmV0ZWNobm9sb2dpZXMuY29t
MB4XDTEwMDcxMDE0MDk0NVoXDTIwMDcwNzE0MDk0NVowgZsxCzAJBgNVBAYTAkNa
MQ8wDQYDVQQIEwZQcmFndWUxDzANBgNVBAcTBlByYWd1ZTEfMB0GA1UEChMWUW9y
ZSBUZWNobm9sb2dpZXMsIHNybzEWMBQGA1UEAxMNRGF2aWQgTmljaG9sczExMC8G
CSqGSIb3DQEJARYiZGF2aWQubmljaG9sc0Bxb3JldGVjaG5vbG9naWVzLmNvbTCB
nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAy2uO7EBxDSYcnEXzttJYFnYUkjUC
lVBbGhy7QKNjfY/sSJZiH4/GQB+YAD4I1qX6s+Ens/wKoJTX4sSaqHaNIuSk1ALw
SnAG4dvv7dvmiqAa73+2KswuhW43atD5gdWs1YZ/UVLAJ/WDTWIid8mE9RQhdsgE
cRXMfO4LHaOnYqkCAwEAATANBgkqhkiG9w0BAQUFAAOBgQBr21qq2lumlPmYOOcm
DsmBA/UtpeWckjlUUk+7yxuhSRY7yeM9MR+urXvYq26H/3QTJdjDt9tWzOJhNXfe
iOoM95849mZNSaYpIsF41wsZ5aQm1HhZmrKo1W8SvHhbQEOg8T+VWSUYdi8IL02k
+LT4OPQXYrab6IlJVnK5QXbZ3g==
-----END CERTIFICATE-----";
    }

    constructor() : Test("HttpClientTest", "1.0") {
        if (m_options.verbose) {
            verbose = m_options.verbose;
        }
        addTestCase("chunked disconnect test", \chunkedDisconnectTest());
        addTestCase("client certs", \clientCertTest());
        addTestCase("issue 3472", \issue3472());
        # disabled test as the external dependency is currently not working (2019-03-20)
        #addTestCase("issue 3053", \issue3053());
        addTestCase("HttpClient Test", \testClient());
        addTestCase("SSL read test", \sslReadTest());
        addTestCase("issue 2610", \issue2610());
        set_return_value(main());
    }

    chunkedDisconnectTest() {
        TempFile cert("cert.pem", TestCert);

        RealTestHttpServer serv(cert.getPath(), cert.getPath());
        on_exit delete serv;

        HTTPClient hc({
            "url": "https://localhost:" + serv.getPort(),
        });
        hash<auto> hdr = {
            "X-Test-Disconnect": "true",
            "Connection": "Keep-Alive",
        };
        # returns nothing - no chunked data sent
        code send_callback = auto sub () {};
        assertThrows("SOCKET-CLOSED", \hc.sendWithSendCallback(), (send_callback, "PUT", NOTHING, hdr, 5m));
        assertFalse(hc.isConnected());
    }

    clientCertTest() {
        TempFile cert("cert.pem", TestCert);
        string cert_data = ReadOnlyFile::readTextFile(cert.getPath());

        SSLCertificate x509_local(cert_data);
        binary sig_local = x509_local.getSignature();

        Queue q();
        {
            background sslReadClientCertTest(q, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, True);
            # wait for server to be listening and get port
            int port = q.get();

            HTTPClient hc({
                "url": "https://localhost:" + port,
                "ssl_cert_path": cert.getPath(),
                "ssl_key_path": cert.getPath(),
            });
            hc.send(NOTHING, "GET");
            SSLCertificate x509_remote = q.get();
            binary sig_remote = x509_remote.getSignature();
            #printf("%s <=> %s: %y\n", sig_local.toHex(), sig_remote.toHex(), sig_local <=> sig_remote);
            assertEq(sig_local, sig_remote);
        }
        {
            background sslReadClientCertTest(q, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, False);

            # wait for server to be listening and get port
            int port = q.get();

            HTTPClient hc({
                "url": "https://localhost:" + port,
                "ssl_cert_path": cert.getPath(),
                "ssl_key_path": cert.getPath(),
            });
            assertThrows("SOCKET-SSL-ERROR", \hc.send(), (NOTHING, "GET"));
            assertEq("SOCKET-SSL-ERROR", q.get().err);
        }
        {
            background sslReadClientCertTest(q, SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT, False);

            # wait for server to be listening and get port
            int port = q.get();

            HTTPClient hc({
                "url": "http://localhost:" + port,
                "ssl_cert_path": cert.getPath(),
                "ssl_key_path": cert.getPath(),
            });
            assertThrows("SOCKET-CLOSED", \hc.send(), (NOTHING, "GET"));
        }
        {
            RealTestHttpServer serv(cert.getPath(), cert.getPath(), <HttpListenerOptionInfo>{"get_remote_certs": True});
            on_exit delete serv;

            HTTPClient hc({
                "url": "https://localhost:" + serv.getPort(),
                "ssl_cert_path": cert.getPath(),
                "ssl_key_path": cert.getPath(),
            });
            hc.send("", "PUT", NOTHING, {"Connection": "close"});
            binary sig_remote = EchoHandler::remote_cert.getSignature();
            #printf("%s <=> %s: %y\n", sig_local.toHex(), sig_remote.toHex(), sig_local <=> sig_remote);
            assertEq(sig_local, sig_remote);

            hash<auto> info = serv.getListenerInfo("listener-0");
            assertEq(True, info.get_remote_certs);
            assertEq(True, info.ssl_accept_all_certs);
            assertEq(("SSL_VERIFY_PEER",), info.ssl_verify_flags);
        }
    }

    issue3472() {
        {
            HttpTestServer serv(ErrorReply3);
            on_exit serv.done();
            HTTPClient hc({"url": "http://localhost:" + serv.port, "error_passthru": True});
            hash<auto> info;
            hash<auto> resp = hc.send(NOTHING, "GET", "/", NOTHING, False, \info);
            assertEq(404, resp.status_code);
            assertEq("Close", resp.connection);
            assertEq("Close", info."response-headers-raw".Connection);
            assertEq("Close", info."response-headers".connection);
        }

        {
            HttpTestServer serv(ErrorReply3);
            on_exit serv.done();
            HTTPClient hc({"url": "http://localhost:" + serv.port, "error_passthru": True});
            hc.setErrorPassthru(False);
            assertThrows("HTTP-CLIENT-RECEIVE-ERROR", "404", \hc.send(), (NOTHING, "GET", "/"));
        }
    }

    issue3053() {
        HTTPClient httpclient({"url":"https://api.exchangeratesapi.io/latest"});
        hash<auto> h = httpclient.send("", "GET", "https://api.exchangeratesapi.io/latest");
        assertEq(200, h.status_code);
    }

    testClient() {
        {
            HttpTestServer serv(ErrorReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            hash info;
            *string str = hc.get("/something", NOTHING, \info);
            assertEq(serv.port, (info.headers.Host =~ x/:([0-9]+)/)[0].toInt());
            assertEq(NOTHING, str);
            hc.disconnect();
        }
        {
            HttpTestServer serv(ErrorReply2);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            *string str = hc.get("/something");
            assertEq(NOTHING, str);
            hc.disconnect();
        }
        {
            HttpTestServer serv(ChunkedReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            *string str = hc.get("/something");
            assertEq(TestMessage, str);
        }
        {
            HttpTestServer serv(ChunkedReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            *string str = hc.get("/something", ("Test-Header": "test1", "test-HEADER": "test2", "teST-HeAdEr": ("test3","test4")));
            assertEq(TestMessage, str);
            assertEq("test3,test4", serv.getHeader()."test-header");
        }

        {
            # test receiving a chunked HTTP message with an output stream
            HttpTestServer serv(ChunkedReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));

            list l = ();
            code rcb = sub (hash h) { l += h; };
            TestOutputStream strstr();
            hc.send(strstr, NOTHING, "GET", "/something", NOTHING, 5s, False, NOTHING, rcb);
            assertEq(TestMessage, strstr.getData());
            assertEq(2, l.size());
            list ml = strstr.getList();
            assertEq(3, ml.size());
            assertEq(TestList, ml);

            hash h = l[0];
            assertEq("1.1", h.hdr.http_version);
            assertEq(200, h.hdr.status_code);
            assertEq("OK", h.hdr.status_message);
            assertEq("Test/1.0", h.hdr.server);
            assertEq("text/plain", h.hdr."content-type");
            assertEq("chunked", h.hdr."transfer-encoding");
            assertEq("text/plain", h.hdr._qore_orig_content_type);
            assertEq(hc, h.obj);
            assertEq(False, h.send_aborted);

            h = l[1];
            assertEq(NOTHING, h.hdr);
            assertEq(hc, h.obj);
            assertEq(False, h.send_aborted);
        }

        {
            # test receiving a normal HTTP message with an output stream
            HttpTestServer serv(NormalReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));

            list l = ();
            code rcb = sub (hash h) { l += h; };
            TestOutputStream strstr();
            hc.send(strstr, NOTHING, "GET", "/something", NOTHING, 5s, False, NOTHING, rcb);
            assertEq(TestMessage, strstr.getData());
            assertEq(1, l.size());
            list ml = strstr.getList();
            assertEq(TestMessage, ml[0]);
            assertEq(1, ml.size());

            hash h = l[0];
            assertEq("1.1", h.hdr.http_version);
            assertEq(200, h.hdr.status_code);
            assertEq("OK", h.hdr.status_message);
            assertEq("Test/1.0", h.hdr.server);
            assertEq("text/plain", h.hdr."content-type");
            assertEq("text/plain", h.hdr._qore_orig_content_type);
            assertEq(hc, h.obj);
            assertEq(False, h.send_aborted);
        }

        {
            HTTPClient hc(("url": "http://localhost"));
            hash info;
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("http://localhost:80");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("https://localhost");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("https://localhost:443");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
        }

        {
            # issue 1728: check URL handling
            string bad_url = "http://localhost:1234\"";
            assertThrows("HTTP-CLIENT-URL-ERROR", sub () { HTTPClient hc(("url": bad_url)); });
        }

        {
            # issue 1813: check message body conversion
            HttpTestServer serv(ErrorReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            hc.setEncoding("iso-8859-1");
            hc.post("/something", Utf8Str, ("Content-Type": MimeTypeText));
            assertEq(Iso88591Str, serv.getBody());
        }

        {
            RealTestHttpServer hs();
            on_exit
                delete hs;

            HTTPClient hc(("url": "http://localhost:" + hs.getPort()));

            # send monolithic message and get back single message in a stream
            list l = ();
            code rcb = sub (hash h) { l += h; };
            TestOutputStream strstr();
            hc.send(strstr, TestMessage, "POST", "/something", {"Content-Type": MimeTypeText}, 5s, False, NOTHING, rcb);
            assertEq(TestMessage, strstr.getData());
            assertEq(1, l.size());
            list ml = strstr.getList();
            assertEq(1, ml.size());
            assertEq((TestMessage,), ml);

            hash h = l[0];
            assertEq("1.1", h.hdr.http_version);
            assertEq(200, h.hdr.status_code);
            assertEq("OK", h.hdr.status_message);
            assertEq(NOTHING, h.hdr."x-was-chunked");
            assertEq("1", h.hdr."x-got-chunks");
            assertEq("text/plain", h.hdr."content-type");
            assertEq("text/plain;charset=utf8", h.hdr._qore_orig_content_type);
            assertEq(hc, h.obj);
            assertEq(False, h.send_aborted);

            # send a streamed/chunked message and get back a single message in a stream
            TestInputStream is(TestList);
            strstr = new TestOutputStream();
            l = ();
            code tcb = *hash sub () {
                return ("X-Content-Done": "true");
            };
            hc.sendChunked(strstr, is, "POST", NOTHING, "/something",
                {
                    "Content-Type": MimeTypeText,
                    "Connection": "close"
                }, 5s, False, NOTHING, rcb, tcb);
            assertEq(TestMessage, strstr.getData());
            assertEq(1, l.size());
            ml = strstr.getList();
            assertEq(1, ml.size());
            assertEq((TestMessage,), ml);

            h = l[0];
            assertEq("1.1", h.hdr.http_version);
            assertEq(200, h.hdr.status_code);
            assertEq("OK", h.hdr.status_message);
            assertEq("yes", h.hdr."x-was-chunked");
            assertEq("3", h.hdr."x-got-chunks");
            assertEq("true", h.hdr."x-content-done");
            assertEq("text/plain", h.hdr."content-type");
            assertEq("text/plain;charset=utf8", h.hdr._qore_orig_content_type);
            assertEq(hc, h.obj);
            assertEq(False, h.send_aborted);

            hash<auto> info = hs.getListenerInfo("listener-0");
            assertEq(False, info.get_remote_certs);
            assertEq(True, info.ssl_accept_all_certs);
            assertEq(("SSL_VERIFY_NONE",), info.ssl_verify_flags);
        }

        {
            HTTPClient hc(("url": "http://localhost"));
            string rpath = get_random_string();
            hc.setConnectionPath(rpath);
            assertEq(rpath, hc.getConnectionPath());

            hc.setConnectionPath();
            assertNothing(hc.getConnectionPath());
        }
    }

    sslReadTest() {
        Queue q();
        background sslReadError(q);

        # wait for server to be listening and get port
        int port = q.get();

        HTTPClient hc(("url": "https://localhost:" + port));
        try {
            hc.get("/");
            fail();
        } catch (hash<ExceptionInfo> ex) {
            if ((ex.err == "SOCKET-CLOSED") ||
                (ex.err == "SOCKET-SSL-ERROR" && ex.desc =~ /reset by peer/))
            {
                assertTrue(True);
            } else {
                fail();
            }
        }

        # test is not reliable
        # issue 1488: currently only reproducible with the following URL
        #hc.setURL("https://group.three.com/qcbin/rest/is-authenticated");
        #hc.setTimeout(15s);
        #assertThrows("SOCKET-SSL-ERROR", "Connection reset", \hc.get(), ("", ("Host": "group.three.com:443")));
    }

    issue2610() {
        HTTPClient hc();
        # issue 2610: this causes a crash
        hc.setDefaultPath();
        assertNothing(hc.getDefaultPath());
    }

    sslReadError(Queue q) {
        Socket s();
        s.bind(0);
        s.listen();
        s.setCertificate(TestCert);
        s.setPrivateKey(TestCert);
        q.push(s.getSocketInfo().port);
        Socket ns = s.acceptSSL(15s);
        ns.bind(0);
    }

    sslReadClientCertTest(Queue q, int verify_mode, bool accept_all) {
        Socket s();
        s.setSslVerifyMode(verify_mode);
        if (accept_all) {
            s.acceptAllCertificates();
        }
        s.captureRemoteCertificates();
        s.bind(0);
        s.listen();
        s.setCertificate(TestCert);
        s.setPrivateKey(TestCert);
        q.push(s.getSocketInfo().port);
        try {
            Socket ns = s.acceptSSL(15s);
            q.push(ns.getRemoteCertificate());
            ns.send(NormalReply1);
        } catch (hash<ExceptionInfo> ex) {
            q.push(ex);
        }
    }
}

class TempFile {
    private {
        string path;
    }

    constructor(string name, data content) {
        path = sprintf("%s%s%s", tmp_location(), DirSep, name);
        File f();
        f.open2(path, O_CREAT | O_WRONLY | O_TRUNC);
        f.write(content);
    }

    destructor() {
        unlink(path);
    }

    string getPath() {
        return path;
    }
}