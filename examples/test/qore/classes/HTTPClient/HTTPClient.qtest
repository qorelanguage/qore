#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args

%requires ../../../../../qlib/Util.qm
%requires ../../../../../qlib/QUnit.qm

%exec-class Main

class HttpTestServer {
    public {
        int port;
    }

    private {
        Counter end(1);
        string resp;
    }

    constructor(string r) {
        resp = r;
        # start a fake server
        Socket s();
        if (s.bind(0, True))
            throw "BIND-ERROR", strerror();

        if (s.listen())
            throw "LISTEN-ERROR", strerror();

        port = s.getSocketInfo().port;

        background startListener(s);
    }

    done() {
        end.dec();
    }

    private startListener(Socket s) {
        Socket s1 = s.accept();
        s1.send(resp);
        end.waitForZero();
        s.close();
        s.shutdown();
    }
}


public class Main inherits QUnit::Test {
    public {
        const ErrorReply1 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Type: text/html\r\nDate: %s GMT\r\nContent-Length: 0\r\n\r\n",
                                    gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));
        const ErrorReply2 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Type: text/html\r\nDate: %s GMT\r\n\r\n",
                                    gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));
        const ChunkedReply1 = sprintf("HTTP/1.1 200 OK\r\nServer: Test/1.0\r\nContent-Type: text/plain\r\nTransfer-Encoding: chunked\r\nDate: %s GMT\r\n\r\n4\r\nTest\r\n5\r\n Mess\r\n4\r\nage.\r\n0\r\n\r\n",
                                      gmtime().format("Dy, DD Mon YYYY HH:mm:SS"));

        const TestCert = "-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDLa47sQHENJhycRfO20lgWdhSSNQKVUFsaHLtAo2N9j+xIlmIf
j8ZAH5gAPgjWpfqz4Sez/AqglNfixJqodo0i5KTUAvBKcAbh2+/t2+aKoBrvf7Yq
zC6Fbjdq0PmB1azVhn9RUsAn9YNNYiJ3yYT1FCF2yARxFcx87gsdo6diqQIDAQAB
AoGAXFNQBhhldzNSDveM2vBzPJaRVZ6rsntLLfnWX0sJD+cvte5TUMHfmCD+yzVc
q5efxt6tN3pwlFuZ9HmJPGa6PUnBoNLQRU3J6+6V9Nc2wJoS9phDzBCyNZJTWGHG
353qsQFlaAvvQHXeBa+rvQ1p4eS6PHYrYnyGZpFFYEGmTYECQQDsuAqRuyOn2xcr
mwLOnSlDVt2CokZXiMG+CohR/0Pd9t8GD0Y/AbMtXG2mRUvzGpYQZMgJtgvyrwpV
ytkxGBaZAkEA2/0vlIlUnpu/UujD7xcIsPMf8kO7qBp1HW1DiHoUVv/KPxOSQ9E3
BUnG8PHzHpcP32humrYLxKaz/44iZDMGkQJBALRZp5vOM2Uws9+CE0ptTMHETbG4
htUsGUf76E5oqEFVVCfevUtFtUiLEfNK+ol2KPzGe+2CKGo2WC5zBLS1wIkCQA2U
zfEvoUfBechWknIaS/EQsXI1eEpih8RvUHIGh2bvl77ZKHiDXBA5g8ywQ0AqN1Kl
kd5/Sq6zU/18+uaQt+ECQC71IwUFSnsvUDpvvcpL12yTpLBQAH38wJtrKRirE29s
GcOXOHjHj6wOr/fqQYEoXrNnewe18qYQd2c6HAHF2hQ=
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIICrzCCAhgCCQDaUHqCEBM1kDANBgkqhkiG9w0BAQUFADCBmzELMAkGA1UEBhMC
Q1oxDzANBgNVBAgTBlByYWd1ZTEPMA0GA1UEBxMGUHJhZ3VlMR8wHQYDVQQKExZR
b3JlIFRlY2hub2xvZ2llcywgc3JvMRYwFAYDVQQDEw1EYXZpZCBOaWNob2xzMTEw
LwYJKoZIhvcNAQkBFiJkYXZpZC5uaWNob2xzQHFvcmV0ZWNobm9sb2dpZXMuY29t
MB4XDTEwMDcxMDE0MDk0NVoXDTIwMDcwNzE0MDk0NVowgZsxCzAJBgNVBAYTAkNa
MQ8wDQYDVQQIEwZQcmFndWUxDzANBgNVBAcTBlByYWd1ZTEfMB0GA1UEChMWUW9y
ZSBUZWNobm9sb2dpZXMsIHNybzEWMBQGA1UEAxMNRGF2aWQgTmljaG9sczExMC8G
CSqGSIb3DQEJARYiZGF2aWQubmljaG9sc0Bxb3JldGVjaG5vbG9naWVzLmNvbTCB
nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAy2uO7EBxDSYcnEXzttJYFnYUkjUC
lVBbGhy7QKNjfY/sSJZiH4/GQB+YAD4I1qX6s+Ens/wKoJTX4sSaqHaNIuSk1ALw
SnAG4dvv7dvmiqAa73+2KswuhW43atD5gdWs1YZ/UVLAJ/WDTWIid8mE9RQhdsgE
cRXMfO4LHaOnYqkCAwEAATANBgkqhkiG9w0BAQUFAAOBgQBr21qq2lumlPmYOOcm
DsmBA/UtpeWckjlUUk+7yxuhSRY7yeM9MR+urXvYq26H/3QTJdjDt9tWzOJhNXfe
iOoM95849mZNSaYpIsF41wsZ5aQm1HhZmrKo1W8SvHhbQEOg8T+VWSUYdi8IL02k
+LT4OPQXYrab6IlJVnK5QXbZ3g==
-----END CERTIFICATE-----
    ";
    }

    constructor() : Test("HttpClientTest", "1.0") {
        addTestCase("HttpClient Test", \testClient());
        addTestCase("SSL read test", \sslReadTest());

        set_return_value(main());
    }

    testClient() {
        {
            HttpTestServer serv(ErrorReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            hash info;
            *string str = hc.get("/something", NOTHING, \info);
            assertEq(serv.port, (info.headers.Host =~ x/:([0-9]+)/)[0].toInt());
            assertEq(NOTHING, str);
            hc.disconnect();
        }
        {
            HttpTestServer serv(ErrorReply2);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            *string str = hc.get("/something");
            assertEq(NOTHING, str);
            hc.disconnect();
        }
        {
            HttpTestServer serv(ChunkedReply1);
            on_exit serv.done();
            HTTPClient hc(("url": "http://localhost:" + serv.port));
            *string str = hc.get("/something");
            assertEq("Test Message.", str);
        }
        {
            HTTPClient hc(("url": "http://localhost"));
            hash info;
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("http://localhost:80");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("https://localhost");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
            hc.setURL("https://localhost:443");
            try { hc.get("", NOTHING, \info); } catch () {}
            assertEq(Type::String, info.headers.Host.type());
            assertEq(True, info.headers.Host !~ /:/);
        }

        {
            # issue 1728: check URL handling
            string bad_url = "http://localhost:1234\"";
            assertThrows("HTTP-CLIENT-URL-ERROR", sub () { HTTPClient hc(("url": bad_url)); });
        }
    }

    sslReadTest() {
        Queue q();
        background sslReadError(q);

        # wait for server to be listening and get port
        int port = q.get();

        HTTPClient hc(("url": "https://localhost:" + port));
        assertThrows("SOCKET-CLOSED", \hc.get(), ("/"));

        # issue 1488: currently only reproducible with the following URL
        hc.setURL("https://group.three.com/qcbin/rest/is-authenticated");
        assertThrows("SOCKET-SSL-ERROR", "Connection reset", \hc.get(), ("", ("Host": "group.three.com:443")));
    }

    sslReadError(Queue q) {
        Socket s();
        s.bind(0);
        s.listen();
        s.setCertificate(TestCert);
        s.setPrivateKey(TestCert);
        q.push(s.getSocketInfo().port);
        Socket ns = s.acceptSSL(15s);
        ns.bind(0);
    }
}
