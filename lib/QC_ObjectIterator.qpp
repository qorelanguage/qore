/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashIterator.qpp HashIterator class definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2015 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/QoreObjectIterator.h"

extern QoreClass* QC_HASHITERATOR;

//! This class a basic iterator class for objects
/** Call ObjectIterator::next() to iterate through the object; do not use the iterator if ObjectIterator::next() returns @ref False.
    An object can be iterated in reverse order by calling ObjectIterator::prev() instead of ObjectIterator::next()

    @par Example: ObjectIterator basic usage
    @code{.py}
    class Class1 {
       public {
          int attr1;
          date attr2;
       }
       constructor() {
          attr1 = 1;
          attr2 = now();
       }
    }
    Class1 o();

    ObjectIterator it(o);
    while (it.next()) {
        printf("iter: %n\n", it.getValue());
    }

    iter: 1
    iter: 2013-04-17 16:27:28 Wed +02:00 (CEST)
    @endcode

    @note
    - In general, the ObjectIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.

    @see ObjectReverseIterator
 */
qclass ObjectIterator [arg=QoreObjectIterator* i; ns=Qore; vparent=HashIterator];

//! Creates the object iterator object
/** @param o the object to iterate

    @par Example:
    @code{.py}
ObjectIterator i(obj);
    @endcode
 */
ObjectIterator::constructor(object o) {
   self->setPrivate(CID_OBJECTITERATOR, new QoreObjectIterator(o));
}

//! Creates an empty object iterator object
/** @par Example:
    @code{.py}
*object obj = get_object_or_nothing();
ObjectIterator i(obj);
    @endcode
 */
ObjectIterator::constructor() {
   self->setPrivate(CID_OBJECTITERATOR, new QoreObjectIterator);
}

//! Creates a copy of the ObjectIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code{.py}
ObjectIterator ni = i.copy();
    @endcode
 */
ObjectIterator::copy() {
   self->setPrivate(CID_OBJECTITERATOR, new QoreObjectIterator(*i));
}
