/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_ListIterator.qpp ListIterator class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>
#include "qore/intern/QoreListIterator.h"

//! This class an iterator class for lists
/** Call ListIterator::next() to iterate through the list; do not use the iterator if ListIterator::next() returns @ref False.
    A list can be iterated in reverse order by calling ListIterator::prev() instead of ListIterator::next()

    @par Example: ListIterator basic usage
    @code{.py}
    list data = (1, "foo", 2);
    ListIterator it(data);
    while (it.next()) {
        printf("iter: %n\n", it.getValue());
    }

    iter: 1
    iter: "foo"
    iter: 2
    @endcode

    @note
    - In general, the ListIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.

    @see ListReverseIterator

 */
qclass ListIterator [arg=QoreListIterator* i; ns=Qore; vparent=AbstractQuantifiedBidirectionalIterator];

//! Creates the list iterator object
/** @param l the list to iterate

    @par Example:
    @code{.py}
ListIterator li(l);
    @endcode

    @note the constructor's argument is @ref softlist_type "softlist" so that it can also accept @ref nothing
 */
ListIterator::constructor(softlist l) {
   self->setPrivate(CID_LISTITERATOR, new QoreListIterator(l));
}

//! Creates a copy of the ListIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code{.py}
ListIterator ni = i.copy();
    @endcode
 */
ListIterator::copy() {
   self->setPrivate(CID_LISTITERATOR, new QoreListIterator(*i));
}

//! Moves the current position to the next element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.next()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListIterator::next() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! Moves the current position to the previous element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if the list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.prev()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListIterator::prev() {
   if (i->check(xsink))
      return false;
   return i->prev();
}

//! returns @ref True if the list is empty; @ref False if not
/** @return @ref True if the list is empty; @ref False if not

    @par Example:
    @code{.py}
if (i.empty())
    printf("the list is empty\n");
    @endcode
 */
bool ListIterator::empty() [flags=CONSTANT] {
   return i->empty();
}

//! returns @ref True if on the first element of the list
/** @return @ref True if on the first element of the list

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.first())
        printf("START:\n");
}
    @endcode
 */
bool ListIterator::first() [flags=CONSTANT] {
   return i->first();
}

//! returns @ref True if on the last element of the list
/** @return @ref True if on the last element of the list

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.last())
        printf("END.\n");
}
    @endcode
 */
bool ListIterator::last() [flags=CONSTANT] {
   return i->last();
}

//! returns the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code{.py}
while (i.next()) {
    printf("+ %y\n", i.getValue());
}
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
auto ListIterator::getValue() [flags=RET_VALUE_ONLY] {
    if (i->check(xsink))
        return QoreValue();
    return i->getReferencedValue(xsink);
}

//! returns the current iterator position in the list or -1 if not pointing at a valid element
/** @return the current iterator position in the list or -1 if not pointing at a valid element

    @par Example:
    @code{.py}
while (i.next()) {
    printf("+ %d/%d: %y\n", i.index(), i.max(), i.getValue());
}
    @endcode
 */
int ListIterator::index() [flags=CONSTANT] {
   return i->index();
}

//! returns the number of elements in the list
/** @return the number of elements in the list

    @par Example:
    @code{.py}
while (i.next()) {
    printf("+ %d/%d: %y\n", i.index(), i.max(), i.getValue());
}
    @endcode
 */
int ListIterator::max() [flags=CONSTANT] {
   return i->max();
}

//! sets the new position in the list; if the position is invalid then the method returns @ref False, meaning the iterator is not valid, otherwise it returns @ref True
/** @param pos the new position for the iterator with 0 as the first element

    @return @ref False, meaning the iterator is not valid, otherwise it returns @ref True

    @par Example:
    @code{.py}
if (!i.set(pos))
    throw "INVALID-POSITION", sprintf("%d is an invalid position", pos);
    @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListIterator::set(int pos) {
   if (i->check(xsink))
      return QoreValue();
   return !i->set(pos);
}

//! returns @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the iterator is currently pointing at a valid element, @ref Qore::False "False" if not

    @par Example:
    @code{.py}
if (i.valid())
    printf("current value: %y\n", i.getValue());
    @endcode
 */
bool ListIterator::valid() [flags=CONSTANT] {
   return i->valid();
}

//! Reset the iterator instance to its initial state
/** Reset the iterator instance to its initial state

   @par Example
   @code{.py}
i.reset();
   @endcode

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
ListIterator::reset() {
   if (i->check(xsink))
       return QoreValue();
   i->reset();
}
