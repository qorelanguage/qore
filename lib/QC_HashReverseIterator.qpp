/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashReverseIterator.qpp HashReverseIterator class definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2015 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/QoreHashIterator.h"

extern QoreClass* QC_HASHITERATOR;

//! This class an iterator class for hashes
/** Call HashReverseIterator::next() to iterate through the hash in reverse order; do not use the iterator if HashReverseIterator::next() returns @ref False.
    A hash can be iterated in reverse order by calling HashReverseIterator::prev() instead of HashReverseIterator::next()

    @par Example: HashReverseIterator basic usage
    @code{.py}
    hash h = ( "key1" : 1, "key2" : 2, );

    HashReverseIterator it(h);
    while (it.next()) {
        printf("getKey: %n; getKeyValue: %n; getValue: %n; getValuePair: %n\n",
               it.getKey(), it.getKeyValue(), it.getValue(), it.getValuePair());
    }

    getKey: "key2"; getKeyValue: 2; getValue: 2; getValuePair: hash: (key : "key2", value : 2)
    getKey: "key1"; getKeyValue: 1; getValue: 1; getValuePair: hash: (key : "key1", value : 1)
    @endcode

    @note
    - In general, the HashReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - HashReverseIterator is functionally equivalent to HashIterator, but the effect of HashReverseIterator::next() and HashReverseIterator::prev()
      are the opposite of HashIterator::next() and HashIterator::prev(); that is HashReverseIterator::next() will
      iterate through the hash in reverse order, while HashReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for HashReverseIterator::first() and HashReverseIterator::last()
      are swapped in respect to HashIterator::first() and HashIterator::last().

    @see HashIterator
 */
qclass HashReverseIterator [arg=QoreHashReverseIterator* i; ns=Qore; vparent=HashIterator];

//! Creates the hash iterator object
/** @param h the hash to iterate

    @par Example:
    @code{.py}
HashReverseIterator hi(h);
    @endcode
 */
HashReverseIterator::constructor(hash h) {
   self->setPrivate(CID_HASHREVERSEITERATOR, new QoreHashReverseIterator(h));
}

//! Creates an empty iterator object
/** @par Example:
    @code{.py}
*hash h = get_hash_or_nothing();
HashReverseIterator hi(h);
    @endcode
 */
HashReverseIterator::constructor() {
   self->setPrivate(CID_HASHREVERSEITERATOR, new QoreHashReverseIterator);
}

//! Creates a copy of the HashReverseIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code{.py}
HashReverseIterator ni = i.copy();
    @endcode
 */
HashReverseIterator::copy() {
   self->setPrivate(CID_HASHREVERSEITERATOR, new QoreHashReverseIterator(*i));
}

//! Moves the current position to the previous element in the hash; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the hash if the hash is not empty
/** This method will return @ref True again after it returns @ref False once if the hash is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the hash (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.prev()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @note HashReverseIterator::next() is the opposite of HashIterator::next(); it is functionally equivalent to HashIterator::prev();
    HashReverseIterator::next() iterates through the hash in reverse order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool HashReverseIterator::next() {
   if (i->check(xsink))
      return false;
   return i->prev();
}

//! Moves the current position to the next element in the hash; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the hash if the hash is not empty
/** This method will return @ref True again after it returns @ref False once if hash is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the hash (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.next()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @note HashReverseIterator::prev() is the opposite of HashIterator::prev(); it is functionally equivalent to HashIterator::next();
    HashReverseIterator::prev() iterates through the hash in forward order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool HashReverseIterator::prev() {
   if (i->check(xsink))
      return false;
   return i->next();
}

//! returns @ref True if on the last element of the hash
/** @return @ref True if on the last element of the hash

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.first())
        printf("START:\n");
}
    @endcode
 */
bool HashReverseIterator::first() [flags=CONSTANT] {
   return i->last();
}

//! returns @ref True if on the first element of the hash
/** @return @ref True if on the first element of the hash

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.last())
        printf("END.\n");
}
    @endcode
 */
bool HashReverseIterator::last() [flags=CONSTANT] {
   return i->first();
}
