/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_AbstractDatasource.qpp AbstractDatasource class (interface) definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2019 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>

class AbstractDatasource {};

DLLLOCAL extern QoreClass* QC_ABSTRACTSQLSTATEMENT;

//! This class defines an abstract interface for database access, inherited by both the Datasource and DatasourcePool classes
/**
 */
qclass AbstractDatasource [dom=DATABASE; arg=AbstractDatasource* ds; ns=Qore::SQL];

//! Commits the current transaction and releases any thread resources associated with the transaction
/**
    @par Example:
    @code{.py}
db.commit();
    @endcode
 */
abstract nothing AbstractDatasource::commit();

//! Rolls the current transaction back and releases any thread resources associated with the transaction
/**
    @par Example:
    @code{.py}
db.rollback();
    @endcode
 */
abstract nothing AbstractDatasource::rollback();

//! Executes an %SQL command on the server and returns either the integer row count (for example, for updates, inserts, and deletes) or the data retrieved (for example, if a stored procedure is executed that returns values)
/** @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code{.py}
int rows = db.exec("insert into table (varchar_col, timestamp_col, blob_col, numeric_col) values (%v, %v, %v, %d)", string, now(), binary, 100);
    @endcode
 */
abstract auto AbstractDatasource::exec(string sql, ...);

//! Executes an %SQL command on the server and returns either the integer row count (for example, for updates, inserts, and deletes) or the data retrieved (for example, if a stored procedure is executed that returns values), taking a list for all bind arguments
/** Same as AbstractDatasource::exec() except takes an explicit list for bind arguments

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code{.py}
int rows = db.vexec("insert into example_table value (%v, %v, %v)", arg_list);
    @endcode
 */
abstract auto AbstractDatasource::vexec(string sql, *softlist<auto> vargs);

//! Executes an %SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values)
/** This method does not do any variable binding, so it's useful for example for DDL statements etc

    @par Warning:
    Using this method to execute pure dynamic %SQL many times with different %SQL strings (as opposed to using the same string and binding by value instead of dynamic %SQL) can affect application performance by prohibiting the efficient usage of the DB server's statement cache. See DB server documentation for variable binding and the %SQL statement cache for more information.

    @param sql The %SQL command to execute on the server; this string will not be subjected to any transformations for variable binding

    @return The return value depends on the DBI driver; normally, for commands with placeholders, a hash is returned holding the values acquired from executing the %SQL statement. For all other commands, normally an integer row count is returned. However, some DBI drivers also allow select statements to be executed through this interface, which would also return a hash (column names) of lists (values for each column).

    @par Example:
    @code{.py}
db.execRaw("create table my_tab (id number, some_text varchar2(30))");
    @endcode
 */
abstract auto AbstractDatasource::execRaw(string sql);

//! Executes an %SQL select statement on the server and (normally) returns the result as a hash (column names) of lists (column values per row)
/** The usual return format of this method is suitable for use with @ref context "context statements", for easy iteration and processing of query results.
    Alternatively, the HashListIterator class can be used to iterate the return value of this method.

    Additionally, this format is a more efficient format than that returned by the AbstractDatasource::selectRows() method, because the column names are not repeated for each row returned. Therefore, for retrieving anything greater than small amounts of data, it is recommended to use this method instead of AbstractDatasource::selectRows().

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method returns a hash (the keys are the column names) of lists (the column data per row) when executed with an %SQL select statement, however some DBI drivers allow any %SQL to be executed through this method, in which case other data types can be returned (such as an integer for a row count or a hash for output parameters when executing a stored procedure).  If no rows are found, a hash of column names assigned to empty lists is returned.

    @par Example:
    @code{.py}
# bind a string and a date/time value by value in a query
hash<auto> query = db.select("select * from table where varchar_column = %v and timestamp_column > %v", string, 2007-10-11T15:31:26.289);
if (query.firstValue())
    printf("got results\n");
    @endcode

    @note This method returns all the data available immediately; to process query data piecewise, use the SQLStatement class
 */
abstract auto AbstractDatasource::select(string sql, ...);

//! Executes an %SQL select statement on the server and returns the first row as a hash (the column values)
/** If more than one row is returned, then it is treated as an error and a \c DBI-SELECT-ROW-ERROR is returned (however the DBI driver should raise its own exception here to avoid retrieving more than one row from the server). For a similar method taking a list for all bind arguments, see AbstractDatasource::vselectRow().

    This method also accepts all bind parameters (<tt>%%d</tt>, <tt>%%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method normally returns a hash (the keys are the column names) of row data or @ref nothing if no row is found for the query when executed with an %SQL select statement, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code{.py}
*list<auto> h = db.selectRow("select * from example_table where id = 1");
    @endcode

    @throw DBI-SELECT-ROW-ERROR more than 1 row retrieved from the server
 */
abstract auto AbstractDatasource::selectRow(string sql, ...);

//! Executes an %SQL select statement on the server and returns the result as a list (rows) of hashes (the column values)
/** The return format of this method is not as memory efficient as that returned by the AbstractDatasource::select() method, therefore for larger amounts of data, it is recommended to use AbstractDatasource::select().
    The usual return value of this method can be iterated with the ListHashIterator class.

    This method also accepts all bind parameters (<tt>%%d</tt>, <tt>%%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute on the server
    @param ... Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a list (rows) of hash (where the keys are the column names of each row) or @ref nothing if no rows are found for the query, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code{.py}
*list<auto> list = db.selectRows("select * from example_table");
    @endcode

    @see AbstractDatasource::select()

    @note This method returns all the data available immediately; to process query data piecewise, use the SQLStatement class
 */
abstract auto AbstractDatasource::selectRows(string sql, ...);

//! Executes a select statement on the server and returns the results in a hash (column names) of lists (column values per row), taking a list for all bind arguments
/** The usual return format of this method is suitable for use with @ref context "context statements", for easy iteration and processing of query results.
    Alternatively, the HashListIterator class can be used to iterate the return value of this method.

    This method also accepts all bind parameters (<tt>%%d</tt>, <tt>%%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a hash (the keys are the column names) of list (each hash key's value is a list giving the row data), however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned.  If no rows are found, a hash of column names assigned to empty lists is returned.

    @par Example:
    @code{.py}
hash<auto> query = db.vselect("select * from example_table where id = %v and name = %v", arg_list);
if (query.firstValue())
    printf("got results\n");
    @endcode

    @see AbstractDatasource::select()

    @note This method returns all the data available immediately; to process query data piecewise, use the SQLStatement class
 */
abstract auto AbstractDatasource::vselect(string sql, *softlist<auto> vargs);

//! Executes a select statement on the server and returns the first row as a hash (column names and values), taking a list for all bind arguments
/** This method is the same as the AbstractDatasource::selectRow() method, except this method takes a single argument after the %SQL command giving the list of bind value parameters

    This method also accepts all bind parameters (<tt>%%d</tt>, <tt>%%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute on the server
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return This method normally returns a hash (the keys are the column names) of row data or @ref nothing if no row is found for the query when executed with an %SQL select statement, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code{.py}
*hash<auto> h = db.vselectRow("select * from example_table where id = %v and type = %v", arg_list);
    @endcode

    @see AbstractDatasource::selectRow()
 */
abstract auto AbstractDatasource::vselectRow(string sql, *softlist<auto> vargs);

//! Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values), taking a list for all bind arguments
/** Same as the AbstractDatasource::selectRows() method, except this method takes a single argument after the %SQL command giving the list of bind value parameters.

    The usual return value of this method can be iterated with the ListHashIterator class.

    The return format of this method is not as memory efficient as that returned by the AbstractDatasource::select() method, therefore for larger amounts of data, it is recommended to use AbstractDatasource::select().

    This method also accepts all bind parameters (<tt>%%d</tt>, <tt>%%v</tt>, etc) as documented in @ref sql_binding "Binding by Value and Placeholder"

    To execute select statements that begin a transaction (such as \c "select for update"), execute AbstractDatasource::beginTransaction() first to signal that a transaction is starting;
    this is particularly important when the object is shared among more than one thread.

    @param sql The %SQL command to execute
    @param vargs Include any values to be bound (using <tt>%v</tt> in the command string) or placeholder specifications (using <tt>:</tt><em>key_name</em> in the command string) in order after the command string

    @return Normally returns a list (rows) of hash (where the keys are the column names of each row) or @ref nothing if no rows are found for the query, however some DBI drivers allow any %SQL statement to be executed through this method (not only select statements), in this case other data types can be returned

    @par Example:
    @code{.py}
*list<auto> list = db.vselectRows("select * from example_table where id = %v and type = %v", arg_list);
    @endcode

    @see AbstractDatasource::selectRows()

    @note This method returns all the data available immediately; to process query data piecewise, use the SQLStatement class
 */
abstract auto AbstractDatasource::vselectRows(string sql, *softlist<auto> vargs);

//! Manually signals the start of transaction management on the AbstractDatasource
/** This method should be called when the AbstractDatasource object will be shared between more than 1 thread, and a transaction will be started with a AbstractDatasource::select() method or the like.

    This method does not make any communication with the server to start a transaction; it only allocates the transaction lock to the current thread in %Qore.

    @par Example:
    @code{.py}
db.beginTransaction();
    @endcode
 */
abstract nothing AbstractDatasource::beginTransaction();

//! Returns the username parameter as a string or @ref nothing if none is set
/** @return the username parameter as a string or @ref nothing if none is set

    @par Example:
    @code{.py}
*string user = db.getUserName();
    @endcode
 */
abstract *string AbstractDatasource::getUserName();

//! Returns the password parameter as a string or @ref nothing if none is set
/** @return the password parameter as a string or @ref nothing if none is set

    @par Example:
    @code{.py}
*string pass = db.getPassword();
    @endcode
 */
abstract *string AbstractDatasource::getPassword();

//! Returns the database name parameter as a string or @ref nothing if none is set
/** @return the database name parameter as a string or @ref nothing if none is set

    @par Example:
    @code{.py}
*string db = db.getDBName();
    @endcode
 */
abstract *string AbstractDatasource::getDBName();

//! Retrieves the database-specific charset set encoding for the object
/** @return the database-specific charset set encoding for the object

    @par Example:
    @code{.py}
string enc = db.getDBEncoding();
    @endcode

    @see AbstractDatasource::getOSEncoding();
 */
abstract string AbstractDatasource::getDBEncoding();

//! Returns the %Qore character encoding name for the object as a string or @ref nothing if none is set
/** @return the %Qore character encoding name for the object as a string or @ref nothing if none is set

    @par Example:
    @code{.py}
*string enc = db.getOSEncoding();
    @endcode
 */
abstract *string AbstractDatasource::getOSEncoding();

//! Returns the hostname parameter as a string or @ref nothing if none is set
/** @return the hostname parameter as a string or @ref nothing if none is set

    @par Example:
    @code{.py}
*string host = db.getHostName();
    @endcode
 */
abstract *string AbstractDatasource::getHostName();

//! Gets the port number that will be used for the next connection to the server
/** Invalid port numbers will cause an exception to be thrown when the connection is opened

    @par Example:
    @code{.py}
*int port = db.getPort();
    @endcode
 */
abstract *int AbstractDatasource::getPort();

//! Returns the name of the driver used for the object
/** @return the name of the driver used for the object

    @par Example:
    @code{.py}
string driver = db.getDriverName();
    @endcode
 */
abstract string AbstractDatasource::getDriverName();

//! Returns the driver-specific server version data for the current connection
/** @return the driver-specific server version data for the current connection

    @par Example:
    @code{.py}
auto ver = db.getServerVersion();
    @endcode

    @note see the documentation for the DBI driver being used for additional possible exceptions
 */
abstract auto AbstractDatasource::getServerVersion();

//! Retrieves the driver-specific client library version information
/** @return the driver-specific client library version information

    @par Example:
    @code{.py}
auto ver = db.getClientVersion();
    @endcode

    @note see the documentation for the DBI driver being used for possible exceptions
 */
abstract auto AbstractDatasource::getClientVersion();

//! Returns @ref True if a transaction is currently in progress
/** @return @ref True if a transaction is currently in progress

    @par Example:
    @code{.py}
bool b = db.inTransaction();
    @endcode
 */
abstract bool AbstractDatasource::inTransaction();

//! Returns a @ref datasource_hash "datasource hash" describing the configuration of the current object
/** @par Example:
    @code{.py}
hash<auto> h = ds.getConfigHash();
    @endcode

    @return a @ref datasource_hash "datasource hash" describing the configuration of the current object

    @since %Qore 0.8.8
 */
abstract hash<auto> AbstractDatasource::getConfigHash();

//! Returns a string giving the configuration of the current object in a format that can be parsed by parse_datasource()
/** @par Example:
    @code{.py}
string str = ds.getConfigString();
    @endcode

    @return a string giving the configuration of the current object in a format that can be parsed by parse_datasource()

    @since %Qore 0.8.8
 */
abstract string AbstractDatasource::getConfigString();

//! Should return @ref True "True" if the current thread is in a transaction with this object, must be re-implemented in subclasses to provide the desired functionality
/** @note
    - this is reimplemented as @ref Qore::SQL::Datasource::currentThreadInTransaction() "Datasource::currentThreadInTransaction()" and @ref Qore::SQL::DatasourcePool::currentThreadInTransaction() "DatasourcePool::currentThreadInTransaction()"
    - this method was added as a non-abstract method in Qore 0.8.10 to avoid breaking existing subclasses of AbstractDatasource

    @since Qore 0.8.10
 */
bool AbstractDatasource::currentThreadInTransaction() {
   xsink->raiseException("ABSTRACT-DATASOURCE-ERROR", "This method must be re-implemented in subclasses to provide the desired functionality; it is implemented in Datasource and DatasourcePool for example");
   return false;
}

//! Returns an @ref Qore::SQL::AbstractSQLStatement "AbstractSQLStatement" object based on the current database connection object
/** @note
    - this is reimplemented as @ref Qore::SQL::Datasource::getSQLStatement() "Datasource::getSQLStatement()" and @ref Qore::SQL::DatasourcePool::getSQLStatement() "DatasourcePool::getSQLStatement()"
    - this method was added as a non-abstract method in Qore 0.9.0 to avoid breaking existing subclasses of AbstractDatasource

    @since Qore 0.9.0
*/
AbstractSQLStatement AbstractDatasource::getSQLStatement() {
    xsink->raiseException("ABSTRACT-DATASOURCE-ERROR", "This method must be re-implemented in subclasses to provide the desired functionality; it is implemented in Datasource and DatasourcePool for example");
    return QoreValue();
}
