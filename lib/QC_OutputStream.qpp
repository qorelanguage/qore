/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_OutputStream.qpp OutputStream class (interface) definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/OutputStreamWrapper.h"

//! This class defines an abstract interface for output streams
/** Classes inheriting this class can be used to write bytes to files, sockets, memory etc.

    @see @ref Qore::StreamWriter "StreamWriter" for a class that can be used to write various kinds of data to an @ref Qore::OutputStream "OutputStream"

    @note stream classes are not designed to be accessed from multiple threads; they have been implemented without
    locking for fast and efficient use when used from a single thread.  For methods that would be unsafe to use in
    another thread, any use of such methods in threads other than the thread where the constructor was called will
    cause a \c STREAM-THREAD-ERROR to be thrown, unless the stream is handed
    off to another thread using the @ref Qore::StreamBase::unassignThread() "StreamBase::unassignThread()"
    method in the thread that currently owns the stream, and the
    @ref Qore::StreamBase::reassignThread() "StreamBase::reassignThread()" method in the new thread.

    @since %Qore 0.8.13
 */
qclass OutputStream [arg=OutputStream* os; ns=Qore; vparent=StreamBase];

//! Constructor
/** Used by subclasses defined in the Qore programming language.
 */
OutputStream::constructor() {
   self->setPrivate(CID_OUTPUTSTREAM, new OutputStreamWrapper(self));
}

//! Flushes any buffered (unwritten) bytes, closes the output stream and releases all resources.
/** Any methods called on a closed output stream will throw an exception.
 */
abstract nothing OutputStream::close();

//! Writes bytes to the output stream
/**
    @param data the data to write

    @par Example:
    @code{.py}
    os.write(<0405>);
    @endcode
 */
abstract nothing OutputStream::write(binary data);
