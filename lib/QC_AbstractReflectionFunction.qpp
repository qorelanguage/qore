/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_AbstractReflectionFunction.qpp Function class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include "qore/Qore.h"
#include "qore/intern/QoreClassIntern.h"
#include "qore/intern/QC_AbstractReflectionFunction.h"
#include "qore/intern/QC_AbstractMethod.h"
#include "qore/intern/QC_AbstractVariant.h"
#include "qore/intern/QC_NormalMethodVariant.h"
#include "qore/intern/QC_StaticMethodVariant.h"
#include "qore/intern/QC_ConstructorMethodVariant.h"
#include "qore/intern/QC_DestructorMethodVariant.h"
#include "qore/intern/QC_CopyMethodVariant.h"
#include "qore/intern/QC_FunctionVariant.h"
#include "qore/intern/QC_Class.h"
#include "qore/intern/QC_Type.h"
#include "qore/intern/QC_Function.h"
#include "qore/intern/qore_program_private.h"

QoreObject* QoreReflectionFunction::getFunctionObject(ExceptionSink* xsink) const {
    const QoreClass* c = f->getClass();
    if (c) {
        // must find the QoreMethod corresponding to this function by searching the class by name by method type
        const MethodFunctionBase* mfb = static_cast<const MethodFunctionBase*>(f);
        const qore_class_private* qc = qore_class_private::get(*c);
        const QoreMethod* m = mfb->isStatic()
            ? qc->findLocalCommittedStaticMethod(f->getName())
            : qc->findLocalCommittedMethod(f->getName());
        ReferenceHolder<QoreReflectionMethod> meth(new QoreReflectionMethod(pgm, m), xsink);
        return get_method_object(meth, xsink);
    }
    return new QoreObject(QC_FUNCTION, pgm, new QoreReflectionFunction(pgm, f));
}

QoreObject* find_function_variant(QoreProgram* pgm, const QoreFunction* func, const QoreListNode* args, size_t offset, bool exact, method_type_e mtype, ExceptionSink* xsink) {
    // create argument list
    type_vec_t type_vec;

    for (size_t i = offset; i < (args ? args->size() : 0); ++i) {
        const QoreValue v = args->retrieveEntry(i);
        if (v.getType() != NT_OBJECT) {
            xsink->raiseException("GETVARIANT-ERROR", "expecting a Type argument describing the parameter type; got type '%s' instead", v.getTypeName());
            return nullptr;
        }

        ReferenceHolder<QoreType> t(static_cast<QoreType*>(v.get<const QoreObject>()->tryGetReferencedPrivateData(CID_TYPE, xsink)), xsink);
        if (!t) {
            if (!*xsink) {
                xsink->raiseException("GETVARIANT-ERROR", "expecting a Type argument describing the parameter type; got object of class '%s' instead", v.get<const QoreObject>()->getClassName());
            }
            return nullptr;
        }
        type_vec.push_back(t->typeInfo);
    }

    const QoreClass* cls = mtype != MT_None ? func->getClass() : nullptr;
    const qore_class_private* qc = cls ? qore_class_private::get(*cls) : nullptr;
    const AbstractQoreFunctionVariant* v = exact
        ? func->runtimeFindExactVariant(xsink, type_vec, qc)
        : func->parseFindVariant(nullptr, type_vec, qc, xsink);

    if (*xsink) {
        return nullptr;
    }

    return get_variant_object(pgm, func, mtype, v, xsink);
}

QoreObject* get_variant_object(QoreProgram* pgm, const QoreFunction* f, method_type_e mtype, const AbstractQoreFunctionVariant* v, ExceptionSink* xsink) {
    switch (mtype) {
        case MT_None:
            return new QoreObject(QC_FUNCTIONVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        case MT_Static:
            return new QoreObject(QC_STATICMETHODVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        case MT_Normal:
            return new QoreObject(QC_NORMALMETHODVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        case MT_Constructor:
            return new QoreObject(QC_CONSTRUCTORMETHODVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        case MT_Destructor:
            return new QoreObject(QC_DESTRUCTORMETHODVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        case MT_Copy:
            return new QoreObject(QC_COPYMETHODVARIANT, pgm, new QoreReflectionVariant(pgm, f, v));
        default:
            break;
    }

    assert(false);
    return nullptr;
}

void append_variant_objects(QoreListNode& l, QoreProgram* pgm, const QoreFunction* f, method_type_e mtype, ExceptionSink* xsink) {
    QoreFunctionIterator i(*f);
    while (i.next()) {
        l.push(get_variant_object(pgm, f, mtype, i.getVariant(), xsink), xsink);
    }
}

//! The abstract base class for %Qore functions and class methods
/**
    This class cannot be instantiated directly and also cannot be directly inherited by user-defined classes.

    @since %Qore 0.9.0
 */
qclass AbstractReflectionFunction [ns=Qore::Reflection; arg=QoreReflectionFunction* f];

//! Throws an exception if called directly; this class can only be instantiated by builtin subclasses
/** @throw ABSTRACTREFLECTIONFUNCTION-CONSTRUCTOR-ERROR this exception is thrown if this class is constructed directly (also if directly inherited by user classes)
 */
AbstractReflectionFunction::constructor() {
   xsink->raiseException("ABSTRACTREFLECTIONFUNCTION-CONSTRUCTOR-ERROR", "this class is an abstract class and cannot be constructed directly or inherited directly by a user-defined class");
}

//! Returns @ref True if the function or method object passed as an argument is equal to the current object; @ref False if not
/** @par Example:
    @code{.py}
bool b = f1.isEqual(f2);
    @endcode

    @param func the function or method object to check with the current object for equality

    @return @ref True if the object passed as an argument is equal to the current object; @ref False if not

    @note if this method is called on user functions or methods created from the same source code but in different
    @ref Qore::Program "Program" containers, it will return @ref False
*/
bool AbstractReflectionFunction::isEqual(AbstractReflectionFunction[QoreReflectionFunction] func) [flags=CONSTANT] {
    ReferenceHolder<QoreReflectionFunction> holder(func, xsink);

    return f->f == func->f;
}

//! returns the function or method name
/** @par Example:
    @code{.py}
string name = f.getName();
    @endcode

    @return the function or method name

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the function or method has been destroyed
 */
string AbstractReflectionFunction::getName() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, f->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the function ptr must be valid
    return new QoreStringNode(f->f->getName());
}

//! returns @ref True if the function or method is a builtin function or method
/** @par Example:
    @code{.py}
bool b = f.isBuiltin();
    @endcode

    @return @ref True if the function or method is a builtin function or method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the function or method has been destroyed

    @note complementary to @ref isUser()
*/
bool AbstractReflectionFunction::isBuiltin() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, f->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the function ptr must be valid
    return f->f->hasBuiltin();
}

//! returns @ref True if the function or method is a user function or method
/** @par Example:
    @code{.py}
bool b = f.isUser();
    @endcode

    @return @ref True if the function or method is a user function or method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the function or method has been destroyed

    @note complementary to @ref isBuiltin()
*/
bool AbstractReflectionFunction::isUser() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, f->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the function ptr must be valid
    return f->f->hasUser();
}

//! returns @ref True if the function or method has been injected as a dependency injection
/** @par Example:
    @code{.py}
bool b = f.isInjected();
    @endcode

    @return @ref True if the function or method has been injected as a dependency injection

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the function or method has been destroyed
*/
bool AbstractReflectionFunction::isInjected() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, f->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the function ptr must be valid
    return f->f->injected();
}

//! returns the number of variants implemented by the function or method
/** @par Example:
    @code{.py}
int n = f.numVariants();
    @endcode

    @return the number of variants implemented by the function or method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the function or method has been destroyed
*/
int AbstractReflectionFunction::numVariants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, f->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the function ptr must be valid
    return f->f->numVariants();
}
