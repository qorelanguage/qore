/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_StderrOutputStream.qpp StderrOutputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/StderrOutputStream.h"

//! This class implements the @ref OutputStream interface for writing bytes to the standard output stream \c stderr.
/** @par Example: StderrOutputStream basic usage
    @code{.py}
    StderrOutputStream seos();
    seos.write(<01>);
    seos.write(<0203>);
    # three bytes have been written to stderr: 01 02 03
    @endcode

    @note stream classes are not designed to be accessed from multiple threads; they have been implemented without locking for fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c STREAM-THREAD-ERROR to be thrown.
    @note This class is not available with the @ref PO_NO_TERMINAL_IO parse option

    @see @ref Qore::StreamWriter "StreamWriter" for a class that can be used to write various kinds of data to an @ref Qore::OutputStream "OutputStream"

    @since %Qore 0.8.13
 */
qclass StderrOutputStream [dom=TERMINAL_IO; arg=StderrOutputStream* os; ns=Qore; vparent=OutputStream; flags=final];

//! Creates the StderrOutputStream.
/**
 */
StderrOutputStream::constructor() {
   SimpleRefHolder<StderrOutputStream> seos(new StderrOutputStream());
   self->setPrivate(CID_STDERROUTPUTSTREAM, seos.release());
}

//! Does nothing since \c stderr cannot be closed.
/**
    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
nothing StderrOutputStream::close() {
   os->closeHelper(xsink);
}

//! Writes bytes to the output stream
/**
    @param data the data to write

    @par Example:
    @code{.py}
    StderrOutputStream seos();
    seos.write(<01>);
    seos.write(<0203>);
    # three bytes have been written to stderr: 01 02 03
    @endcode

    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
nothing StderrOutputStream::write(binary data) {
   os->writeHelper(data, xsink);
}
