/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_EncodingConversionInputStream.qpp EncodingConversionInputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 - 2018 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include "qore/Qore.h"
#include "qore/intern/EncodingConversionInputStream.h"
#include "qore/intern/QoreObjectIntern.h"
#include "qore/intern/QoreClassIntern.h"

//! An @ref InputStream implementation that performs on-the-fly conversion between two character encodings.
/** @par Example: EncodingConversionInputStream basic usage
    @code{.py}
    EncodingConversionInputStream latin2Stream(sourceUtf8Stream, "UTF-8", "ISO-8859-2");
    binary *b;
    while (b = latin2Stream.read(20)) {
        #b contains up to 20 bytes representing latin-2 characters
    }
    @endcode

    @note stream classes are not designed to be accessed from multiple threads; they have been implemented without
    locking for fast and efficient use when used from a single thread.  For methods that would be unsafe to use in
    another thread, any use of such methods in threads other than the thread where the constructor was called will
    cause a \c STREAM-THREAD-ERROR to be thrown, unless the stream is handed
    off to another thread using the @ref Qore::StreamBase::unassignThread() "StreamBase::unassignThread()"
    method in the thread that currently owns the stream, and the
    @ref Qore::StreamBase::reassignThread() "StreamBase::reassignThread()" method in the new thread.

    @see @ref Qore::StreamReader "StreamReader" for a class that can be used to read various kinds of data from an @ref Qore::InputStream "InputStream"

    @since %Qore 0.8.13
 */
qclass EncodingConversionInputStream [arg=EncodingConversionInputStream* is; ns=Qore; vparent=InputStream; flags=final; internal_members=InputStream is;];

//! Creates the EncodingConversionInputStream based on the \ref InputStream given
/**
    @param is the source \ref InputStream to read bytes from
    @param sourceEncoding the encoding of the characters in the source input stream
    @param destEncoding the destination character encoding
    @throw ENCODING-CONVERSION-ERROR if either of the encodings is unsupported
 */
EncodingConversionInputStream::constructor(Qore::InputStream[InputStream] is, string sourceEncoding, string destEncoding) {
   SimpleRefHolder<EncodingConversionInputStream> ecis(new EncodingConversionInputStream(
         is, QEM.findCreate(sourceEncoding), QEM.findCreate(destEncoding), xsink));
   self->setPrivate(CID_ENCODINGCONVERSIONINPUTSTREAM, ecis.release());
   qore_object_private* o = qore_object_private::get(*self);
   const qore_class_private* cls = qore_class_private::get(*QC_ENCODINGCONVERSIONINPUTSTREAM);
   o->setValueIntern(cls, "is", static_cast<QoreObject *>(obj_is->refSelf()), xsink);
}

//! Reads bytes (up to a specified limit) from the input stream; returns \ref NOTHING if there are no more bytes in the stream
/**

    @param limit the maximum number of bytes to read
    @return the read bytes (the length is between 1 and `limit` inclusive) or \ref NOTHING if no more bytes are available

    @par Example:
    @code{.py}
    EncodingConversionInputStream latin2Stream(sourceUtf8Stream, "UTF-8", "ISO-8859-2");
    *binary b;
    while (b = latin2Stream.read(20)) {
        #b contains up to 20 bytes representing latin-2 characters
    }
    @endcode

    @throw ENCODING-CONVERSION-ERROR if an invalid multibyte sequence is encountered in the input
    @throw INPUT-STREAM-ERROR \a limit is not positive
    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
*binary EncodingConversionInputStream::read(int limit) {
   return is->readHelper(limit, xsink);
}

//! Peeks the next byte available from the input stream; returns -1 if no more data available
/**
    @return the next byte available from the input stream or -1 if no more data is available

    @par Example:
    @code{.py}
    EncodingConversionInputStream latin2Stream(sourceUtf8Stream, "UTF-8", "ISO-8859-2");
    int nextByte = latin2Stream.peek();
    @endcode

    @throw ENCODING-CONVERSION-ERROR if an invalid multibyte sequence is encountered in the input
    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
int EncodingConversionInputStream::peek() {
   return is->peekHelper(xsink);
}
