/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_BinaryInputStream.qpp BinaryInputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2016 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/BinaryInputStream.h"

//! This class implements the @ref InputStream interface for reading bytes from a @ref binary variable
/** @since %Qore 0.8.12

    @par Example: BinaryInputStream basic usage
    @code{.py}
    binary src = <2AFF04>;
    BinaryInputStream bis(src);
    while ((int i = bis.read()) != -1) {
        printf("read %d\n", i);
    }

    read 42
    read 255
    read 4
    @endcode
 */
qclass BinaryInputStream [arg=BinaryInputStream* is; ns=Qore; vparent=InputStream; flags=final];

//! Creates the BinaryInputStream based on the \ref binary given
/**
    @param src the \ref binary to read bytes from
 */
BinaryInputStream::constructor(binary src) {
   SimpleRefHolder<BinaryInputStream> bis(new BinaryInputStream(static_cast<BinaryNode *>(src->refSelf())));
   self->setPrivate(CID_BINARYINPUTSTREAM, bis.release());
}

//! Closes the input stream and releases any resources.
/** Any methods called on a closed input stream will thrown an IO-ERROR exception.

    @throw IO-ERROR if an I/O error occurs
 */
nothing BinaryInputStream::close() {
   is->closeHelper(xsink);
}

//! Reads a single byte from the input stream; returns -1 if the end of the stream has been reached
/**
    @param timeout_ms ignored
    @return the next byte (0 - 255) in the input stream or -1 if the end of the stream has been reached

    @par Example:
    @code{.py}
    binary src = <2AFF04>;
    BinaryInputStream bis(src);
    while ((int i = bis.read()) != -1) {
        printf("read %d\n", i);
    }

    read 42
    read 255
    read 4
    @endcode
 */
int BinaryInputStream::read(timeout timeout_ms = -1) {
   return is->readHelper(timeout_ms, xsink);
}

//! Reads bytes (up to a specified limit) from the input stream; returns \ref NOTHING if there are no more bytes in the stream
/**

    @param limit the maximum number of bytes to read
    @param timeout_ms ignored
    @return the read bytes (the length is between 1 and `limit` inclusive) or \ref NOTHING if no more bytes are available

    @par Example:
    @code{.py}
    binary src = <2AFF04>;
    BinaryInputStream is(src);
    *binary b;
    while (b = is.bulkRead(2)) {
        printf("read %s\n", make_hex_string(b));
    }

    read 2aff
    read 04
    @endcode
 */
*binary BinaryInputStream::bulkRead(int limit, timeout timeout_ms = -1) {
   return is->bulkReadHelper(limit, timeout_ms, xsink);
}
