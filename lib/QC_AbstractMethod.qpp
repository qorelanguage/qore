/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_Method.qpp Method class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include "qore/Qore.h"
#include "qore/intern/QoreClassIntern.h"
#include "qore/intern/QC_AbstractMethod.h"

int check_call(QoreObject* obj, const QoreMethod& m, ExceptionSink* xsink) {
    if (!obj->validInstanceOf(*m.getClass())) {
        xsink->raiseException("METHOD-ERROR", "object is of class '%s' which is not compatible with method '%s()' of class '%s'", obj->getClassName(), m.getName(), m.getClassName());
        return -1;
    }
    return 0;
}

QoreReflectionMethod::QoreReflectionMethod(const QoreClass* cls, const char* name, ExceptionSink* xsink) : AbstractReflectionObject(getProgram()) {
    setMethod(cls, name, xsink);
}

QoreReflectionMethod::QoreReflectionMethod(const char* cls_path, const char* name, ExceptionSink* xsink) : AbstractReflectionObject(getProgram()) {
    const QoreClass* cls = qore_program_private::runtimeFindClass(*pgm, cls_path, xsink);
    if (!cls) {
        if (!*xsink) {
            xsink->raiseException("CLASS-ERROR", "cannot resolve class '%s'", cls_path);
        }
        return;
    }

    setMethod(cls, name, xsink);
}

QoreReflectionMethod::QoreReflectionMethod(QoreProgram* pgm, const QoreMethod* m) : AbstractReflectionObject(pgm), m(m) {
    setType();
}

void QoreReflectionMethod::setMethod(const QoreClass* cls, const char* name, ExceptionSink* xsink) {
    m = cls->findMethod(name);
    if (!m) {
        m = cls->findStaticMethod(name);
    }
    if (!m) {
        xsink->raiseException("METHOD-ERROR", "cannot resolve method '%s' in class '%s'", name, cls->getName());
    }
    else {
        setType();
    }
}

void QoreReflectionMethod::setType() {
    // set type
    if (m->isStatic()) {
        mtype = MT_Static;
    }
    else {
        const qore_method_private* pm = qore_method_private::get(*m);
        if (dynamic_cast<const ConstructorMethodFunction*>(pm->func)) {
            mtype = MT_Constructor;
        }
        else if (dynamic_cast<const DestructorMethodFunction*>(pm->func)) {
            mtype = MT_Destructor;
        }
        else if (dynamic_cast<const CopyMethodFunction*>(pm->func)) {
            mtype = MT_Copy;
        }
        else {
            mtype = MT_Normal;
        }
    }
}

//! The abstract base class for %Qore class methods
/**
    This class cannot be instantiated directly and also cannot be directly inherited by user-defined classes.

    @since %Qore 0.9.0
 */
qclass AbstractMethod [arg=QoreReflectionMethod* m; ns=Qore];

//! Throws an exception if called directly; this class can only be instantiated by builtin subclasses
/** @throw ABSTRACTMETHOD-CONSTRUCTOR-ERROR this exception is thrown if this class is constructed directly (also if directly inherited by user classes)
 */
AbstractMethod::constructor() {
   xsink->raiseException("ABSTRACTMETHOD-CONSTRUCTOR-ERROR", "this class is an abstract class and cannot be constructed directly or inherited directly by a user-defined class");
}

//! returns the method's name
/** par Example:
    @code{.py}
string name = m.getName();
    @endcode

    @return the method's name

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class and method has been destroyed
 */
string AbstractMethod::getName() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, m->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the method ptr must be valid
    return new QoreStringNode(m->m->getName());
}

//! returns @ref True if the method is a static method
/** par Example:
    @code{.py}
bool b = m.isStatic();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class and method has been destroyed
*/
bool AbstractMethod::isStatic() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, m->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the method ptr must be valid
    return m->m->isStatic();
}

//! returns @ref True if the method is a builtin method
/** par Example:
    @code{.py}
bool b = m.isBuiltin();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class and method has been destroyed
*/
bool AbstractMethod::isBuiltin() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, m->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the method ptr must be valid
    return m->m->isBuiltin();
}

//! returns @ref True if the method is a user method
/** par Example:
    @code{.py}
bool b = m.isUser();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class and method has been destroyed
*/
bool AbstractMethod::isUser() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, m->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the method ptr must be valid
    return m->m->isUser();
}

//! returns the type of method as a string; one of \c "normal", \c "static", \c "constructor", \c "destructor", \c "copy"
/** par Example:
    @code{.py}
string type = m.getMethodTypeName();
    @endcode

    @return the type of method as a string; one of \c "normal", \c "static", \c "constructor", \c "destructor", \c "copy"

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class and method has been destroyed
*/
string AbstractMethod::getMethodTypeName() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, m->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the method ptr must be valid
    return new QoreStringNode(m->getType());
}
