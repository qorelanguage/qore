/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_Class.qpp Class class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>
#include <qore/intern/QoreClassIntern.h>
#include <qore/intern/QoreNamespaceIntern.h>
#include <qore/intern/QC_Class.h>
#include <qore/intern/QC_AbstractMethod.h>
#include <qore/intern/QC_NormalMethod.h>
#include <qore/intern/QC_StaticMethod.h>
#include <qore/intern/QC_ConstructorMethod.h>
#include <qore/intern/QC_DestructorMethod.h>
#include <qore/intern/QC_CopyMethod.h>
#include <qore/intern/QC_AbstractReflectionFunction.h>
#include <qore/intern/QC_AbstractMethodVariant.h>
#include <qore/intern/QC_NormalMethodVariant.h>
#include <qore/intern/QC_StaticMethodVariant.h>
#include <qore/intern/QC_ConstructorMethodVariant.h>
#include <qore/intern/QC_DestructorMethodVariant.h>
#include <qore/intern/QC_CopyMethodVariant.h>
#include <qore/intern/QC_AbstractMember.h>
#include <qore/intern/QC_NormalMember.h>
#include <qore/intern/QC_StaticMember.h>
#include <qore/intern/QC_ClassConstant.h>
#include <qore/intern/QC_Type.h>
#include "qore/intern/qore_program_private.h"

QoreReflectionClass::QoreReflectionClass(const char* name, ExceptionSink* xsink) : AbstractReflectionObject(getProgram()) {
    cls = qore_program_private::runtimeFindClass(*pgm, name, xsink);
    if (!cls) {
        if (!*xsink) {
            xsink->raiseException("CLASS-ERROR", "cannot resolve class '%s'", name);
        }
        return;
    }
}

QoreReflectionClass::QoreReflectionClass(QoreProgram* pgm, const QoreClass* cls) : AbstractReflectionObject(pgm), cls(cls) {
}

QoreObject* get_method_object(ReferenceHolder<QoreReflectionMethod>& m, ExceptionSink* xsink) {
    switch (m->mtype) {
        case MT_Normal: return new QoreObject(QC_NORMALMETHOD, m->pgm, m.release());
        case MT_Static: return new QoreObject(QC_STATICMETHOD, m->pgm, m.release());
        case MT_Constructor: return new QoreObject(QC_CONSTRUCTORMETHOD, m->pgm, m.release());
        case MT_Destructor: return new QoreObject(QC_DESTRUCTORMETHOD, m->pgm, m.release());
        case MT_Copy: return new QoreObject(QC_COPYMETHOD, m->pgm, m.release());
        default:
            break;
    }

    assert(false);
    return nullptr;
}

#define FV_NORMAL (1 << 0)
#define FV_STATIC (1 << 1)
#define FV_CONSTRUCTOR (1 << 2)
#define FV_DESTRUCTOR (1 << 3)
#define FV_COPY (1 << 4)
#define FV_ALL (FV_NORMAL | FV_STATIC | FV_CONSTRUCTOR | FV_DESTRUCTOR | FV_COPY)

QoreObject* find_variant(const QoreReflectionClass* c, const char* name, unsigned which, const QoreListNode* args, size_t offset, bool exact, ExceptionSink* xsink) {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return nullptr;
    }

    // the class ptr must be valid
    // first find the method
    const QoreMethod* m = nullptr;
    method_type_e mtype = MT_None;
    if (which & (FV_NORMAL | FV_CONSTRUCTOR | FV_DESTRUCTOR | FV_COPY)) {
        m = c->cls->findMethod(name);
        if (m) {
            mtype = QoreReflectionMethod::getMethodType(m);
            switch (mtype) {
                case MT_Normal:
                    if (!(which & FV_NORMAL)) {
                        m = nullptr;
                    }
                    break;
                case MT_Constructor:
                    if (!(which & FV_CONSTRUCTOR)) {
                        m = nullptr;
                    }
                    break;
                case MT_Destructor:
                    if (!(which & FV_DESTRUCTOR)) {
                        m = nullptr;
                    }
                    break;
                case MT_Copy:
                    if (!(which & FV_COPY)) {
                        m = nullptr;
                    }
                    break;
                default:
                    assert(false);
                    break;
            }
        }
    }
    if (!m && (which & FV_STATIC)) {
        m = c->cls->findStaticMethod(name);
        if (m) {
            mtype = MT_Static;
        }
    }
    if (!m) {
        const char* ms;
        switch (which) {
            case FV_ALL: ms = "any"; break;
            case FV_STATIC: ms = "static"; break;
            case FV_NORMAL: ms = "normal (non-static, non-special)"; break;
            case FV_CONSTRUCTOR: ms = "constructor"; break;
            case FV_DESTRUCTOR: ms = "destructor"; break;
            case FV_COPY: ms = "copy"; break;
            default: assert(false); break;
        }

        if (which == FV_DESTRUCTOR || which == FV_COPY) {
            xsink->raiseException("METHOD-ERROR", "cannot resolve %s method in class '%s'", ms,
                c->cls->getName());
        }
        else {
            xsink->raiseException("METHOD-ERROR", "cannot resolve %s method '%s' in class '%s'", ms, name,
                c->cls->getName());
        }
        return nullptr;
    }

    const QoreFunction* func = qore_method_private::get(*m)->func;
    return find_function_variant(c->pgm, func, args, offset, exact, mtype, xsink);
}

QoreObject* find_variant(const QoreReflectionClass* c, const QoreStringNode* name, unsigned which, const QoreListNode* args, size_t offset, bool exact, ExceptionSink* xsink) {
    TempEncodingHelper nname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return nullptr;
    }

    return find_variant(c, nname->c_str(), which, args, offset, exact, xsink);
}

QoreHashNode* get_source_location(const QoreProgramLocation* loc) {
    ReferenceHolder<QoreHashNode> h(new QoreHashNode(hashdeclSourceLocationInfo, nullptr), nullptr);
    auto ph = qore_hash_private::get(**h);

    if (!loc) {
        loc = &loc_builtin;
        ph->setKeyValueIntern("builtin", true);
    }
    else {
        ph->setKeyValueIntern("builtin", false);
    }

    {
        const char* file = loc->getFile();
        if (file) {
            ph->setKeyValueIntern("file", new QoreStringNode(file));
        }
    }

    ph->setKeyValueIntern("line", loc->start_line);
    ph->setKeyValueIntern("endline", loc->end_line);

    {
        const char* source = loc->getSource();
        if (source) {
            ph->setKeyValueIntern("source", new QoreStringNode(source));
        }
    }

    ph->setKeyValueIntern("offset", loc->offset);

    return h.release();
}

/** @defgroup access_constants Access Constants
    Constants giving access information

    @since %Qore 0.9.0
*/
//@{
//! describes public access
/** Equivalent to @ref Qore::Reflection::MC_PUBLIC
*/
const AC_PUBLIC = MC_PUBLIC;

//! describes private access; accessible from anywhere in a class hierarchy (similar to \c protected in C++ and Java)
/** Equivalent to @ref Qore::Reflection::MC_PRIVATE
*/
const AC_PRIVATE = MC_PRIVATE;

//! describes internal private access; only accessible from the same class where the definition is made (similar to \c private in C++ and Java)
/** Equivalent to @ref Qore::Reflection::MC_PRIVATEINTERNAL
*/
const AC_PRIVATEINTERNAL = MC_PRIVATEINTERNAL;
//@}

/** @defgroup modifier_constants Modifier Constants
    Constants giving modifier information; each constant is a unique element of a bitfield

    @since %Qore 0.9.0
*/
//@{
//! describes public access
/** Equivalent to @ref Qore::Reflection::AC_PUBLIC
*/
const MC_PUBLIC = MC_PUBLIC;

//! describes private access; accessible from anywhere in a class hierarchy (similar to \c protected in C++ and Java)
/** Equivalent to @ref Qore::Reflection::AC_PRIVATE
*/
const MC_PRIVATE = MC_PRIVATE;

//! describes internal private access; only accessible from the same class where the definition is made (similar to \c private in C++ and Java)
/** Equivalent to @ref Qore::Reflection::AC_PRIVATEINTERNAL
*/
const MC_PRIVATEINTERNAL = MC_PRIVATEINTERNAL;

//! describes abstract classes and method variants
const MC_ABSTRACT = MC_ABSTRACT;

//! describes static methods and method variants
const MC_STATIC = MC_STATIC;

//! describes synchronized variants
const MC_SYNCHRONIZED = MC_SYNCHRONIZED;

//! describes deprecated functionality
const MC_DEPRECATED = MC_DEPRECATED;

//! describes injected functionality or declarations
const MC_INJECTED = MC_INJECTED;

//! describes builtin code
/** @ref Qore::Reflection::MC_BUILTIN "MC_BUILTIN" and @ref Qore::Reflection::MC_USER "MC_USER" are mutually exclusive
*/
const MC_BUILTIN = MC_BUILTIN;

//! describes user code
/** @ref Qore::Reflection::MC_BUILTIN "MC_BUILTIN" and @ref Qore::Reflection::MC_USER "MC_USER" are mutually exclusive
*/
const MC_USER = MC_USER;
//@}

/** @defgroup functional_domain_constants Functional Domain Constants
    Constants providing values for functional domains; each constant is a unique element of a bitfield

    @since %Qore 0.9.0
*/
//@{
//! provides process control functionality (can affect or stop the current process)
/** @see
    - @ref Qore::PO_NO_PROCESS_CONTROL "PO_NO_PROCESS_CONTROL"
    - @ref no-process-control
*/
const DOM_PROCESS_CONTROL = QDOM_PROCESS;

//! provides network functionality
/** @see
    - @ref Qore::PO_NO_NETWORK "PO_NO_NETWORK"
    - @ref no-network
*/
const DOM_NETWORK = QDOM_NETWORK;

//! provides external process control functionality (can affect) start) or stop external processes)
/** @see
    - @ref Qore::PO_NO_EXTERNAL_PROCESS "PO_NO_EXTERNAL_PROCESS"
    - @ref no-external-process
*/
const DOM_EXTERNAL_PROCESS = QDOM_EXTERNAL_PROCESS;

//! provides access to the filesystem
/** @see
    - @ref Qore::PO_NO_FILESYSTEM "PO_NO_FILESYSTEM"
    - @ref no-filesystem
*/
const DOM_FILESYSTEM = QDOM_FILESYSTEM;

//! provides thread control functionality
/** @see
    - @ref Qore::PO_NO_THREAD_CLASSES "PO_NO_THREAD_CLASSES"
    - @ref no-thread-classes
*/
const DOM_THREAD_CLASS = QDOM_THREAD_CLASS;

//! provides the ability to check or manipulate threads (including starting new threads)
/** @see
    - @ref Qore::PO_NO_THREAD_CONTROL "PO_NO_THREAD_CONTROL"
    - @ref no-thread-control
*/
const DOM_THREAD_CONTROL = QDOM_THREAD_CONTROL;

//! provides access to databases
/** @see
    - @ref Qore::PO_NO_DATABASE "PO_NO_DATABASE"
    - @ref no-database
*/
const DOM_DATABASE = QDOM_DATABASE;

//! provides GUI functionality
/** @see
    - @ref Qore::PO_NO_GUI "PO_NO_GUI"
    - @ref no-gui
*/
const DOM_GUI = QDOM_GUI;

//! provides terminal I/O functionality
/** @see
    - @ref Qore::PO_NO_TERMINAL_IO "PO_NO_TERMINAL_IO"
    - @ref no-terminal-io
*/
const DOM_TERMINAL_IO = QDOM_TERMINAL_IO;

//! provides access to external information (ex: hostname, pid, process uid, etc)
/** @see
    - @ref Qore::PO_NO_EXTERNAL_INFO "PO_NO_EXTERNAL_INFO"
    - @ref no-external-info
*/
const DOM_EXTERNAL_INFO = QDOM_EXTERNAL_INFO;

//! provides access to information regarding threading (tid, active threads, etc)
/** @see
    - @ref Qore::PO_NO_THREAD_INFO "PO_NO_THREAD_INFO"
    - @ref no-thread-info
*/
const DOM_THREAD_INFO = QDOM_THREAD_INFO;

//! provides access to functionality that changes locale information
/** @see
    - @ref Qore::PO_NO_LOCALE_CONTROL "PO_NO_LOCALE_CONTROL"
    - @ref no-locale-control
*/
const DOM_LOCALE_CONTROL = QDOM_LOCALE_CONTROL;

//! provides access to external modules
/** @see
    - @ref Qore::PO_NO_MODULES "PO_NO_MODULES"
    - @ref no-modules
*/
const DOM_MODULE = QDOM_MODULES;

//! provides dynamic parsing functionality
/** @see @ref Qore::PO_NO_EMBEDDED_LOGIC "PO_NO_EMBEDDED_LOGIC"
*/
const DOM_EMBEDDED_LOGIC = QDOM_EMBEDDED_LOGIC;

//! provides functionality related to code / dependency injection
/** @see @ref Qore::PO_ALLOW_INJECTION "PO_ALLOW_INJECTION"
*/
const DOM_INJECTION = QDOM_INJECTION;

//! provides unchecked access to system functionality that could bypass Qore's sandboxing controls
/** @see
    - @ref Qore::PO_NO_UNCONTROLLED_APIS "PO_NO_UNCONTROLLED_APIS"
    - @ref no-uncontrolled-apis
*/
const DOM_UNCONTROLLED_API = QDOM_UNCONTROLLED_API;

//! provides debugging functionality
/** @see @ref Qore::PO_ALLOW_DEBUGGER "PO_ALLOW_DEBUGGER"
*/
const DOM_DEBUGGER = QDOM_DEBUGGER;
//@}

/** @defgroup code_flag_constants Code Flag Constants
    Constants providing information about code variants

    @since %Qore 0.9.0
*/
//@{
//! Set on variants that are present for backwards-compatibility that always return a constant value (normally @ref nothing) due to argument errors
/** Variants with this flag set are not accessible at parse time when @ref strict-args or @ref require-types are set and
    therefore should be considered deprecated
*/
const CF_NOOP = QCF_NOOP;

//! Set on variants that accept extra arguments after their parameter arguments
/**
*/
const CF_USES_EXTRA_ARGS = QCF_USES_EXTRA_ARGS;

//! Set on variants that cannot throw an exception
/**
*/
const CF_CONSTANT = QCF_CONSTANT_INTERN;

//! Set on deprecated variants
/**
*/
const CF_DEPRECATED = QCF_DEPRECATED;

//! Set on variants that only return a value depending on any arguments and have no side effects
/**
*/
const CF_RET_VALUE_ONLY = QCF_RET_VALUE_ONLY;

//! Like @ref Qore::Reflection::CF_NOOP "CF_NOOP" but makes variants unavailable at both parse time and run time when either @ref strict-args or @ref require-types or both are set
/** as with @ref Qore::Reflection::CF_NOOP "CF_NOOP", variants with this flag set should be considered deprecated
*/
const CF_RUNTIME_NOOP = QCF_RUNTIME_NOOP;
//@}

//! class and inheritance access information
/**
    @since %Qore 0.9.0
*/
hashdecl ClassAccessInfo {
    //! the inherited class
    Class cls;

    //! access code; see @ref access_constants for valid values
    int access;

    //! access string; one of \c "public", \c "private", or \c "private:internal"
    string access_string;
}

//! source location information
/**
    @since %Qore 0.9.0
*/
hashdecl SourceLocationInfo {
    //! if @ref True then the code is builtin and there is no user source location
    bool builtin;

    //! the file name or parse label for the code
    *string file;

    //! the starting source line number
    int line;

    //! the ending source line number
    int endline;

    //! the source object or file name tag (used when multiple source objects are defined from the same source)
    *string source;

    //! the offset line in the source (for when multiple source objects are defined from the same source)
    int offset;
}

//! This class provides information about %Qore classes
/** @since %Qore 0.9.0
 */
qclass Class [ns=Qore::Reflection; arg=QoreReflectionClass* c];

//! Creates the object from the class name or namespace-justified path as a string
/** @par Example:
    @code{.py}
Class cls("Thread::Mutex");
    @endcode

    @param path the class name or namespace-justified path as a string

    @throw CLASS-ERROR cannot find a class with the given name or path
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion
 */
Class::constructor(string path) {
    TempEncodingHelper npath(path, QCS_DEFAULT, xsink);
    if (*xsink) {
        return;
    }

    ReferenceHolder<QoreReflectionClass> cls(new QoreReflectionClass(npath->c_str(), xsink), xsink);
    if (*xsink) {
        return;
    }
    self->setPrivate(CID_CLASS, cls.release());
}

//! returns the class's name
/** @par Example:
    @code{.py}
string name = cls.getName();
    @endcode

    @return the class's name

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getPathName()
 */
string Class::getName() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }
    // the class ptr must be valid
    return new QoreStringNode(c->cls->getName());
}

//! returns the class's full namespace-justified path name
/** @par Example:
    @code{.py}
string name = cls.getPathName();
    @endcode

    @return the class's full namespace-justified path name

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getName()
 */
string Class::getPathName() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid

    SimpleRefHolder<QoreStringNode> rv(new QoreStringNode);
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    if (qc->ns) {
        std::string path;
        qc->ns->getPath(path);
        if (!path.empty()) {
            rv->concat(path);
            rv->concat("::");
        }
    }

    rv->concat(c->cls->getName());
    return rv.release();
}

//! Returns @ref True if the Class object passed as an argument is equal to the current object; @ref False if not
/** @par Example:
    @code{.py}
bool b = c1.isEqual(c2);
    @endcode

    @param cls the class to check with the current object for equality

    @return @ref True if the Class object passed as an argument is equal to the current object; @ref False if not

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isEqual(Class[QoreReflectionClass] cls) [flags=RET_VALUE_ONLY] {
    ReferenceHolder<QoreReflectionClass> holder(cls, xsink);

    // get read access to program object
    ProgramThreadCountContextHelper tch1(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch2(xsink, cls->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    return qore_class_private::get(*c->cls)->equal(*qore_class_private::get(*cls->cls));
}

//! returns a bitfield of @ref modifier_constants "modifiers" describing the class
/** @par Example:
    @code{.py}
int i = cls.getModifiers();
    @endcode

    @return a bitfield of @ref modifier_constants "modifiers" describing the class; possible values are:
    - @ref Qore::Reflection::MC_ABSTRACT "MC_ABSTRACT": the class is @ref abstract
    - @ref Qore::Reflection::MC_BUILTIN "MC_BUILTIN": the class is builtin
    - @ref Qore::Reflection::MC_FINAL "MC_FINAL": the class has the @ref final_classes "final flag" set
    - @ref Qore::Reflection::MC_INJECTED "MC_INJECTED": the class has been @ref allow-injection "injected" into the current @ref Qore::Program "Program" container
    - @ref Qore::Reflection::MC_PUBLIC "MC_PUBLIC": the class has the @ref mod_public "module public" flag set (not related to any inheritance properties in a class hierarchy)
    - @ref Qore::Reflection::MC_USER "MC_USER": the class is a user class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see @ref getModifierList()
*/
int Class::getModifiers() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    int64 rc = 0;
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    if (qc->hasAbstract()) {
        rc |= MC_ABSTRACT;
    }
    if (qc->pub) {
        rc |= MC_PUBLIC;
    }
    if (qc->final) {
        rc |= MC_FINAL;
    }
    if (qc->inject) {
        rc |= MC_INJECTED;
    }
    if (c->cls->isSystem()) {
        rc |= MC_BUILTIN;
    }
    else {
        rc |= MC_USER;
    }

    return rc;
}

//! returns a list of strings of modifiers describing the class
/** @par Example:
    @code{.py}
list<string> l = cls.getModifierList();
    @endcode

    @return list of strings of modifiers describing the class; possible values are:
    - \c "abstract": the class is @ref abstract
    - \c "builtin": the class is builtin
    - \c "final": the class has the @ref final_classes "final flag" set
    - \c "injected": the class has been @ref allow-injection "injected" into the current @ref Qore::Program "Program" container
    - \c "public": the class has the @ref mod_public "module public" flag set (not related to any inheritance properties in a class hierarchy)
    - \c "user": the class is a user class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see @ref getModifiers()
*/
list<string> Class::getModifierList() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> rv(new QoreListNode(stringTypeInfo), xsink);
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    if (qc->hasAbstract()) {
        rv->push(new QoreStringNode("abstract"), xsink);
    }
    if (qc->pub) {
        rv->push(new QoreStringNode("public"), xsink);
    }
    if (qc->final) {
        rv->push(new QoreStringNode("final"), xsink);
    }
    if (qc->inject) {
        rv->push(new QoreStringNode("injected"), xsink);
    }
    if (c->cls->isSystem()) {
        rv->push(new QoreStringNode("builtin"), xsink);
    }
    else {
        rv->push(new QoreStringNode("user"), xsink);
    }

    return rv.release();
}

//! returns @ref True if the class is a builtin class
/** @par Example:
    @code{.py}
bool b = cls.isBuiltin();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isBuiltin() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->isSystem();
}

//! returns @ref True if the class is a user class
/** @par Example:
    @code{.py}
bool b = cls.isUser();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isUser() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return !c->cls->isSystem();
}

//! returns @ref True if the class has at least one abstract method
/** @par Example:
    @code{.py}
bool b = cls.isAbstract();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isAbstract() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->hasAbstract();
}

//! returns @ref True if the class was injected as a dependency injection
/** @par Example:
    @code{.py}
bool b = cls.isInjected();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isInjected() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return qore_class_private::get(*c->cls)->inject;
}

//! returns @ref True if the class has the @ref mod_public "module public" flag set
/** @par Example:
    @code{.py}
bool b = cls.isModulePublic();
    @endcode

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::isModulePublic() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return qore_class_private::get(*c->cls)->pub;
}

//! returns the internal ID of the class which is only valid for the current execution session
/** @par Example:
    @code{.py}
if (cls1.getId() == cls2.getId()) {
    printf("classes are the same\n");
}
    @endcode

    @return the internal ID of the class which is only valid for the current execution session

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
int Class::getId() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return (int64)c->cls->getID();
}

//! returns a unique binary hash for the class
/** @par Example:
    @code{.py}
binary b = cls.getHash();
    @endcode

    @return a unique binary hash for the class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
binary Class::getHash() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    SimpleRefHolder<BinaryNode> b(new BinaryNode);
    char* hash = qore_class_private::get(*c->cls)->getHash();
    assert(hash);
    b->append(hash, SH_SIZE);

    return b.release();
}

//! returns @ref True if the class implements a "memberGate" method
/** @par Example:
    @code{.py}
bool b = cls.hasMemberGate();
    @endcode

    @return @ref True if the class implements a "memberGate" method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasMemberGate() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->hasMemberGate();
}

//! returns @ref True if the class implements a "methodGate" method
/** @par Example:
    @code{.py}
bool b = cls.hasMethodGate();
    @endcode

    @return @ref True if the class implements a "methodGate" method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasMethodGate() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->hasMethodGate();
}

//! returns @ref True if the class implements a "memberNotification" method
/** @par Example:
    @code{.py}
bool b = cls.hasMemberNotification();
    @endcode

    @return @ref True if the class implements a "memberNotification" method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasMemberNotification() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->hasMemberNotification();
}

//! returns the functional domain of the class (for builtin classes only) as a bitfield of @ref functional_domain_constants
/** @par Example:
    @code{.py}
int i = cls.getDomain();
    @endcode

    @return the functional domain of the class (for builtin classes only) as a bitfield of @ref functional_domain_constants

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getDomainStringList()

    @note user classes always return 0 here; a value is only returned by builtin classes
*/
int Class::getDomain() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return c->cls->getDomain64();
}

//! returns a list of functional domain strings for the class (for builtin classes only); an empty list is returned for user classes
/** @par Example:
    @code{.py}
list<string> l = cls.getDomainStringList();
    @endcode

    @return a list of functional domain strings for the class (for builtin classes only)

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getDomain()

    @note user classes always return an empty list here
*/
list<string> Class::getDomainStringList() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return domain_bitfield_to_string_list(c->cls->getDomain64(), xsink);
}

//! returns @ref True if the class has at least one constructor method variant
/** @par Example:
    @code{.py}
bool b = cls.hasConstructorMethod();
    @endcode

    @return @ref True if the class has at least one constructor method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasConstructorMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return (bool)c->cls->getConstructor();
}

//! returns @ref True if the class has a destructor method
/** @par Example:
    @code{.py}
bool b = cls.hasDestructorMethod();
    @endcode

    @return @ref True if the class has a destructor method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasDestructorMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return (bool)c->cls->getDestructor();
}

//! returns @ref True if the class has a copy method
/** @par Example:
    @code{.py}
bool b = cls.hasCopyMethod();
    @endcode

    @return @ref True if the class has a copy method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
bool Class::hasCopyMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return (bool)c->cls->getCopyMethod();
}

//! creates an object if the current class with the given arguments
/** @par Example:
    @code{.py}
object o = cls.newObject();
    @endcode

    @param ... the arguments for the cosntructor, if any

    @return an object if the current class based on the constructor arguments passed

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw CREATE-OBJECT-ERROR class implements features restricted by current parse options / sandboxing restrictions
    @throw CONSTRUCTOR-IS-PRIVATE attempt to instantiate an object with a private constructor from outside the class
    @throw ABSTRACT-CLASS-ERROR thrown if the class has abstract methods

    @note see the class documentation for the class to be instantiated for a list of additional exceptions that can be thrown

    @see
    - newObjectArgs()
    - create_object()
    - create_object_args()
*/
object Class::newObject(...) {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    if (getProgram()->getParseOptions64() & c->cls->getDomain64()) {
        xsink->raiseException("CREATE-OBJECT-ERROR", "Program sandboxing restrictions do not allow access to the '%s' class", c->cls->getName());
        return QoreValue();
    }

    if (qore_class_private::runtimeCheckInstantiateClass(*c->cls, xsink)) {
        return QoreValue();
    }

    return c->cls->execConstructor(args, xsink);
}

//! creates an object if the current class with the arguments for the constructor given as a list
/** @par Example:
    @code{.py}
object o = cls.newObjectArgs(args);
    @endcode

    @param argv the arguments for the constructor

    @return an object if the current class based on the constructor arguments passed

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw CREATE-OBJECT-ERROR class implements features restricted by current parse options / sandboxing restrictions
    @throw CONSTRUCTOR-IS-PRIVATE attempt to instantiate an object with a private constructor from outside the class
    @throw ABSTRACT-CLASS-ERROR thrown if the class has abstract methods

    @note see the class documentation for the class to be instantiated for a list of additional exceptions that can be thrown

    @see
    - newObject()
    - create_object()
    - create_object_args()
*/
object Class::newObjectArgs(*softlist argv) {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    if (getProgram()->getParseOptions64() & c->cls->getDomain64()) {
        xsink->raiseException("CREATE-OBJECT-ERROR", "Program sandboxing restrictions do not allow access to the '%s' class", c->cls->getName());
        return QoreValue();
    }

    if (qore_class_private::runtimeCheckInstantiateClass(*c->cls, xsink)) {
        return QoreValue();
    }

    return c->cls->execConstructor(argv, xsink);
}

//! Returns the type object for this class
/** @par Example:
    @code{.py}
Type t = cls.typeObject();
    @endcode

    @return the type object for this class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getOrNothingType()
*/
Type Class::typeObject() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return new QoreObject(QC_TYPE, c->pgm, new QoreType(c->cls->getTypeInfo()));
}

//! Returns the "or nothing" type object for this class
/** @par Example:
    @code{.py}
Type t = cls.orNothingTypeObject();
    @endcode

    @return the "or nothing" type object for this class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getType()
*/
Type Class::orNothingTypeObject() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    return new QoreObject(QC_TYPE, c->pgm, new QoreType(c->cls->getOrNothingTypeInfo()));
}

//! returns the given method variant, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
AbstractMethodVariant m = cls.getVariant(name, TypeInt, TypeString);
    @endcode

    Searches normal methods (including special methods) and then static methods for the given method name and
    and then matches the arguments by type to return the variant

    @param name the name of the method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown method
    @throw RUNTIME-OVERLOAD-ERROR no variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getVariantArgs()
    - getExactVariant()
    - getExactVariantArgs()
*/
AbstractMethodVariant Class::getVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_ALL, args, 1, false, xsink);
}

//! returns the given method variant, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
AbstractMethodVariant m = cls.getVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches normal methods (including special methods) and then static methods for the given method name and
    and then matches the arguments by type

    @param name the name of the method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown method
    @throw RUNTIME-OVERLOAD-ERROR no variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getVariant()
    - getExactVariant()
    - getExactVariantArgs()
*/
AbstractMethodVariant Class::getVariantArgs(string name, *softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_ALL, argv, 0, false, xsink);
}

//! returns the given method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
AbstractMethodVariant m = cls.getExactVariant(name, TypeInt, TypeString);
    @endcode

    Searches normal methods (including special methods) and then static methods for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown method
    @throw RUNTIME-OVERLOAD-ERROR no variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getVariant()
    - getVariantArgs()
    - getExactVariantArgs()
*/
AbstractMethodVariant Class::getExactVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_ALL, args, 1, true, xsink);
}

//! returns the given method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
AbstractMethodVariant m = cls.getExactVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches normal methods (including special methods) and then static methods for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown method
    @throw RUNTIME-OVERLOAD-ERROR no variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getVariant()
    - getVariantArgs()
    - getExactVariant()
*/
AbstractMethodVariant Class::getExactVariantArgs(string name, softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_ALL, argv, 0, true, xsink);
}

//! returns the given normal (non-static, non-special) method variant, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
NormalMethodVariant m = cls.getNormalVariant(name, TypeInt, TypeString);
    @endcode

    Searches normal (non-static, non-special) methods only for the given method name and
    and then matches the arguments by type to return the variant.

    @param name the name of the normal (non-static, non-special) method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given normal (non-static, non-special) method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown normal (non-static, non-special) method
    @throw RUNTIME-OVERLOAD-ERROR no normal (non-static, non-special) method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getNormalVariantArgs()
    - getExactNormalVariant()
    - getExactNormalVariantArgs()
*/
NormalMethodVariant Class::getNormalVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_NORMAL, args, 1, false, xsink);
}

//! Returns the given normal (non-static, non-special) method variant, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
NormalMethodVariant m = cls.getNormalVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches normal (non-static, non-special) methods only for the given method name and
    and then matches the arguments by type

    @param name the name of the normal (non-static, non-special) method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given normal (non-static, non-special) method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown normal (non-static, non-special) method
    @throw RUNTIME-OVERLOAD-ERROR no normal (non-static, non-special) method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getNormalVariant()
    - getExactNormalVariant()
    - getExactNormalVariantArgs()
*/
NormalMethodVariant Class::getNormalVariantArgs(string name, *softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_NORMAL, argv, 0, false, xsink);
}

//! Returns the given normal (non-static, non-special) method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
NormalMethodVariant m = cls.getExactNormalVariant(name, TypeInt, TypeString);
    @endcode

    Searches normal (non-static, non-special) methods only for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the normal (non-static, non-special) method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given normal (non-static, non-special) method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown normal (non-static, non-special) method
    @throw RUNTIME-OVERLOAD-ERROR no normal (non-static, non-special) method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getNormalVariant()
    - getNormalVariantArgs()
    - getExactNormalVariantArgs()
*/
NormalMethodVariant Class::getExactNormalVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_NORMAL, args, 1, true, xsink);
}

//! returns the given normal (non-static, non-special) method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
NormalMethodVariant m = cls.getExactNormalVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches normal (non-static, non-special) methods only  for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the normal (non-static, non-special) method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given normal (non-static, non-special) method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown normal (non-static, non-special) method
    @throw RUNTIME-OVERLOAD-ERROR no normal (non-static, non-special) method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getNormalVariant()
    - getNormalVariantArgs()
    - getExactNormalVariant()
*/
NormalMethodVariant Class::getExactNormalVariantArgs(string name, softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_NORMAL, argv, 0, true, xsink);
}

//! Returns the given static method variant, otherwise throws an exception if no static method variant can be matched
/** @par Example:
    @code{.py}
StaticMethodVariant m = cls.getStaticVariant(name, TypeInt, TypeString);
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type to return the variant

    @param name the name of the static method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given static method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown static method
    @throw RUNTIME-OVERLOAD-ERROR no static method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getStaticVariantArgs()
    - getExactStaticVariant()
    - getExactStaticVariantArgs()
*/
StaticMethodVariant Class::getStaticVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_STATIC, args, 1, false, xsink);
}

//! Returns the given static method variant, otherwise throws an exception if no static method variant can be matched
/** @par Example:
    @code{.py}
StaticMethodVariant m = cls.getStaticVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type

    @param name the name of the static method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given static method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown static method
    @throw RUNTIME-OVERLOAD-ERROR no method static variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getStaticVariant()
    - getExactStaticVariant()
    - getExactStaticVariantArgs()
*/
StaticMethodVariant Class::getStaticVariantArgs(string name, *softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_STATIC, argv, 0, false, xsink);
}

//! returns the given static method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
StaticMethodVariant m = cls.getExactStaticVariant(name, TypeInt, TypeString);
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the static method
    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given static method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown static method
    @throw RUNTIME-OVERLOAD-ERROR no static method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getStaticVariant()
    - getStaticVariantArgs()
    - getExactStaticVariantArgs()
*/
StaticMethodVariant Class::getExactStaticVariant(string name, ...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_STATIC, args, 1, true, xsink);
}

//! returns the given static method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
StaticMethodVariant m = cls.getExactStaticVariantArgs(name, (TypeInt, TypeString));
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param name the name of the static method
    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given static method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR unknown static method
    @throw RUNTIME-OVERLOAD-ERROR no static method variant van be found matching the given argument types
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getStaticVariant()
    - getStaticVariantArgs()
    - getExactStaticVariant()
*/
StaticMethodVariant Class::getExactStaticVariantArgs(string name, softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, name, FV_STATIC, argv, 0, true, xsink);
}

//! Returns the given constructor method variant, otherwise throws an exception if no constructor method variant can be matched
/** @par Example:
    @code{.py}
ConstructorMethodVariant m = cls.getConstructorVariant(TypeInt, TypeString);
    @endcode

    Searches constructor methods only and then matches the arguments by type to return the variant

    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given constructor method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no constructor method defined
    @throw RUNTIME-OVERLOAD-ERROR no constructor method variant van be found matching the given argument types

    @see
    - getConstructorVariantArgs()
    - getExactConstructorVariant()
    - getExactConstructorVariantArgs()
*/
ConstructorMethodVariant Class::getConstructorVariant(...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, "constructor", FV_CONSTRUCTOR, args, 0, false, xsink);
}

//! Returns the given constructor method variant, otherwise throws an exception if no constructor method variant can be matched
/** @par Example:
    @code{.py}
ConstructorMethodVariant m = cls.getConstructorVariantArgs((TypeInt, TypeString));
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type

    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given static method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no constructor method defined
    @throw RUNTIME-OVERLOAD-ERROR no method constructor variant van be found matching the given argument types

    @see
    - getConstructorVariant()
    - getExactConstructorVariant()
    - getExactConstructorVariantArgs()
*/
ConstructorMethodVariant Class::getConstructorVariantArgs(*softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, "constructor", FV_CONSTRUCTOR, argv, 0, false, xsink);
}

//! returns the given constructor method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
ConstructorMethodVariant m = cls.getExactConstructorVariant(TypeInt, TypeString);
    @endcode

    Searches static methods only for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param ... @ref Qore::Type "Type" arguments giving parameter types

    @return the given constructor method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no constructor method defined
    @throw RUNTIME-OVERLOAD-ERROR no constructor method variant van be found matching the given argument types

    @see
    - getConstructorVariant()
    - getConstructorVariantArgs()
    - getExactConstructorVariantArgs()
*/
ConstructorMethodVariant Class::getExactConstructorVariant(...) [flags=RET_VALUE_ONLY] {
    return find_variant(c, "constructor", FV_CONSTRUCTOR, args, 0, true, xsink);
}

//! returns the given constructor method variant where the argument types must match exactly, otherwise throws an exception if no method variant can be matched
/** @par Example:
    @code{.py}
ConstructorMethodVariant m = cls.getExactConstructorVariantArgs((TypeInt, TypeString));
    @endcode

    Searches constructor methods only for the given method name and
    and then matches the arguments by type; argument types must match exactly

    @param argv @ref Qore::Type "Type" arguments giving parameter types

    @return the given constructor method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no constructor method defined
    @throw RUNTIME-OVERLOAD-ERROR no constructor method variant van be found matching the given argument types

    @see
    - getConstructorVariant()
    - getConstructorVariantArgs()
    - getExactConstructorVariant()
*/
ConstructorMethodVariant Class::getExactConstructorVariantArgs(softlist<Type> argv) [flags=RET_VALUE_ONLY] {
    return find_variant(c, "constructor", FV_CONSTRUCTOR, argv, 0, true, xsink);
}

//! Returns the destructor method variant, otherwise throws an exception if no destructor method variant has been defined
/** @par Example:
    @code{.py}
DestructorMethodVariant m = cls.getDestructorVariant();
    @endcode

    Searches destructor methods only

    @return the given destructor method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no destructor method defined

    @see
    - getIfDestructorVariant()
*/
DestructorMethodVariant Class::getDestructorVariant() [flags=RET_VALUE_ONLY] {
    return find_variant(c, "destructor", FV_DESTRUCTOR, nullptr, 0, false, xsink);
}

//! Returns the copy method variant, otherwise throws an exception if no copy method variant has been defined
/** @par Example:
    @code{.py}
CopyMethodVariant m = cls.getCopyVariant();
    @endcode

    Searches copy methods only

    @return the given copy method variant

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw GETVARIANT-ERROR invalid argument to method
    @throw METHOD-ERROR no copy method defined

    @see
    - getIfCopyVariant()
*/
CopyMethodVariant Class::getCopyVariant() [flags=RET_VALUE_ONLY] {
    return find_variant(c, "copy", FV_COPY, nullptr, 0, false, xsink);
}

//! returns the given method or throws an exception if the method does not exist
/** @par Example:
    @code{.py}
AbstractMethod m = cls.getMethod(name);
    @endcode

    Searches normal methods (including special methods) and then static methods for the given method name

    @param name the name of the method

    @return the given method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR unknown method
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @note Methods group variants with the same name; see @ref getVariant() for a method that will return a method
    variant given the method name and the method variant arguments

    @see
    - getNormalMethod()
    - getStaticMethod()
    - getConstructorMethod()
    - getDestructorMethod()
    - getCopyMethd()
*/
AbstractMethod Class::getMethod(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper nname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, nname->c_str(), xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    return get_method_object(m, xsink);
}

//! returns the given normal (non-special, non-static) method or throws an exception if the method does not exist
/** @par Example:
    @code{.py}
NormalMethod m = cls.getNormalMethod(name);
    @endcode

    @param name the name of the normal (non-special, non-static) method

    @return the given normal (non-special, non-static) method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR unknown method or method is not normal
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getMethod()
    - getStaticMethod()
    - getConstructorMethod()
    - getDestructorMethod()
    - getCopyMethd()
*/
NormalMethod Class::getNormalMethod(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper nname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, nname->c_str(), xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    if (m->mtype != MT_Normal) {
        xsink->raiseException("METHOD-ERROR", "method '%s()' in class '%s' has type '%s'; expecting 'normal'", nname->c_str(), c->cls->getName(), m->getType());
        return QoreValue();
    }

    return new QoreObject(QC_NORMALMETHOD, m->pgm, m.release());
}

//! returns the given static method or throws an exception if the method does not exist
/** @par Example:
    @code{.py}
StaticMethod m = cls.getStaticMethod(name);
    @endcode

    @param name the name of the static method

    @return the given static method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR unknown method or method is not static
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - getMethod()
    - getNormalMethod()
    - getConstructorMethod()
    - getDestructorMethod()
    - getCopyMethd()
*/
StaticMethod Class::getStaticMethod(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper nname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, nname->c_str(), xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    if (m->mtype != MT_Static) {
        xsink->raiseException("METHOD-ERROR", "method '%s()' in class '%s' has type '%s'; expecting 'static'", nname->c_str(), c->cls->getName(), m->getType());
        return QoreValue();
    }

    return new QoreObject(QC_STATICMETHOD, m->pgm, m.release());
}

//! returns the given constructor method or throws an exception if the class does not implement a constructor method
/** @par Example:
    @code{.py}
ConstructorMethod m = cls.getConstructorMethod();
    @endcode

    @return the given constructor method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR the class does not implement a constructor method

    @see
    - getMethod()
    - getNormalMethod()
    - getStaticMethod()
    - getDestructorMethod()
    - getCopyMethd()
*/
ConstructorMethod Class::getConstructorMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, "constructor", xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    assert(m->mtype == MT_Constructor);

    return new QoreObject(QC_CONSTRUCTORMETHOD, m->pgm, m.release());
}

//! returns the given destructor method or throws an exception if the class does not implement a destructor method
/** @par Example:
    @code{.py}
DestructorMethod m = cls.getDestructorMethod();
    @endcode

    @return the given destructor method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR the class does not implement a destructor method

    @see
    - getMethod()
    - getNormalMethod()
    - getStaticMethod()
    - getConstructorMethod()
    - getCopyMethd()
*/
DestructorMethod Class::getDestructorMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, "destructor", xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    assert(m->mtype == MT_Destructor);

    return new QoreObject(QC_DESTRUCTORMETHOD, m->pgm, m.release());
}

//! returns the given copy method or throws an exception if the class does not implement a copy method
/** @par Example:
    @code{.py}
CopyMethod m = cls.getCopyMethod();
    @endcode

    @return the given copy method

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw METHOD-ERROR the class does not implement a copy method

    @see
    - getMethod()
    - getNormalMethod()
    - getStaticMethod()
    - getConstructorMethod()
    - getDestructorMethod()
*/
CopyMethod Class::getCopyMethod() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->cls, "copy", xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    assert(m->mtype == MT_Copy);

    return new QoreObject(QC_COPYMETHOD, m->pgm, m.release());
}

//! returns a list of all class methods including special and static methods
/** @par Example:
    @code{.py}
list<AbstractMethod> l = cls.getMethods();
    @endcode

    @return a list of all class methods including special and static methods

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<AbstractMethod> Class::getMethods() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreListNode> l(new QoreListNode(QC_ABSTRACTMETHOD->getTypeInfo()), xsink);

    QoreMethodIterator i(c->cls);
    while (i.next()) {
        ReferenceHolder<QoreReflectionMethod> m(new QoreReflectionMethod(c->pgm, i.getMethod()), xsink);
        l->push(get_method_object(m, xsink), xsink);
        if (*xsink) {
            return QoreValue();
        }
    }

    return l.release();
}

//! returns a list of all normal (non-static, non-special) class methods
/** @par Example:
    @code{.py}
list<NormalMethod> l = cls.getNormalMethods();
    @endcode

    @return a list of all normal (non-static, non-special) class methods

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<NormalMethod> Class::getNormalMethods() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreListNode> l(new QoreListNode(QC_ABSTRACTMETHOD->getTypeInfo()), xsink);

    QoreMethodIterator i(c->cls);
    while (i.next()) {
        const QoreMethod* m = i.getMethod();
        if (QoreReflectionMethod::getMethodType(m) != MT_Normal) {
            continue;
        }

        ReferenceHolder<QoreReflectionMethod> meth(new QoreReflectionMethod(c->pgm, i.getMethod()), xsink);
        l->push(get_method_object(meth, xsink), xsink);
        if (*xsink) {
            return QoreValue();
        }
    }

    return l.release();
}

//! returns a list of all class method variants including variants for special and static methods
/** @par Example:
    @code{.py}
list<AbstractMethodVariant> l = cls.getVariants();
    @endcode

    @return a list of all class method variants including variants for special and static methods

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<AbstractMethodVariant> Class::getVariants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> rv(new QoreListNode(QC_ABSTRACTMETHODVARIANT->getTypeInfo()), xsink);

    QoreMethodIterator i(c->cls);
    while (i.next()) {
        const QoreMethod* m = i.getMethod();
        append_variant_objects(**rv, c->pgm, qore_method_private::get(*m)->func,
            QoreReflectionMethod::getMethodType(m), xsink);
    }

    return rv.release();
}

//! returns a list of all normal (non-static, non-special) method variants
/** @par Example:
    @code{.py}
list<NormalMethodVariant> l = cls.getNormalVariants();
    @endcode

    @return a list of all normal (non-static, non-special) method variants

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<NormalMethodVariant> Class::getNormalVariants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> rv(new QoreListNode(QC_NORMALMETHODVARIANT->getTypeInfo()), xsink);

    QoreMethodIterator i(c->cls);
    while (i.next()) {
        const QoreMethod* m = i.getMethod();
        method_type_e mtype = QoreReflectionMethod::getMethodType(m);
        if (mtype != MT_Normal) {
            continue;
        }
        append_variant_objects(**rv, c->pgm, qore_method_private::get(*m)->func,
            mtype, xsink);
    }

    return rv.release();
}

//! returns a list of all static method variants
/** @par Example:
    @code{.py}
list<StaticMethodVariant> l = cls.getStaticVariants();
    @endcode

    @return a list of all static method variants

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<StaticMethodVariant> Class::getStaticVariants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> rv(new QoreListNode(QC_STATICMETHODVARIANT->getTypeInfo()), xsink);

    QoreMethodIterator i(c->cls);
    while (i.next()) {
        const QoreMethod* m = i.getMethod();
        method_type_e mtype = QoreReflectionMethod::getMethodType(m);
        if (mtype != MT_Static) {
            continue;
        }
        append_variant_objects(**rv, c->pgm, qore_method_private::get(*m)->func,
            mtype, xsink);
    }

    return rv.release();
}

//! returns a list of all constructor method variants
/** @par Example:
    @code{.py}
list<ConstructorMethodVariant> l = cls.getConstructorVariants();
    @endcode

    @return a list of all constructor method variants

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<ConstructorMethodVariant> Class::getConstructorVariants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> rv(new QoreListNode(QC_CONSTRUCTORMETHODVARIANT->getTypeInfo()), xsink);

    const QoreMethod* con = c->cls->getConstructor();

    if (con) {
        append_variant_objects(**rv, c->pgm, qore_method_private::get(*con)->func,
            MT_Constructor, xsink);
    }

    return rv.release();
}

//! returns the destructor variant or @ref nothing if no destructor has been defined
/** @par Example:
    @code{.py}
*DestructorMethodVariant dv = cls.getIfDestructorVariant();
    @endcode

    @return the destructor variant or @ref nothing if no destructor has been defined

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @see getDestructorVariant()
*/
*DestructorMethodVariant Class::getIfDestructorVariant() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const QoreMethod* destr = c->cls->getDestructor();

    if (destr) {
        const QoreFunction* func = qore_method_private::get(*destr)->func;
        const AbstractQoreFunctionVariant* v = func->first();
        if (v) {
            return get_variant_object(c->pgm, func, MT_Destructor, v, xsink);
        }
    }

    return QoreValue();
}

//! returns the copy method variant or @ref nothing if no copy method has been defined
/** @par Example:
    @code{.py}
*CopyMethodVariant dv = cls.getIfCopyVariant();
    @endcode

    @return the copy method variant or @ref nothing if no copy method has been defined

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed

    @note copy methods may not be overloaded, therefore if a copy method is defined, it will only have one variant

    @see getCopyVariant()
*/
*CopyMethodVariant Class::getIfCopyVariant() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const QoreMethod* copy = c->cls->getCopyMethod();

    if (copy) {
        const QoreFunction* func = qore_method_private::get(*copy)->func;
        const AbstractQoreFunctionVariant* v = func->first();
        if (v) {
            return get_variant_object(c->pgm, func, MT_Copy, v, xsink);
        }
    }

    return QoreValue();
}

//! Returns a list of immediate parent classes and access information; if the %Class has no parent classes, then an empty list is returned
/** @par Example:
    @code{.py}
list<hash<ClassAccessInfo>> l = cls.getParentClasses();
    @endcode

    @return a list of immediate parent classes and access information; if the %Class has no parent classes, then an empty list is returned

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<hash<ClassAccessInfo>> Class::getParentClasses() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> l(new QoreListNode(hashdeclClassAccessInfo->getTypeInfo()), xsink);

    const qore_class_private* qc = qore_class_private::get(*c->cls);

    if (qc->scl) {
        for (auto& i : *qc->scl) {
            ReferenceHolder<QoreHashNode> h(new QoreHashNode(hashdeclClassAccessInfo, nullptr), xsink);
            ReferenceHolder<QoreReflectionClass> pc(new QoreReflectionClass(c->pgm, i->sclass), xsink);

            h->setKeyValue("cls", new QoreObject(QC_CLASS, c->pgm, pc.release()), xsink);
            h->setKeyValue("access", get_access(i->access), xsink);
            h->setKeyValue("access_string", new QoreStringNode(get_access_string(i->access)), xsink);

            l->push(h.release(), xsink);
        }
    }

    return l.release();
}

//! returns the requested member or throws an exception if the member is not defined in the class
/**  @par Example:
    @code{.py}
AbstractMember m = cls.getMember(name);
    @endcode

    @return the requested member or throws an exception if the member is not defined in the class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw UNKNOWN-MEMBER if the requested member is not defined in the class
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - @ref getNormalMember()
    - @ref getStaticMember()
*/
AbstractMember Class::getMember(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper tname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    {
        const QoreMemberInfo* mi = qc->members.find(tname->c_str());
        if (mi) {
            return new QoreObject(QC_NORMALMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, tname->c_str(), mi, false));
        }
    }

    {
        const QoreVarInfo* vi = qc->vars.find(tname->c_str());
        if (vi) {
            return new QoreObject(QC_STATICMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, tname->c_str(), vi, true));
        }
    }

    xsink->raiseException("UNKNOWN-MEMBER", "member '%s' is not defined in class '%s'", tname->c_str(), c->cls->getName());
    return QoreValue();
}

//! returns the requested normal (non-static) member or throws an exception if the normal member is not defined in the class
/**  @par Example:
    @code{.py}
NormalMember m = cls.getNormalMember(name);
    @endcode

    @return the requested normal (non-static) member or throws an exception if the member is not defined in the class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw UNKNOWN-NORMAL-MEMBER if the requested normal (non-static) member is not defined in the class
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - @ref getMember()
    - @ref getStaticMember()
*/
NormalMember Class::getNormalMember(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper tname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    const QoreMemberInfo* mi = qc->members.find(tname->c_str());
    if (mi) {
        return new QoreObject(QC_NORMALMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, tname->c_str(), mi, false));
    }

    xsink->raiseException("UNKNOWN-NORMAL-MEMBER", "normal (non-static) member '%s' is not defined in class '%s'", tname->c_str(), c->cls->getName());
    return QoreValue();
}

//! returns the requested static member or throws an exception if the static member is not defined in the class
/**  @par Example:
    @code{.py}
StaticMember m = cls.getStaticMember(name);
    @endcode

    @return the requested static member or throws an exception if the member is not defined in the class

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw UNKNOWN-STATIC-MEMBER if the requested static member is not defined in the class
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion

    @see
    - @ref getMember()
    - @ref getNormalMember()
*/
StaticMember Class::getStaticMember(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper tname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    const QoreVarInfo* vi = qc->vars.find(tname->c_str());
    if (vi) {
        return new QoreObject(QC_STATICMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, tname->c_str(), vi, true));
    }

    xsink->raiseException("UNKNOWN-STATIC-MEMBER", "static member '%s' is not defined in class '%s'", tname->c_str(), c->cls->getName());
    return QoreValue();
}

//! returns a list of all declared class members, non-static (first) and static (second) in declaration order
/** @par Example:
    @code{.py}
list<AbstractMember> l = cls.getMembers();
    @endcode

    @return a list of all declared class members, non-static (first) and static (second) in declaration order

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<AbstractMember> Class::getMembers() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> l(new QoreListNode(QC_ABSTRACTMEMBER->getTypeInfo()), xsink);

    const qore_class_private* qc = qore_class_private::get(*c->cls);
    // first get non-static members
    for (QoreMemberMap::DeclOrderIterator i = qc->members.beginDeclOrder(), e = qc->members.endDeclOrder(); i != e; ++i) {
        l->push(new QoreObject(QC_NORMALMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, i->first, i->second, false)), xsink);
    }

    // now get static members
    for (QoreVarMap::DeclOrderIterator i = qc->vars.beginDeclOrder(), e = qc->vars.endDeclOrder(); i != e; ++i) {
        l->push(new QoreObject(QC_STATICMEMBER, c->pgm, new QoreReflectionMember(c->pgm, c->cls, i->first, i->second, true)), xsink);
    }

    return l.release();
}

//! Returns the given class constant or throws an exception if the constant is not defined
/** @par Example:
    @code{.py}
ClassConstant con = cls.getConstant(name);
    @endcode

    @return given class constant or throws an exception if the constant is not defined

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
    @throw UNKNOWN-CONSTANT thrown if the constant cannot be found
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion
*/
ClassConstant Class::getConstant(string name) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper tname(name, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    const qore_class_private* qc = qore_class_private::get(*c->cls);
    const ConstantEntry* ce = qc->constlist.findEntry(tname->c_str());
    if (!ce) {
        xsink->raiseException("UNKNOWN-CONSTANT", "constant '%s' is not defined in class '%s'", tname->c_str(), c->cls->getName());
        return QoreValue();
    }

    return new QoreObject(QC_CLASSCONSTANT, c->pgm, new QoreReflectionClassConstant(c->pgm, ce, c->cls));
}

//! Returns a list of all declared class constants
/** @par Example:
    @code{.py}
list<ClassConstant> l = cls.getConstants();
    @endcode

    @return a list of all declared class constants

    @throw PROGRAM-ERROR thrown if the @ref Qore::Program "Program" object holding the class has been destroyed
*/
list<ClassConstant> Class::getConstants() [flags=RET_VALUE_ONLY] {
    // get read access to program object
    ProgramThreadCountContextHelper tch(xsink, c->pgm, true);
    if (*xsink) {
        return QoreValue();
    }

    // the class ptr must be valid
    ReferenceHolder<QoreListNode> l(new QoreListNode(QC_CLASSCONSTANT->getTypeInfo()), xsink);

    const qore_class_private* qc = qore_class_private::get(*c->cls);

    for (auto& i : qc->constlist.cnemap) {
        l->push(new QoreObject(QC_CLASSCONSTANT, c->pgm, new QoreReflectionClassConstant(c->pgm, i.second, c->cls)), xsink);
    }

    return l.release();
}

//! Returns a %Class object from the class name or namespace-justified path as a string
/** @par Example:
    @code{.py}
Class cls = Class::forName("Thread::Mutex");
    @endcode

    @param path the class name or namespace-justified path as a string

    @return a class object corresponding to the name or namespace-justified path provided as an argument

    @throw CLASS-ERROR cannot find a class with the given name or path
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if the string argument is not in the @ref default_encoding "default character encoding" and an error occurs during encoding conversion
 */
static Class Class::forName(string path) [flags=RET_VALUE_ONLY] {
    TempEncodingHelper npath(path, QCS_DEFAULT, xsink);
    if (*xsink) {
        return QoreValue();
    }

    ReferenceHolder<QoreReflectionClass> cls(new QoreReflectionClass(npath->c_str(), xsink), xsink);
    if (*xsink) {
        return QoreValue();
    }

    return new QoreObject(QC_CLASS, getProgram(), cls.release());
}
