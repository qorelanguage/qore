/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
    Pseudo_QC_callref.qpp

    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>

//! Methods in this pseudo-class can be executed on @ref call_reference "call references"
/**
 */
qclass <callref> [arg=const ResolvedCallReferenceNode* c = v.get<ResolvedCallReferenceNode>();vparent=<value>];

//! Returns Qore::NT_CALLREF
/**
    @par Example:
    @code{.py}
switch (c.typeCode()) {
    case NT_CALLREF:
        printf("%y: is a call reference\n", c);
        break;
}
    @endcode

    @return Qore::NT_CALLREF
*/
int <callref>::typeCode() [flags=CONSTANT] {
    return NT_FUNCREF;
}

//! Returns @ref True
/**
    @par Example:
    @code{.py}
bool b = c.val();
    @endcode

    @return @ref True

    @see
    - @ref perl-bool-eval "%perl-bool-eval"
    - @ref strict-bool-eval "%strict-bool-eval"
*/
bool <callref>::val() [flags=CONSTANT] {
    return true;
}

//! Evaluates the code with the arguments given and returns the result
/** @param ... the arguments to the code to be called

    @return the return value of the code called
*/
auto <callref>::exec(...) {
    c->execValue(args, xsink);
}

//! Returns @ref True because this is a callable type
/**
    @par Example:
    @code{.py}
if (n.callp())
    printf("the result of calling the value: %y\n", n());
    @endcode

    @return @ref True because this is a callable type
*/
bool <callref>::callp() [flags=CONSTANT] {
    return true;
}
