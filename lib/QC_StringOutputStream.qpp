/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_StringOutputStream.qpp StringOutputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/StringOutputStream.h"

//! This class implements the @ref OutputStream interface for writing bytes to a @ref string buffer
/** @since %Qore 0.8.13

    @par Example: StringOutputStream basic usage
    @code{.py}
    StringOutputStream sos();
    sos.write(<41>);
    sos.write(<42>);
    sos.write(<43>);
    sos.getData();      # returns "ABC"
    @endcode
 */
qclass StringOutputStream [arg=StringOutputStream* os; ns=Qore; vparent=OutputStream; flags=final];

//! Creates the StringOutputStream
/** This variant assumes the @ref default_encoding for the string

    @note raw binary data will be written to the string; it's up to the caller to ensure that only valid character data for the given encoding is written to the @ref StringOutputStream object, otherwise a string with invalid character data will be returned by getData()
 */
StringOutputStream::constructor() {
   SimpleRefHolder<StringOutputStream> sos(new StringOutputStream());
   self->setPrivate(CID_STRINGOUTPUTSTREAM, sos.release());
}

//! Creates the StringOutputStream
/** @param encoding the encoding to tag the string data with

    @note raw binary data will be written to the string; it's up to the caller to ensure that only valid character data for the given encoding is written to the @ref StringOutputStream object, otherwise a string with invalid character data will be returned by getData()
 */
StringOutputStream::constructor(string encoding) {
   SimpleRefHolder<StringOutputStream> sos(new StringOutputStream(QEM.findCreate(encoding)));
   self->setPrivate(CID_STRINGOUTPUTSTREAM, sos.release());
}

//! Closes the output stream and releases any resources.
/** Any methods called on a closed output stream will throw an exception.
 */
nothing StringOutputStream::close() {
   os->closeHelper(xsink);
}

//! Writes bytes to the output stream
/**
    @param data the data to write

    @par Example:
    @code{.py}
    StringOutputStream sos();
    sos.write(<41>);
    sos.write(<42>);
    sos.write(<43>);
    sos.getData();      # returns "ABC"
    @endcode
 */
nothing StringOutputStream::write(binary data) {
   os->writeHelper(data, xsink);
}

//! Writes string data to the output stream
/**
    @param data the data to write

    @par Example:
    @code{.py}
    StringOutputStream sos();
    sos.write("ABC");
    sos.getData();      # returns "ABC"
    @endcode

    @note the input string is converted to the output stream's character_encoding "character encoding" if necessary

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to the output stream's character_encoding "character encoding"
 */
nothing StringOutputStream::write(string data) {
   TempEncodingHelper dstr(data, os->getEncoding(), xsink);
   if (*xsink)
      return QoreValue();

   os->writeHelper(*dstr, xsink);
}

//! Writes formatted string data to the output stream
/**
    @param fmt the @ref string_formatting "format string"
    @param ... the argument(s) corresponding to format specifiers in the format string

    @par Example:
    @code{.py}
    StringOutputStream sos();
    sos.printf("AB%s", "C");
    sos.getData();      # returns "ABC"
    @endcode

    @note the input string is converted to the output stream's character_encoding "character encoding" if necessary

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to the output stream's character_encoding "character encoding"
 */
nothing StringOutputStream::printf(string fmt, ...) {
   TempEncodingHelper nfmt(fmt, os->getEncoding(), xsink);
   if (*xsink)
      return QoreValue();

   QoreStringNodeHolder str(q_sprintf(args, 1, 0, xsink));
   if (*xsink) {
      assert(!str);
      return 0;
   }
   assert(str);

   os->writeHelper(*str, xsink);
}

//! Returns the data written to the stream, clearing the internal buffer
/**
    @return the data written to the @ref StringOutputStream

    @par Example:
    @code{.py}
    StringOutputStream sos();
    sos.write(<41>);
    sos.write(<42>);
    sos.write(<43>);
    sos.getData();      # returns "ABC"
    @endcode
 */
string StringOutputStream::getData() {
   return os->getData(xsink);
}

//! Returns the @ref character_encoding "character encoding" for the @ref StringOutputStream
/** @par Example:
    @code{.py}
StringOutputStream sos("latin1");
string encoding = sos.getEncoding();
    @endcode

    @return the @ref character_encoding "character encoding" for the @ref StringOutputStream
 */
string StringOutputStream::getEncoding() [flags=CONSTANT] {
   return new QoreStringNode(os->getEncoding());
}
