/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
    QC_Serializable.qpp

    Qore Programming Language

    Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>
#include "qore/intern/QC_Serializable.h"

//! object serialization information
/**
    @since %Qore 0.9
*/
hashdecl SerializationInfo {
    //! class path name
    string _class;

    //! unique object index
    *hash<string, hash<SerializationInfo>> _index;

    //! member values per class; class path -> member hash
    hash<string, hash<string, auto>> _members;
}

//! The Serializable class can be used to mark a class as being serializable
/** This class serves two purposes; to mark classes as serializable and then to implement
    the actual serialization and deserialization methods.

    This class may also be inherited as @ref inheritance "private:internal" to mark it as
    serializable (in this case the serialization methods are only available inside the class
    itself).

    Classes that do not inherit this class cannot be serialized; if any non-tranient member
    of a serializable class holds an object from a class that does not inherit this class,
    a \c SERIALIZATION-ERROR will be thrown when the object is serialized.

    Furthermore any attempt to serialize a @ref closure "closures",
    @ref call_reference "call references", or a @ref lvalue_references "reference" will
    result in a \c SERIALIZATION-ERROR as well.

    @since %Qore 0.9
 */
qclass Serializable [arg=QoreSerializable* s];

//! The constructor does not perform any action; this class is just used to mark a class as serializable by inheriting this class
/**
 */
Serializable::constructor() {
   self->setPrivate(CID_SERIALIZABLE, new QoreSerializable);
}

//! The copy constructor does not perform any action; this class is just used to mark a class as serializable by inheriting this class
/**
 */
Serializable::copy() {
   self->setPrivate(CID_SERIALIZABLE, new QoreSerializable);
}

//! converts the object to a serialization hash representing the object
/** @par Example:
    @code{.py}
hash<SerializationInfo> h = obj.serializeToData();
    @endcode

    @retun a serialization hash representing object

    All non-serializable data such as @ref closure "closures", @ref call_reference "call references",
    @ref lvalue_references "references", or non-serializable objects must be tagged as @ref transient
    or a \c SERIALIZATION-ERROR exception will be thrown.

    @throw SERIALIZATION-ERROR the object cannot be serialized as it contains non-serializable data
    (@ref closure "closures", @ref call_reference "call references", @ref lvalue_references "references",
    and non-serializable objects)
*/
hash<SerializationInfo> Serializable::serializeToData() [flags=RET_VALUE_ONLY] {
    return s->serializeToData(self, xsink);
}

//! converts the object to a binary object representing the object
/** @par Example:
    @code{.py}
binary b = obj.serialize();
    @endcode

    @retun a binary object representing object

    All non-serializable data such as @ref closure "closures", @ref call_reference "call references",
    @ref lvalue_references "references", or non-serializable objects must be tagged as @ref transient
    or a \c SERIALIZATION-ERROR exception will be thrown.

    @throw SERIALIZATION-ERROR the object cannot be serialized as it contains non-serializable data
    (@ref closure "closures", @ref call_reference "call references", @ref lvalue_references "references",
    and non-serializable objects)
*/
binary Serializable::serialize() [flags=RET_VALUE_ONLY] {
    return s->serialize(self, xsink);
}

//! Deserializes data produced with serialize() and returns the object represented by the data
/** @par Example:
    @code{.py}
object obj = Serializable::deserialize(b);
    @endcode

    @param data the data representing the object as generated by serialize()

    @return the object represented by the data

    @throw DESERIALIZATION-ERROR the data cannot be deserialized due to an error in the serialization format or a reference to an unknown class or @ref hashdecl
 */
static object Serializable::deserialize(binary b) {
    return QoreSerializable::deserialize(b, xsink);
}

//! Deserializes data produced with serializeToData() and returns the object represented by the data
/** @par Example:
    @code{.py}
object obj = Serializable::deserialize(h);
    @endcode

    @param data the data representing the object as generated by serializeToData()

    @return the object represented by the data

    @throw DESERIALIZATION-ERROR the data cannot be deserialized due to an error in the serialization format or a reference to an unknown class or @ref hashdecl
 */
static object Serializable::deserialize(hash<SerializationInfo> data) {
    return QoreSerializable::deserialize(data, xsink);
}

