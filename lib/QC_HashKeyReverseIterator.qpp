/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_HashKeyReverseIterator.qpp HashKeyReverseIterator class definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2018 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/QoreHashIterator.h"

extern QoreClass* QC_HASHREVERSEITERATOR;

//! This class an iterator class for hashes
/** Call HashKeyReverseIterator::next() to iterate through the hash in reverse order; do not use the iterator if HashKeyReverseIterator::next() returns @ref False.
    A hash can be iterated in reverse order by calling HashKeyReverseIterator::prev() instead of HashKeyReverseIterator::next()

    @par Example: HashKeyReverseIterator basic usage
    @code{.py}
    hash data = (
            "key1" : 1,
            "key2" : 2,
            "key3" : 3,
        );

    HashKeyReverseIterator it(data);
    while (it.next()) {
        printf("iter: %n\n", it.getValue());
    }

    iter: "key3"
    iter: "key2"
    iter: "key1"
    @endcode

    @note
    - In general, the HashKeyReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - HashKeyReverseIterator is functionally equivalent to HashKeyIterator, but the effect of HashKeyReverseIterator::next() and HashKeyReverseIterator::prev()
      are the opposite of HashKeyIterator::next() and HashKeyIterator::prev(); that is HashKeyReverseIterator::next() will
      iterate through the hash in reverse order, while HashKeyReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for HashKeyReverseIterator::first() and HashKeyReverseIterator::last()
      are swapped in respect to HashKeyIterator::first() and HashKeyIterator::last().

    @see HashKeyIterator
 */
qclass HashKeyReverseIterator [arg=QoreHashReverseIterator* i; ns=Qore; vparent=HashReverseIterator];

//! Creates the hash iterator object
/** @param h the hash to iterate

    @par Example:
    @code{.py}
HashKeyReverseIterator hi(h);
    @endcode
 */
HashKeyReverseIterator::constructor(hash h) {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator(h));
}

//! Creates an empty iterator object
/** @par Example:
    @code{.py}
*hash h = get_hash_or_nothing();
HashKeyReverseIterator hi(h);
    @endcode
 */
HashKeyReverseIterator::constructor() {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator);
}

//! Creates a copy of the HashKeyReverseIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code{.py}
HashKeyReverseIterator ni = i.copy();
    @endcode
 */
HashKeyReverseIterator::copy() {
   self->setPrivate(CID_HASHKEYREVERSEITERATOR, new QoreHashReverseIterator(*i));
}

//! returns the current key value or throws an \c INVALID-ITERATOR exception if the iterator is invalid
/** @return the current key value or throws an \c INVALID-ITERATOR exception if the iterator is invalid

    @par Example:
    @code{.py}
HashKeyReverseIterator hi(hash);
while (hi.next())
    printf("key: %s\n", hi.getValue());
    @endcode

    @throw INVALID-ITERATOR the iterator is not pointing at a valid element
    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
string HashKeyReverseIterator::getValue() [flags=RET_VALUE_ONLY] {
   if (i->check(xsink))
      return QoreValue();
   return i->getKey(xsink);
}
