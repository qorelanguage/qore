/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_PipeInputStream.qpp PipeInputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/StreamPipe.h"

//! This class is not intended to be instantiated directly, please see @ref StreamPipe
/** @note stream classes are not designed to be accessed from multiple threads; they have been implemented without locking for fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c STREAM-THREAD-ERROR to be thrown.

    @see
    - @ref Qore::StreamReader "StreamReader" for a class that can be used to read various kinds of data from an @ref Qore::InputStream "InputStream"
    - StreamPipe

    @since %Qore 0.8.13
 */
qclass PipeInputStream [arg=PipeInputStream* is; ns=Qore; vparent=InputStream; flags=final];

//! Creates the PipeInputStream
/**
 */
private PipeInputStream::constructor() {
   assert(false);
}

//! Reads bytes (up to a specified limit) from the input stream; returns \ref NOTHING if there are no more bytes in the stream
/**
    @throw INPUT-STREAM-ERROR \a limit is not positive
 */
*binary PipeInputStream::read(int limit) {
   if (limit <= 0) {
      xsink->raiseException("INPUT-STREAM-ERROR", "PipeInputStream::read() called with non-positive limit %lld", limit);
      return 0;
   }
   SimpleRefHolder<BinaryNode> result(new BinaryNode());
   result->preallocate(limit);
   int64 count = is->read(const_cast<void *>(result->getPtr()), limit, xsink);
   result->setSize(count);
   return count ? result.release() : 0;
}

//! Peeks the next byte available from the input stream; returns -1 if no more data available
/** @return the next byte available from the input stream or -1 if no more data is available
 */
int PipeInputStream::peek() {
   SimpleRefHolder<QoreBigIntNode> result(new QoreBigIntNode());
   int64 res = is->peek(xsink);
   if (*xsink)
      return result.release();
   result->val = res;
   return result.release();
}

//! Call when the background operation is finished to wakeup PipeOutputStream::close().
/**
 */
nothing PipeInputStream::finishClose() {
   is->finishClose();
}

//! Causes all operations on both pipe streams to wake up and throw an exception.
/** Normally used from the background thread to report an error to the main thread.
    @param ex the exception, must contain strings 'err' and 'desc'
 */
nothing PipeInputStream::reportError(hash ex) {
   is->reportError(ex);
}

//! Reassigns current thread as thread used for stream manipulation
/**
	The method does nothing in this class 
 */
nothing PipeInputStream::reassignThread() {
	is->reassignThread(xsink);
}
