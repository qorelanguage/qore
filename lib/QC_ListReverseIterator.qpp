/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_ListReverseIterator.qpp ListReverseIterator class definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2015 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/QoreListIterator.h"

extern QoreClass* QC_LISTITERATOR;

// internal reverse iterator class implementation only for the getName() function - the iterators remain
// forwards and are used in the reverse sense by the Qore language class implementation below
class QoreListReverseIterator : public QoreListIterator {
public:
   DLLLOCAL QoreListReverseIterator(const QoreListNode* l) : QoreListIterator(l) {
   }

   DLLLOCAL QoreListReverseIterator(const QoreListReverseIterator& old) : QoreListIterator(old) {
   }

   DLLLOCAL virtual const char* getName() const {
      return "ListReverseIterator";
   }
};

//! This class an iterator class for lists
/** Call ListReverseIterator::next() to iterate through the list in reverse order; do not use the iterator if ListReverseIterator::next() returns @ref False.
    A list can be iterated in reverse order by calling ListReverseIterator::prev() instead of ListReverseIterator::next()

    @par Example: ListIterator basic usage
    @code{.py}
    list data = (1, "foo", 2);
    ListReverseIterator it(data);
    while (it.next()) {
        printf("iter: %n\n", it.getValue());
    }

    iter: 2
    iter: "foo"
    iter: 1
    @endcode

    @note
    - In general, the ListReverseIterator class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause an \c ITERATOR-THREAD-ERROR to be thrown.
    - ListReverseIterator is functionally equivalent to ListIterator, but the effect of ListReverseIterator::next() and ListReverseIterator::prev()
      are the opposite of ListIterator::next() and ListIterator::prev(); that is ListReverseIterator::next() will
      iterate through the list in reverse order, while ListReverseIterator::prev() iterates in forward order.
      Additionally the meanings of the return values for ListReverseIterator::first() and ListReverseIterator::last()
      are swapped in respect to ListIterator::first() and ListIterator::last().

    @see ListIterator
 */
qclass ListReverseIterator [arg=QoreListReverseIterator* i; ns=Qore; vparent=ListIterator];

//! Creates the list iterator object
/** @param l the list to iterate

    @par Example:
    @code{.py}
ListReverseIterator li(l);
    @endcode

    @note the constructor's argument is @ref softlist_type "softlist" so that it can also accept @ref nothing
 */
ListReverseIterator::constructor(softlist l) {
   self->setPrivate(CID_LISTREVERSEITERATOR, new QoreListReverseIterator(l));
}

//! Creates a copy of the ListReverseIterator object, iterating the same object as the original and in the same position
/** @par Example:
    @code{.py}
ListReverseIterator ni = i.copy();
    @endcode
 */
ListReverseIterator::copy() {
   self->setPrivate(CID_LISTREVERSEITERATOR, new QoreListReverseIterator(*i));
}

//! Moves the current position to the previous element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the last element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if the list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.prev()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @note ListReverseIterator::next() is the opposite of ListIterator::next(); it is functionally equivalent to ListIterator::prev();
    ListReverseIterator::next() iterates through the list in reverse order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListReverseIterator::next() {
   if (i->check(xsink))
      return QoreValue();
   return i->prev();
}

//! Moves the current position to the next element in the list; returns @ref False if there are no more elements; if the iterator is not pointing at a valid element before this call, the iterator will be positioned on the first element in the list if the list is not empty
/** This method will return @ref True again after it returns @ref False once if list is not empty, otherwise it will always return @ref False.
    The iterator object should not be used after this method returns @ref False

    @return @ref False if there are no more elements in the list (in which case the iterator object is invalid and should not be used); @ref True if successful (meaning that the iterator object is valid)

    @par Example:
    @code{.py}
while (i.next()) {
    printf(" + %y\n", i.getValue());
}
    @endcode

    @note ListReverseIterator::prev() is the opposite of ListIterator::prev(); it is functionally equivalent to ListIterator::next();
    ListReverseIterator::prev() iterates through the list in forward order

    @throw ITERATOR-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
bool ListReverseIterator::prev() {
   if (i->check(xsink))
      return QoreValue();
   return i->next();
}

//! returns @ref True if on the first element iterated with this iterator (ie the last element in the list)
/** @return @ref True if on the first element iterated with this iterator (ie the last element in the list)

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.first())
        printf("START:\n");
}
    @endcode
 */
bool ListReverseIterator::first() [flags=CONSTANT] {
   return i->last();
}

//! returns @ref True if on the last element iterated with this iterator (ie the first element in the list)
/** @return @ref True if on the last element iterated with this iterator (ie the first element in the list)

    @par Example:
    @code{.py}
while (i.next()) {
    if (i.last())
        printf("END.\n");
}
    @endcode
 */
bool ListReverseIterator::last() [flags=CONSTANT] {
   return i->first();
}
