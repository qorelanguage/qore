/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_InputStream.qpp InputStream class (interface) definition */
/*
  Qore Programming Language

  Copyright (C) 2003 - 2016 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "qore/intern/InputStreamWrapper.h"

//! This class defines an abstract interface for input streams
/** Classes inheriting this class can be used to read bytes from various sources.

    @since %Qore 0.8.12
 */
qclass InputStream [arg=InputStream* is; ns=Qore];

//! Constructor
/** Used by subclasses defined in the Qore programming language.
 */
InputStream::constructor() {
   self->setPrivate(CID_INPUTSTREAM, new InputStreamWrapper(self));
}

//! Closes the input stream and releases any resources.
/** Any methods called on a closed input stream will thrown an IO-ERROR exception.

    @throw IO-ERROR if an I/O error occurs
 */
abstract nothing InputStream::close();

//! Reads a single byte from the input stream; returns -1 if the end of the stream has been reached
/**
    @param timeout_ms a timeout period with a resolution of milliseconds (a @ref relative_dates "relative date/time value"; integer arguments will be assumed to be milliseconds); if not given or negative the call will never time out
    @return the next byte (0 - 255) in the input stream or -1 if the end of the stream has been reached

    @par Example:
    @code{.py}
    while ((int i = is.read()) != -1) {
        printf("Read: %y\n", i);
    }
    @endcode

    @throw IO-ERROR if an I/O error occurs
    @throw TIMEOUT-ERROR if no byte could be read in the specified timeout
 */
abstract int InputStream::read(timeout timeout_ms = -1);

//! Reads bytes (up to a specified limit) from the input stream; returns \ref NOTHING if there are no more bytes in the stream
/**

    @param limit the maximum number of bytes to read
    @param timeout_ms a timeout period with a resolution of milliseconds (a @ref relative_dates "relative date/time value"; integer arguments will be assumed to be milliseconds); if not given or negative the call will never time out
    @return the read bytes (the length is between 1 and `limit` inclusive) or \ref NOTHING if no more bytes are available

    @par Example:
    @code{.py}
    *binary b;
    while (b = is.bulkRead(10)) {
        printf("Read: %y\n", i);
    }
    @endcode

    @throw IO-ERROR if an I/O error occurs
    @throw TIMEOUT-ERROR if no byte could be read in the specified timeout
 */
abstract *binary InputStream::bulkRead(int limit, timeout timeout_ms = -1);

/** @defgroup input_stream_function Input Stream Functions
 */
//@{
namespace Qore;

//! Dumps an input stream to stdout by reading individual bytes from the stream until the end is reached
/** Temporary function for debugging purposes
    @param the input stream
 */
nothing dump(Qore::InputStream[InputStream] is) {
   ReferenceHolder<InputStream> holder(is, xsink);

   int i;

   printf("read() from C++:");
   while ((i = is->read(-1, xsink)) != -1) {
      printf(" %d", i);
   }
   printf("\n");
}

//! Dumps an input stream to stdout by bulk reading bytes (two at a time) from the stream until the end is reached
/** Temporary function for debugging purposes
    @param the input stream
 */
nothing dump_bulk(Qore::InputStream[InputStream] is) {
   ReferenceHolder<InputStream> holder(is, xsink);
   int64 i;
   uint8_t buf[10];

   printf("bulkRead() from C++:");
   while ((i = is->bulkRead(buf, 2, -1, xsink)) > 0) {
      printf(" (%d", buf[0]);
      for (int64 ii = 1; ii < i; ++ii) {
         printf(" %d", buf[ii]);
      }
      printf(")");
   }
   printf("\n");
}
//@}
