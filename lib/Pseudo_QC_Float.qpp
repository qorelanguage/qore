/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  Pseudo_QC_Float.qpp

  Qore Programming Language

  Copyright (C) 2003 - 2015 David Nichols

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>

#include <math.h>

//! Methods in this pseudo-class can be executed on @ref float "floating-point values"
/**
 */
qclass <float> [arg=double f = v.getAsFloat();vparent=<value>];

//! Returns Qore::NT_FLOAT
/**
    @return Qore::NT_FLOAT

    @par Example:
    @code{.py}
switch (f.typeCode()) {
    case NT_FLOAT:
        printf("%y: is a float\n", f);
        break;
}
    @endcode
*/
int <float>::typeCode() [flags=CONSTANT] {
   return NT_FLOAT;
}

//! Returns @ref True if the float is non-zero, @ref False if zero
/**
    @return @ref True if the float is non-zero, @ref False if zero

    @par Example:
    @code{.py}
bool b = f.val();
    @endcode

    @see
    - @ref perl-bool-eval "%perl-bool-eval"
    - @ref strict-bool-eval "%strict-bool-eval"
*/
bool <float>::val() [flags=CONSTANT] {
   return (bool)f == 0.0 ? false : true;
}

//! Returns @ref True because float values can be converted to integers
/**
    @return @ref True because float values can be converted to integers

    @par Example:
    @code{.py}
if (n.intp())
    printf("%y: can be converted to an integer: %d\n", n, int(n));
    @endcode
*/
bool <float>::intp() [flags=CONSTANT] {
   return true;
}

//! Returns @ref True because float values can be converted to strings
/**
    @return @ref True because float values can be converted to strings

    @par Example:
    @code{.py}
if (n.strp())
    printf("%y: can be converted to a string: '%s'\n", n, string(n));
    @endcode
*/
bool <float>::strp() [flags=CONSTANT] {
   return true;
}

//! Returns a string of a formatted number according to a format string
/** @param fmt the format string has the following format:\n
    <em>\<thousands_separator\></em><tt>[</tt><em>\<decimal_separator\>\<decimals\></em><tt>]</tt>\n
    where:\n
    - \a thousands_separator and \a decimal_separator are single ASCII characters defining the thousands and decimal separator characters respectively, and
    - \a decimals is a single digit defining how may decimals should appear after the decimal point

    @return a string of a formatted number according to a format string; if the format string does not follow the given format, then an empty string is returned

    @par Example:
    @code{.py}
float f = -48392093894.2349;
string nstr = f.format(".,3"); # returns "-48.392.093.894,235"
    @endcode

    @note equivalent to format_number(string, softfloat)

    @since %Qore 0.8.6
 */
string <float>::format(string fmt) [flags=CONSTANT] {
   return format_float_intern(*fmt, f);
}

//! Returns @ref True if the number is NaN (not a number)
/**
    @return @ref True if the number is NaN (not a number)

    @par Example:
    @code{.py}
if (f.nanp())
    print("the operation resulted in NaN\n");
    @endcode

    @since %Qore 0.8.12
*/
bool <float>::nanp() [flags=CONSTANT] {
   return isnan(f) != 0;
}

//! Returns @ref True if the number is infinity (+ or -)
/**
    @return @ref True if the number is infinity (+ or -)

    @par Example:
    @code{.py}
if (f.infp())
    print("the operation resulted in infinity\n");
    @endcode

    @since %Qore 0.8.12
*/
bool <float>::infp() [flags=CONSTANT] {
   return isinf(f) != 0;
}

//! Returns -1 if the number is negative, 0 if it is zero, or 1 if it is positive
/** @return -1 if the number is negative, 0 if it is zero, or 1 if it is positive

    @par Example:
    @code{.py}
printf("sign: %d\n", f.sign());
    @endcode

    @since %Qore 0.8.6
*/
int <float>::sign() [flags=CONSTANT] {
   if (!f)
      return 0;
   return f > 0.0 ? 1 : -1;
}

//! Returns the absolute value of the number
/** @par Example:
    @code{.py}
f = f.abs();
    @endcode

    @return the absolute value of the number

    @note equivalent to abs(float)

    @since %Qore 0.8.8
*/
float <float>::abs() [flags=CONSTANT] {
   return fabs(f);
}
