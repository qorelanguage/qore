/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_TransformInputStream.qpp TransformInputStream class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 - 2017 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include "qore/Qore.h"
#include "qore/intern/TransformInputStream.h"
#include "qore/intern/QoreObjectIntern.h"
#include "qore/intern/QoreClassIntern.h"

extern qore_classid_t CID_TRANSFORM;
extern QoreClass* QC_TRANSFORM;

//! This class implements the @ref InputStream interface for reading bytes from another InputStream while applying a transformation
/**
    @note stream classes are not designed to be accessed from multiple threads; they have been implemented without locking for fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c STREAM-THREAD-ERROR to be thrown.

    @see @ref Qore::StreamReader "StreamReader" for a class that can be used to read various kinds of data from an @ref Qore::InputStream "InputStream"

    @since %Qore 0.8.13
 */
qclass TransformInputStream [arg=TransformInputStream* is; ns=Qore; vparent=InputStream; flags=final; internal_members=InputStream is,Transform t];

//! Creates the TransformInputStream
/**
    @param is the underlying @ref InputStream where the data to transform will be read from
    @param t the transformation to apply
 */
TransformInputStream::constructor(Qore::InputStream[InputStream] is, Qore::Transform[Transform] t) {
   SimpleRefHolder<TransformInputStream> tis(new TransformInputStream(is, t));
   self->setPrivate(CID_TRANSFORMINPUTSTREAM, tis.release());
   qore_object_private* o = qore_object_private::get(*self);
   const qore_class_private* cls = qore_class_private::get(*QC_TRANSFORMINPUTSTREAM);
   o->setValueIntern(cls, "is", static_cast<QoreObject *>(obj_is->refSelf()), xsink);
   o->setValueIntern(cls, "t", static_cast<QoreObject *>(obj_t->refSelf()), xsink);
}

//! Reads bytes (up to a specified limit) from the input stream; returns \ref NOTHING if there are no more bytes in the stream
/**
    @param limit the maximum number of bytes to read

    @return the read bytes (the length is between 1 and `limit` inclusive) or \ref NOTHING if no more bytes are available

    @throw INPUT-STREAM-ERROR \a limit is not positive
    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
*binary TransformInputStream::read(int limit) {
   return is->readHelper(limit, xsink);
}

//! Peeks the next byte available from the input stream; returns -1 if no more data available
/**
    @return the next byte available from the input stream or -1 if no more data is available

    @par Example:
    @code{.py}
    int nextByte = transformStream.peek();
    @endcode

    @throw STREAM-THREAD-ERROR this exception is thrown if this method is called from any thread other than the thread that created the object
 */
int TransformInputStream::peek() {
   return is->peekHelper(xsink);
}

//! Reassigns current thread as thread used for stream manipulation
/**
	Only from one thread the stream instance may be used as there is no locking 
 */
nothing TransformInputStream::reassignThread() {
	is->reassignThread(xsink);
}

//! Unassigns current thread as thread used for stream manipulation
/**
	Only from one thread the stream instance may be used as there is no locking 
 */
nothing TransformInputStream::unassignThread() {
	is->unassignThread(xsink);
}
