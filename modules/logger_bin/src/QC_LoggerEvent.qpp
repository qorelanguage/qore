/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_LoggerEvent.cpp LoggerEvent class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2024 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include "qore_logger.h"

#include "QC_LoggerEvent.h"
#include "QC_LoggerLevel.h"

//! Abstract class that defines the interface for logger events
/** Event data (@ref LoggerEvent) are formatted before the record is passed to the target
*/
qclass LoggerEvent [ns=Qore::Logger; arg=QoreLoggerEvent* event; internal_members=*Logger logger];

//! Instantiates a LoggingEvent from the supplied parameters.
/**
    The category becomes logger name and fqcn logger class name

    @param logger Instance of the Logger class
    @param level The event level
    @param message The payload as format for @ref Qore::sprintf() "sprintf()"
    @param msg_args The arguments for formatting
    @param location_info code location related to logging event
    @param thread_id thread related to the event, Default: @ref Qore::gettid() "gettid()"
    @param time_stamp logging event timestamp. Default value is @ref Qore::now_us() "now_us()"
    @param throwable The throwable @ref Qore::ExceptionInfo "ExceptionInfo" associated with the logging event
*/
LoggerEvent::constructor(object logger, LoggerLevel[QoreLoggerLevel] level, string message,
        *list<auto> msg_args, *hash<CallStackInfo> location_info, *int thread_id, *date time_stamp,
        *hash<ExceptionInfo> throwable) {
    //ReferenceHolder<AbstractPrivateData> hlogger(logger, xsink);
    ReferenceHolder<AbstractPrivateData> hlevel(level, xsink);

    if (!thread_id) {
        thread_id = q_gettid();
    }

    SimpleRefHolder<DateTimeNode> ts;
    if (!time_stamp) {
        ts = DateTimeNode::makeNow();
    }

    ValueHolder v(logger->evalMethod("getName", nullptr, xsink), xsink);
    if (*xsink) {
        return;
    }
    assert(v);
    assert(v->getType() == NT_STRING);

    self->setPrivate(CID_LOGGEREVENT, new QoreLoggerEvent(logger, v->get<const QoreStringNode>(), obj_level, level,
        message, msg_args, 0, location_info, thread_id, time_stamp ? time_stamp : *ts, throwable));

    self->setValue("logger", logger->objectRefSelf(), nullptr);
}

//! Instantiates a LoggingEvent from the supplied parameters.
/**
    @param fqcn name of the caller class.
    @param category The event category.
    @param level The event level
    @param message The payload as format for @ref Qore::sprintf() "sprintf()"
    @param msg_args The arguments for formatting
    @param location_info code location related to logging event
    @param thread_id thread related to the event, Default: @ref Qore::gettid() "gettid()"
    @param time_stamp logging event timestamp. Default value is @ref Qore::now_us() "now_us()"
    @param throwable The throwable @ref Qore::ExceptionInfo "ExceptionInfo" associated with the logging event
*/
LoggerEvent::constructor(string fqcn, softstring category, LoggerLevel[QoreLoggerLevel] level, string message,
        *list<auto> msg_args, *hash<CallStackInfo> location_info, *int thread_id, *date time_stamp,
        *hash<ExceptionInfo> throwable) {
    ReferenceHolder<AbstractPrivateData> hlevel(level, xsink);

    if (!thread_id) {
        thread_id = q_gettid();
    }

    SimpleRefHolder<DateTimeNode> ts;
    if (!time_stamp) {
        ts = DateTimeNode::makeNow();
    }

    self->setPrivate(CID_LOGGEREVENT, new QoreLoggerEvent(fqcn->stringRefSelf(), category, obj_level, level, message,
        msg_args, 0, location_info, thread_id, time_stamp ? time_stamp : *ts, throwable));
}

//! Returns the full qualified classname
/**
*/
string LoggerEvent::getFullQualifiedClassname() {
    return event->getFullQualifiedClassname();
}

//! Returns the location information for this logging event
/**
*/
*hash<CallStackInfo> LoggerEvent::getLocationInfo() {
    return event->getLocationInfo();
}

//! Returns the level of this event
/**
*/
LoggerLevel LoggerEvent::getLevel() {
    return event->getLevel();
}

//! Returns the logger which created the event
/**
*/
*object LoggerEvent::getLogger() {
    return event->getLogger();
}

//! Returns the thread id which is related to event
/**
*/
int LoggerEvent::getThreadId() {
    return event->getThreadId();
}

//! Returns the category name
/**
*/
string LoggerEvent::getCategoryName() {
    return event->getCategoryName();
}

//! Returns the event timestamp as an @ref absolute_dates "absolute date/time value"
/**
*/
date LoggerEvent::getTimeStamp() {
    return event->getTimeStamp();
}

//! Returns a relative timestamp for the event
/**
    Returns a @ref relative_dates "relative date/time value" for the amount of time passed
    from the beginning of execution to the time when the event was constructed.

    @see @ref getStartTime()
*/
date LoggerEvent::getRelativeTime() {
    return event->getRelativeTime();
}

//! Returns throwable info, if any
/**
*/
*hash<ExceptionInfo> LoggerEvent::getThrowableInfo() {
    return event->getThrowableInfo();
}

//! Generates a globally unique integer identifier and associates it to the event
/**
*/
int LoggerEvent::getUniqueId() {
    return event->getUniqueId();
}

//! Returns the string message for the logging event
/**
    Potential callable references are evaluated.
    Next the message is rendered using @ref Qore::vsprintf() "vsprintf()" and the result is cached, so
    the message is rendered only once.

    @return the rendered message
*/
string LoggerEvent::getMessage() {
    return event->getMessage(xsink);
}

//! Returns the time when the application/logger started to calculate relative time
/**
*/
static date LoggerEvent::getStartTime() {
    return QoreLoggerEvent::getStartTime();
}

//! Sets the starting time for relative time
/**
*/
static LoggerEvent::setStartTime(date time) {
    QoreLoggerEvent::setStartTime(time);
}
