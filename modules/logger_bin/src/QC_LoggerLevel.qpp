/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_LoggerLevel.cpp LoggerLevel class definition */
/*
    Qore Programming Language

    Copyright (C) 2003 - 2024 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO LEVEL SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include "qore_logger.h"

#include "QC_LoggerLevel.h"

static QoreHashNode* LoggerLevel_serializer(const QoreObject& self, const QoreLoggerLevel& level,
        QoreSerializationContext& context, ExceptionSink* xsink) {
    ReferenceHolder<QoreHashNode> rv(new QoreHashNode(autoTypeInfo), xsink);

    rv->setKeyValue("code", level.getValue(), xsink);
    rv->setKeyValue("str", level.getStr(), xsink);

    return rv.release();
}

static void LoggerLevel_deserializer(QoreObject& self, const QoreHashNode* sdata,
        QoreDeserializationContext& context, ExceptionSink* xsink) {
    if (sdata) {
        QoreValue val = sdata->getKeyValue("code");
        if (val.getType() != NT_INT) {
            xsink->raiseException("DESERIALIZATION-ERROR", "LoggerLevel serialization key 'code' has type '%s'; "
                "expecting 'int'", val.getTypeName());
            return;
        }
        int64 code = val.getAsBigInt();

        val = sdata->getKeyValue("str");
        if (val.getType() != NT_STRING) {
            xsink->raiseException("DESERIALIZATION-ERROR", "LoggerLevel serialization key 'str' has type '%s'; "
                "expecting 'string'", val.getTypeName());
            return;
        }

        self.setPrivate(CID_LOGGERLEVEL, new QoreLoggerLevel(code, val.get<const QoreStringNode>()));
        return;
    }

    xsink->raiseException("DESERIALIZATION-ERROR", "missing serialization data for the LoggerLevel class");
}

//! This is the base class for logger levels
/** This class stores the integer and string log level values
*/
qclass LoggerLevel [ns=Qore::Logger; arg=QoreLoggerLevel* level; vparent=Serializable; serializer=reinterpret_cast<q_serializer_t>(LoggerLevel_serializer); deserializer=LoggerLevel_deserializer];

//! Creates the level with the supplied arguments
/** @param code integer log level value
    @param level string log level value
*/
LoggerLevel::constructor(int code, string level) {
    self->setPrivate(CID_LOGGERLEVEL, new QoreLoggerLevel(code, level));
}

//! Gets the level code value
/**
*/
int LoggerLevel::getValue() {
    return level->getValue();
}

//! Gets the level string
/**
*/
string LoggerLevel::getStr() {
    return level->getStr();
}

//! Compares logger levels
/**
    @param other the other level to compares
    @return True if level is greater or equal to the \a other level
*/
bool LoggerLevel::isGreaterOrEqual(LoggerLevel[QoreLoggerLevel] other) {
    ReferenceHolder<AbstractPrivateData> holder(other, xsink);
    return level->isGreaterOrEqual(other);
}

//! Compares two logger levels
/**
    @param other the other level to compares
*/
bool LoggerLevel::isEqual(LoggerLevel[QoreLoggerLevel] other) {
    ReferenceHolder<AbstractPrivateData> holder(other, xsink);
    return level->isEqual(other);
}

//! Converts the input argument to a level
/**
    Return value is either instantiated or used the existing one if there is any.

    @param level the input level
    @param default_level value to return if conversion is not possible.

    @throw LOGGER-ERROR if defaultLevel is nothing and level not found
*/
static LoggerLevel LoggerLevel::getLevel(int level, *LoggerLevel[QoreLoggerLevel] default_level) {
    ReferenceHolder<AbstractPrivateData> holder(default_level, xsink);
    return QoreLoggerLevel::getLevel(xsink, level, obj_default_level);
}

//! Converts the input argument to a level
/**
    Return value is either instantiated or used the existing one if there is any.

    @param level_str the string input level
    @param default_level value to return if conversion is not possible.

    @throw LOGGER-ERROR if default_level is nothing and level_str not found
*/
static LoggerLevel LoggerLevel::getLevel(string level_str, *LoggerLevel[QoreLoggerLevel] default_level) {
    ReferenceHolder<AbstractPrivateData> holder(default_level, xsink);
    return QoreLoggerLevel::getLevel(xsink, level_str, obj_default_level);
}

//! Returns closest lower logger level
/**
    @param level the logger level
    @return \c Loggerlevel or \c NOTHING if there is no lower level

    @throw LOGGER-ERROR if level not found
*/
static *LoggerLevel LoggerLevel::getNextLowerLevel(int level) {
    return QoreLoggerLevel::getNextLowerLevel(level);
}

//! Returns closest higher logger level
/**
    @param level the logger level
    @return \c Loggerlevel or \c NOTHING if there is no higher level

    @throw LOGGER-ERROR if level not found
*/
static *LoggerLevel LoggerLevel::getNextHigherLevel(int level) {
    return QoreLoggerLevel::getNextHigherLevel(level);
}

//! Returns an OFF Level
/**
*/
static LoggerLevel LoggerLevel::getLevelOff() {
    return QoreLoggerLevel::getLevelOff();
}

//! Returns a FATAL Level
/**
*/
static LoggerLevel LoggerLevel::getLevelFatal() {
    return QoreLoggerLevel::getLevelFatal();
}

//! Returns an ERROR Level
/**
*/
static LoggerLevel LoggerLevel::getLevelError() {
    return QoreLoggerLevel::getLevelError();
}

//! Returns a WARN Level
/**
*/
static LoggerLevel LoggerLevel::getLevelWarn() {
    return QoreLoggerLevel::getLevelWarn();
}

//! Returns an INFO Level
/**
*/
static LoggerLevel LoggerLevel::getLevelInfo() {
    return QoreLoggerLevel::getLevelInfo();
}

//! Returns a DETAIL Level
/**
*/
static LoggerLevel LoggerLevel::getLevelDetail() {
    return QoreLoggerLevel::getLevelDetail();
}

//! Returns a DEBUG Level
/**
*/
static LoggerLevel LoggerLevel::getLevelDebug() {
    return QoreLoggerLevel::getLevelDebug();
}

//! Returns a TRACE Level
/**
*/
static LoggerLevel LoggerLevel::getLevelTrace() {
    return QoreLoggerLevel::getLevelTrace();
}

//! Returns an ALL Level
/**
*/
static LoggerLevel LoggerLevel::getLevelAll() {
    return QoreLoggerLevel::getLevelAll();
}
